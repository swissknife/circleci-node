/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetFlakyTestsRequest = {
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetFlakyTestsInsightsResponseBody = {
    message?: string | undefined;
};

export type FlakyTests = {
    /**
     * The class the test belongs to.
     */
    classname: string;
    /**
     * The file the test belongs to.
     */
    file: string;
    /**
     * The name of the job.
     */
    jobName: string;
    /**
     * The number of the job.
     */
    jobNumber: number;
    /**
     * The number of the pipeline.
     */
    pipelineNumber: number;
    /**
     * The source of the test.
     */
    source: string;
    /**
     * The name of the test.
     */
    testName: string;
    timeWasted?: number | undefined;
    /**
     * The number of times the test flaked.
     */
    timesFlaked: number;
    /**
     * The date and time when workflow was created.
     */
    workflowCreatedAt: string;
    /**
     * The ID of the workflow associated with the provided test counts
     */
    workflowId?: any | undefined;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Flaky tests response
 */
export type GetFlakyTestsResponseBody = {
    /**
     * A list of all instances of flakes. Note that a test is no longer considered flaky after 2 weeks have passed without a flake. Each flake resets this timer.
     */
    flakyTests: Array<FlakyTests>;
    /**
     * A count of unique tests that have failed. If your project has N tests that have flaked multiple times each, this will be equal to N.
     */
    totalFlakyTests: number;
};

export type GetFlakyTestsResponse = GetFlakyTestsInsightsResponseBody | GetFlakyTestsResponseBody;

/** @internal */
export const GetFlakyTestsRequest$inboundSchema: z.ZodType<
    GetFlakyTestsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetFlakyTestsRequest$Outbound = {
    "project-slug": string;
};

/** @internal */
export const GetFlakyTestsRequest$outboundSchema: z.ZodType<
    GetFlakyTestsRequest$Outbound,
    z.ZodTypeDef,
    GetFlakyTestsRequest
> = z
    .object({
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlakyTestsRequest$ {
    /** @deprecated use `GetFlakyTestsRequest$inboundSchema` instead. */
    export const inboundSchema = GetFlakyTestsRequest$inboundSchema;
    /** @deprecated use `GetFlakyTestsRequest$outboundSchema` instead. */
    export const outboundSchema = GetFlakyTestsRequest$outboundSchema;
    /** @deprecated use `GetFlakyTestsRequest$Outbound` instead. */
    export type Outbound = GetFlakyTestsRequest$Outbound;
}

/** @internal */
export const GetFlakyTestsInsightsResponseBody$inboundSchema: z.ZodType<
    GetFlakyTestsInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetFlakyTestsInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetFlakyTestsInsightsResponseBody$outboundSchema: z.ZodType<
    GetFlakyTestsInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetFlakyTestsInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlakyTestsInsightsResponseBody$ {
    /** @deprecated use `GetFlakyTestsInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetFlakyTestsInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetFlakyTestsInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetFlakyTestsInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetFlakyTestsInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetFlakyTestsInsightsResponseBody$Outbound;
}

/** @internal */
export const FlakyTests$inboundSchema: z.ZodType<FlakyTests, z.ZodTypeDef, unknown> = z
    .object({
        classname: z.string(),
        file: z.string(),
        "job-name": z.string(),
        "job-number": z.number().int(),
        "pipeline-number": z.number().int(),
        source: z.string(),
        "test-name": z.string(),
        "time-wasted": z.number().int().optional(),
        "times-flaked": z.number().int(),
        "workflow-created-at": z.string(),
        "workflow-id": z.any().optional(),
        "workflow-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "job-name": "jobName",
            "job-number": "jobNumber",
            "pipeline-number": "pipelineNumber",
            "test-name": "testName",
            "time-wasted": "timeWasted",
            "times-flaked": "timesFlaked",
            "workflow-created-at": "workflowCreatedAt",
            "workflow-id": "workflowId",
            "workflow-name": "workflowName",
        });
    });

/** @internal */
export type FlakyTests$Outbound = {
    classname: string;
    file: string;
    "job-name": string;
    "job-number": number;
    "pipeline-number": number;
    source: string;
    "test-name": string;
    "time-wasted"?: number | undefined;
    "times-flaked": number;
    "workflow-created-at": string;
    "workflow-id"?: any | undefined;
    "workflow-name": string;
};

/** @internal */
export const FlakyTests$outboundSchema: z.ZodType<FlakyTests$Outbound, z.ZodTypeDef, FlakyTests> = z
    .object({
        classname: z.string(),
        file: z.string(),
        jobName: z.string(),
        jobNumber: z.number().int(),
        pipelineNumber: z.number().int(),
        source: z.string(),
        testName: z.string(),
        timeWasted: z.number().int().optional(),
        timesFlaked: z.number().int(),
        workflowCreatedAt: z.string(),
        workflowId: z.any().optional(),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            jobName: "job-name",
            jobNumber: "job-number",
            pipelineNumber: "pipeline-number",
            testName: "test-name",
            timeWasted: "time-wasted",
            timesFlaked: "times-flaked",
            workflowCreatedAt: "workflow-created-at",
            workflowId: "workflow-id",
            workflowName: "workflow-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlakyTests$ {
    /** @deprecated use `FlakyTests$inboundSchema` instead. */
    export const inboundSchema = FlakyTests$inboundSchema;
    /** @deprecated use `FlakyTests$outboundSchema` instead. */
    export const outboundSchema = FlakyTests$outboundSchema;
    /** @deprecated use `FlakyTests$Outbound` instead. */
    export type Outbound = FlakyTests$Outbound;
}

/** @internal */
export const GetFlakyTestsResponseBody$inboundSchema: z.ZodType<
    GetFlakyTestsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "flaky-tests": z.array(z.lazy(() => FlakyTests$inboundSchema)),
        "total-flaky-tests": z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            "flaky-tests": "flakyTests",
            "total-flaky-tests": "totalFlakyTests",
        });
    });

/** @internal */
export type GetFlakyTestsResponseBody$Outbound = {
    "flaky-tests": Array<FlakyTests$Outbound>;
    "total-flaky-tests": number;
};

/** @internal */
export const GetFlakyTestsResponseBody$outboundSchema: z.ZodType<
    GetFlakyTestsResponseBody$Outbound,
    z.ZodTypeDef,
    GetFlakyTestsResponseBody
> = z
    .object({
        flakyTests: z.array(z.lazy(() => FlakyTests$outboundSchema)),
        totalFlakyTests: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            flakyTests: "flaky-tests",
            totalFlakyTests: "total-flaky-tests",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlakyTestsResponseBody$ {
    /** @deprecated use `GetFlakyTestsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetFlakyTestsResponseBody$inboundSchema;
    /** @deprecated use `GetFlakyTestsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetFlakyTestsResponseBody$outboundSchema;
    /** @deprecated use `GetFlakyTestsResponseBody$Outbound` instead. */
    export type Outbound = GetFlakyTestsResponseBody$Outbound;
}

/** @internal */
export const GetFlakyTestsResponse$inboundSchema: z.ZodType<
    GetFlakyTestsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetFlakyTestsInsightsResponseBody$inboundSchema),
    z.lazy(() => GetFlakyTestsResponseBody$inboundSchema),
]);

/** @internal */
export type GetFlakyTestsResponse$Outbound =
    | GetFlakyTestsInsightsResponseBody$Outbound
    | GetFlakyTestsResponseBody$Outbound;

/** @internal */
export const GetFlakyTestsResponse$outboundSchema: z.ZodType<
    GetFlakyTestsResponse$Outbound,
    z.ZodTypeDef,
    GetFlakyTestsResponse
> = z.union([
    z.lazy(() => GetFlakyTestsInsightsResponseBody$outboundSchema),
    z.lazy(() => GetFlakyTestsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFlakyTestsResponse$ {
    /** @deprecated use `GetFlakyTestsResponse$inboundSchema` instead. */
    export const inboundSchema = GetFlakyTestsResponse$inboundSchema;
    /** @deprecated use `GetFlakyTestsResponse$outboundSchema` instead. */
    export const outboundSchema = GetFlakyTestsResponse$outboundSchema;
    /** @deprecated use `GetFlakyTestsResponse$Outbound` instead. */
    export type Outbound = GetFlakyTestsResponse$Outbound;
}
