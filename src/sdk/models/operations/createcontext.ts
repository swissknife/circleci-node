/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified by an id instead of a slug.
 */
export const CreateContextType = {
    Organization: "organization",
} as const;
/**
 * The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified by an id instead of a slug.
 */
export type CreateContextType = ClosedEnum<typeof CreateContextType>;

export type Two = {
    /**
     * A string that represents an organization. Specify either this or id. Cannot be used for accounts.
     */
    slug: string;
    /**
     * The type of owner. Defaults to "organization". Accounts are only used as context owners in server and must be specified by an id instead of a slug.
     */
    type?: CreateContextType | undefined;
};

/**
 * The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
 */
export const Type = {
    Account: "account",
    Organization: "organization",
} as const;
/**
 * The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
 */
export type Type = ClosedEnum<typeof Type>;

export type One = {
    /**
     * The unique ID of the owner of the context. Specify either this or slug.
     */
    id: string;
    /**
     * The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
     */
    type?: Type | undefined;
};

export type Owner = One | Two;

export type CreateContextRequestBody = {
    /**
     * The user defined name of the context.
     */
    name: string;
    owner: One | Two;
};

/**
 * Error response.
 */
export type CreateContextResponseBody = {
    message?: string | undefined;
};

/**
 * The new context
 */
export type CreateContextContext = {
    /**
     * The date and time the context was created.
     */
    createdAt: Date;
    /**
     * The unique ID of the context.
     */
    id: string;
    /**
     * The user defined name of the context.
     */
    name: string;
};

export type CreateContextResponse = CreateContextResponseBody | CreateContextContext;

/** @internal */
export const CreateContextType$inboundSchema: z.ZodNativeEnum<typeof CreateContextType> =
    z.nativeEnum(CreateContextType);

/** @internal */
export const CreateContextType$outboundSchema: z.ZodNativeEnum<typeof CreateContextType> =
    CreateContextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContextType$ {
    /** @deprecated use `CreateContextType$inboundSchema` instead. */
    export const inboundSchema = CreateContextType$inboundSchema;
    /** @deprecated use `CreateContextType$outboundSchema` instead. */
    export const outboundSchema = CreateContextType$outboundSchema;
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.object({
    slug: z.string(),
    type: CreateContextType$inboundSchema.optional(),
});

/** @internal */
export type Two$Outbound = {
    slug: string;
    type?: string | undefined;
};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z.object({
    slug: z.string(),
    type: CreateContextType$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
    /** @deprecated use `Two$Outbound` instead. */
    export type Outbound = Two$Outbound;
}

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    type: Type$inboundSchema.optional(),
});

/** @internal */
export type One$Outbound = {
    id: string;
    type?: string | undefined;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z.object({
    id: z.string(),
    type: Type$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    export const inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    export const outboundSchema = One$outboundSchema;
    /** @deprecated use `One$Outbound` instead. */
    export type Outbound = One$Outbound;
}

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => One$inboundSchema),
    z.lazy(() => Two$inboundSchema),
]);

/** @internal */
export type Owner$Outbound = One$Outbound | Two$Outbound;

/** @internal */
export const Owner$outboundSchema: z.ZodType<Owner$Outbound, z.ZodTypeDef, Owner> = z.union([
    z.lazy(() => One$outboundSchema),
    z.lazy(() => Two$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
    /** @deprecated use `Owner$inboundSchema` instead. */
    export const inboundSchema = Owner$inboundSchema;
    /** @deprecated use `Owner$outboundSchema` instead. */
    export const outboundSchema = Owner$outboundSchema;
    /** @deprecated use `Owner$Outbound` instead. */
    export type Outbound = Owner$Outbound;
}

/** @internal */
export const CreateContextRequestBody$inboundSchema: z.ZodType<
    CreateContextRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    owner: z.union([z.lazy(() => One$inboundSchema), z.lazy(() => Two$inboundSchema)]),
});

/** @internal */
export type CreateContextRequestBody$Outbound = {
    name: string;
    owner: One$Outbound | Two$Outbound;
};

/** @internal */
export const CreateContextRequestBody$outboundSchema: z.ZodType<
    CreateContextRequestBody$Outbound,
    z.ZodTypeDef,
    CreateContextRequestBody
> = z.object({
    name: z.string(),
    owner: z.union([z.lazy(() => One$outboundSchema), z.lazy(() => Two$outboundSchema)]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContextRequestBody$ {
    /** @deprecated use `CreateContextRequestBody$inboundSchema` instead. */
    export const inboundSchema = CreateContextRequestBody$inboundSchema;
    /** @deprecated use `CreateContextRequestBody$outboundSchema` instead. */
    export const outboundSchema = CreateContextRequestBody$outboundSchema;
    /** @deprecated use `CreateContextRequestBody$Outbound` instead. */
    export type Outbound = CreateContextRequestBody$Outbound;
}

/** @internal */
export const CreateContextResponseBody$inboundSchema: z.ZodType<
    CreateContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type CreateContextResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const CreateContextResponseBody$outboundSchema: z.ZodType<
    CreateContextResponseBody$Outbound,
    z.ZodTypeDef,
    CreateContextResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContextResponseBody$ {
    /** @deprecated use `CreateContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateContextResponseBody$inboundSchema;
    /** @deprecated use `CreateContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateContextResponseBody$outboundSchema;
    /** @deprecated use `CreateContextResponseBody$Outbound` instead. */
    export type Outbound = CreateContextResponseBody$Outbound;
}

/** @internal */
export const CreateContextContext$inboundSchema: z.ZodType<
    CreateContextContext,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        id: z.string(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type CreateContextContext$Outbound = {
    created_at: string;
    id: string;
    name: string;
};

/** @internal */
export const CreateContextContext$outboundSchema: z.ZodType<
    CreateContextContext$Outbound,
    z.ZodTypeDef,
    CreateContextContext
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContextContext$ {
    /** @deprecated use `CreateContextContext$inboundSchema` instead. */
    export const inboundSchema = CreateContextContext$inboundSchema;
    /** @deprecated use `CreateContextContext$outboundSchema` instead. */
    export const outboundSchema = CreateContextContext$outboundSchema;
    /** @deprecated use `CreateContextContext$Outbound` instead. */
    export type Outbound = CreateContextContext$Outbound;
}

/** @internal */
export const CreateContextResponse$inboundSchema: z.ZodType<
    CreateContextResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CreateContextResponseBody$inboundSchema),
    z.lazy(() => CreateContextContext$inboundSchema),
]);

/** @internal */
export type CreateContextResponse$Outbound =
    | CreateContextResponseBody$Outbound
    | CreateContextContext$Outbound;

/** @internal */
export const CreateContextResponse$outboundSchema: z.ZodType<
    CreateContextResponse$Outbound,
    z.ZodTypeDef,
    CreateContextResponse
> = z.union([
    z.lazy(() => CreateContextResponseBody$outboundSchema),
    z.lazy(() => CreateContextContext$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateContextResponse$ {
    /** @deprecated use `CreateContextResponse$inboundSchema` instead. */
    export const inboundSchema = CreateContextResponse$inboundSchema;
    /** @deprecated use `CreateContextResponse$outboundSchema` instead. */
    export const outboundSchema = CreateContextResponse$outboundSchema;
    /** @deprecated use `CreateContextResponse$Outbound` instead. */
    export type Outbound = CreateContextResponse$Outbound;
}
