/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The attribution-actor of the scheduled pipeline.
 */
export const AttributionActor = {
    Current: "current",
    System: "system",
} as const;
/**
 * The attribution-actor of the scheduled pipeline.
 */
export type AttributionActor = ClosedEnum<typeof AttributionActor>;

export type CreateScheduleParameters = number | string | boolean;

/**
 * Day in a week, in three letters format
 */
export const CreateScheduleDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type CreateScheduleDaysOfWeek = ClosedEnum<typeof CreateScheduleDaysOfWeek>;

/**
 * Month, in three letters format.
 */
export const CreateScheduleMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type CreateScheduleMonths = ClosedEnum<typeof CreateScheduleMonths>;

export type CreateSchedule2 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth: Array<number>;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek?: Array<CreateScheduleDaysOfWeek> | undefined;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<CreateScheduleMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Day in a week, in three letters format
 */
export const DaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type DaysOfWeek = ClosedEnum<typeof DaysOfWeek>;

/**
 * Month, in three letters format.
 */
export const Months = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type Months = ClosedEnum<typeof Months>;

export type CreateSchedule1 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth?: Array<number> | undefined;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek: Array<DaysOfWeek>;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<Months> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Timetable that specifies when a schedule triggers.
 */
export type Timetable = CreateSchedule1 | CreateSchedule2;

/**
 * The parameters for a create schedule request
 */
export type CreateScheduleCreateScheduleParameters = {
    /**
     * The attribution-actor of the scheduled pipeline.
     */
    attributionActor: AttributionActor;
    /**
     * Description of the schedule.
     */
    description?: string | undefined;
    /**
     * Name of the schedule.
     */
    name: string;
    /**
     * Pipeline parameters represented as key-value pairs. Must contain branch or tag.
     */
    parameters: { [k: string]: number | string | boolean };
    /**
     * Timetable that specifies when a schedule triggers.
     */
    timetable: CreateSchedule1 | CreateSchedule2;
};

export type CreateScheduleRequest = {
    requestBody?: CreateScheduleCreateScheduleParameters | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type CreateScheduleResponseBody = {
    message?: string | undefined;
};

/**
 * The attribution actor who will run the scheduled pipeline.
 */
export type User = {
    /**
     * The unique ID of the user.
     */
    id: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
    /**
     * The name of the user.
     */
    name: string;
};

export type CreateScheduleScheduleParameters = number | string | boolean;

/**
 * Day in a week, in three letters format
 */
export const CreateScheduleScheduleResponseDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type CreateScheduleScheduleResponseDaysOfWeek = ClosedEnum<
    typeof CreateScheduleScheduleResponseDaysOfWeek
>;

/**
 * Month, in three letters format.
 */
export const CreateScheduleScheduleResponseMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type CreateScheduleScheduleResponseMonths = ClosedEnum<
    typeof CreateScheduleScheduleResponseMonths
>;

export type CreateScheduleSchedule2 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth: Array<number>;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek?: Array<CreateScheduleScheduleResponseDaysOfWeek> | undefined;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<CreateScheduleScheduleResponseMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Day in a week, in three letters format
 */
export const CreateScheduleScheduleDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type CreateScheduleScheduleDaysOfWeek = ClosedEnum<typeof CreateScheduleScheduleDaysOfWeek>;

/**
 * Month, in three letters format.
 */
export const CreateScheduleScheduleMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type CreateScheduleScheduleMonths = ClosedEnum<typeof CreateScheduleScheduleMonths>;

export type CreateScheduleSchedule1 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth?: Array<number> | undefined;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek: Array<CreateScheduleScheduleDaysOfWeek>;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<CreateScheduleScheduleMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Timetable that specifies when a schedule triggers.
 */
export type CreateScheduleTimetable = CreateScheduleSchedule1 | CreateScheduleSchedule2;

/**
 * A schedule response
 */
export type CreateScheduleSchedule = {
    /**
     * The attribution actor who will run the scheduled pipeline.
     */
    actor: User;
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * Description of the schedule.
     */
    description: string;
    /**
     * The unique ID of the schedule.
     */
    id: string;
    /**
     * Name of the schedule.
     */
    name: string;
    /**
     * Pipeline parameters represented as key-value pairs. Must contain branch or tag.
     */
    parameters: { [k: string]: number | string | boolean };
    /**
     * The project-slug for the schedule
     */
    projectSlug: string;
    /**
     * Timetable that specifies when a schedule triggers.
     */
    timetable: CreateScheduleSchedule1 | CreateScheduleSchedule2;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt: Date;
};

export type CreateScheduleResponse = CreateScheduleResponseBody | CreateScheduleSchedule;

/** @internal */
export const AttributionActor$inboundSchema: z.ZodNativeEnum<typeof AttributionActor> =
    z.nativeEnum(AttributionActor);

/** @internal */
export const AttributionActor$outboundSchema: z.ZodNativeEnum<typeof AttributionActor> =
    AttributionActor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AttributionActor$ {
    /** @deprecated use `AttributionActor$inboundSchema` instead. */
    export const inboundSchema = AttributionActor$inboundSchema;
    /** @deprecated use `AttributionActor$outboundSchema` instead. */
    export const outboundSchema = AttributionActor$outboundSchema;
}

/** @internal */
export const CreateScheduleParameters$inboundSchema: z.ZodType<
    CreateScheduleParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type CreateScheduleParameters$Outbound = number | string | boolean;

/** @internal */
export const CreateScheduleParameters$outboundSchema: z.ZodType<
    CreateScheduleParameters$Outbound,
    z.ZodTypeDef,
    CreateScheduleParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleParameters$ {
    /** @deprecated use `CreateScheduleParameters$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleParameters$inboundSchema;
    /** @deprecated use `CreateScheduleParameters$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleParameters$outboundSchema;
    /** @deprecated use `CreateScheduleParameters$Outbound` instead. */
    export type Outbound = CreateScheduleParameters$Outbound;
}

/** @internal */
export const CreateScheduleDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleDaysOfWeek
> = z.nativeEnum(CreateScheduleDaysOfWeek);

/** @internal */
export const CreateScheduleDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleDaysOfWeek
> = CreateScheduleDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleDaysOfWeek$ {
    /** @deprecated use `CreateScheduleDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleDaysOfWeek$inboundSchema;
    /** @deprecated use `CreateScheduleDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleDaysOfWeek$outboundSchema;
}

/** @internal */
export const CreateScheduleMonths$inboundSchema: z.ZodNativeEnum<typeof CreateScheduleMonths> =
    z.nativeEnum(CreateScheduleMonths);

/** @internal */
export const CreateScheduleMonths$outboundSchema: z.ZodNativeEnum<typeof CreateScheduleMonths> =
    CreateScheduleMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleMonths$ {
    /** @deprecated use `CreateScheduleMonths$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleMonths$inboundSchema;
    /** @deprecated use `CreateScheduleMonths$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleMonths$outboundSchema;
}

/** @internal */
export const CreateSchedule2$inboundSchema: z.ZodType<CreateSchedule2, z.ZodTypeDef, unknown> = z
    .object({
        "days-of-month": z.array(z.number().int()),
        "days-of-week": z.array(CreateScheduleDaysOfWeek$inboundSchema).optional(),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(CreateScheduleMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type CreateSchedule2$Outbound = {
    "days-of-month": Array<number>;
    "days-of-week"?: Array<string> | undefined;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const CreateSchedule2$outboundSchema: z.ZodType<
    CreateSchedule2$Outbound,
    z.ZodTypeDef,
    CreateSchedule2
> = z
    .object({
        daysOfMonth: z.array(z.number().int()),
        daysOfWeek: z.array(CreateScheduleDaysOfWeek$outboundSchema).optional(),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(CreateScheduleMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchedule2$ {
    /** @deprecated use `CreateSchedule2$inboundSchema` instead. */
    export const inboundSchema = CreateSchedule2$inboundSchema;
    /** @deprecated use `CreateSchedule2$outboundSchema` instead. */
    export const outboundSchema = CreateSchedule2$outboundSchema;
    /** @deprecated use `CreateSchedule2$Outbound` instead. */
    export type Outbound = CreateSchedule2$Outbound;
}

/** @internal */
export const DaysOfWeek$inboundSchema: z.ZodNativeEnum<typeof DaysOfWeek> =
    z.nativeEnum(DaysOfWeek);

/** @internal */
export const DaysOfWeek$outboundSchema: z.ZodNativeEnum<typeof DaysOfWeek> =
    DaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DaysOfWeek$ {
    /** @deprecated use `DaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = DaysOfWeek$inboundSchema;
    /** @deprecated use `DaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = DaysOfWeek$outboundSchema;
}

/** @internal */
export const Months$inboundSchema: z.ZodNativeEnum<typeof Months> = z.nativeEnum(Months);

/** @internal */
export const Months$outboundSchema: z.ZodNativeEnum<typeof Months> = Months$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Months$ {
    /** @deprecated use `Months$inboundSchema` instead. */
    export const inboundSchema = Months$inboundSchema;
    /** @deprecated use `Months$outboundSchema` instead. */
    export const outboundSchema = Months$outboundSchema;
}

/** @internal */
export const CreateSchedule1$inboundSchema: z.ZodType<CreateSchedule1, z.ZodTypeDef, unknown> = z
    .object({
        "days-of-month": z.array(z.number().int()).optional(),
        "days-of-week": z.array(DaysOfWeek$inboundSchema),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(Months$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type CreateSchedule1$Outbound = {
    "days-of-month"?: Array<number> | undefined;
    "days-of-week": Array<string>;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const CreateSchedule1$outboundSchema: z.ZodType<
    CreateSchedule1$Outbound,
    z.ZodTypeDef,
    CreateSchedule1
> = z
    .object({
        daysOfMonth: z.array(z.number().int()).optional(),
        daysOfWeek: z.array(DaysOfWeek$outboundSchema),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(Months$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSchedule1$ {
    /** @deprecated use `CreateSchedule1$inboundSchema` instead. */
    export const inboundSchema = CreateSchedule1$inboundSchema;
    /** @deprecated use `CreateSchedule1$outboundSchema` instead. */
    export const outboundSchema = CreateSchedule1$outboundSchema;
    /** @deprecated use `CreateSchedule1$Outbound` instead. */
    export type Outbound = CreateSchedule1$Outbound;
}

/** @internal */
export const Timetable$inboundSchema: z.ZodType<Timetable, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => CreateSchedule1$inboundSchema),
    z.lazy(() => CreateSchedule2$inboundSchema),
]);

/** @internal */
export type Timetable$Outbound = CreateSchedule1$Outbound | CreateSchedule2$Outbound;

/** @internal */
export const Timetable$outboundSchema: z.ZodType<Timetable$Outbound, z.ZodTypeDef, Timetable> =
    z.union([
        z.lazy(() => CreateSchedule1$outboundSchema),
        z.lazy(() => CreateSchedule2$outboundSchema),
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Timetable$ {
    /** @deprecated use `Timetable$inboundSchema` instead. */
    export const inboundSchema = Timetable$inboundSchema;
    /** @deprecated use `Timetable$outboundSchema` instead. */
    export const outboundSchema = Timetable$outboundSchema;
    /** @deprecated use `Timetable$Outbound` instead. */
    export type Outbound = Timetable$Outbound;
}

/** @internal */
export const CreateScheduleCreateScheduleParameters$inboundSchema: z.ZodType<
    CreateScheduleCreateScheduleParameters,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "attribution-actor": AttributionActor$inboundSchema,
        description: z.string().optional(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        timetable: z.union([
            z.lazy(() => CreateSchedule1$inboundSchema),
            z.lazy(() => CreateSchedule2$inboundSchema),
        ]),
    })
    .transform((v) => {
        return remap$(v, {
            "attribution-actor": "attributionActor",
        });
    });

/** @internal */
export type CreateScheduleCreateScheduleParameters$Outbound = {
    "attribution-actor": string;
    description?: string | undefined;
    name: string;
    parameters: { [k: string]: number | string | boolean };
    timetable: CreateSchedule1$Outbound | CreateSchedule2$Outbound;
};

/** @internal */
export const CreateScheduleCreateScheduleParameters$outboundSchema: z.ZodType<
    CreateScheduleCreateScheduleParameters$Outbound,
    z.ZodTypeDef,
    CreateScheduleCreateScheduleParameters
> = z
    .object({
        attributionActor: AttributionActor$outboundSchema,
        description: z.string().optional(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        timetable: z.union([
            z.lazy(() => CreateSchedule1$outboundSchema),
            z.lazy(() => CreateSchedule2$outboundSchema),
        ]),
    })
    .transform((v) => {
        return remap$(v, {
            attributionActor: "attribution-actor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleCreateScheduleParameters$ {
    /** @deprecated use `CreateScheduleCreateScheduleParameters$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleCreateScheduleParameters$inboundSchema;
    /** @deprecated use `CreateScheduleCreateScheduleParameters$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleCreateScheduleParameters$outboundSchema;
    /** @deprecated use `CreateScheduleCreateScheduleParameters$Outbound` instead. */
    export type Outbound = CreateScheduleCreateScheduleParameters$Outbound;
}

/** @internal */
export const CreateScheduleRequest$inboundSchema: z.ZodType<
    CreateScheduleRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => CreateScheduleCreateScheduleParameters$inboundSchema).optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type CreateScheduleRequest$Outbound = {
    RequestBody?: CreateScheduleCreateScheduleParameters$Outbound | undefined;
    "project-slug": string;
};

/** @internal */
export const CreateScheduleRequest$outboundSchema: z.ZodType<
    CreateScheduleRequest$Outbound,
    z.ZodTypeDef,
    CreateScheduleRequest
> = z
    .object({
        requestBody: z.lazy(() => CreateScheduleCreateScheduleParameters$outboundSchema).optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleRequest$ {
    /** @deprecated use `CreateScheduleRequest$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleRequest$inboundSchema;
    /** @deprecated use `CreateScheduleRequest$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleRequest$outboundSchema;
    /** @deprecated use `CreateScheduleRequest$Outbound` instead. */
    export type Outbound = CreateScheduleRequest$Outbound;
}

/** @internal */
export const CreateScheduleResponseBody$inboundSchema: z.ZodType<
    CreateScheduleResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type CreateScheduleResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const CreateScheduleResponseBody$outboundSchema: z.ZodType<
    CreateScheduleResponseBody$Outbound,
    z.ZodTypeDef,
    CreateScheduleResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleResponseBody$ {
    /** @deprecated use `CreateScheduleResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleResponseBody$inboundSchema;
    /** @deprecated use `CreateScheduleResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleResponseBody$outboundSchema;
    /** @deprecated use `CreateScheduleResponseBody$Outbound` instead. */
    export type Outbound = CreateScheduleResponseBody$Outbound;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/** @internal */
export type User$Outbound = {
    id: string;
    login: string;
    name: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
    /** @deprecated use `User$inboundSchema` instead. */
    export const inboundSchema = User$inboundSchema;
    /** @deprecated use `User$outboundSchema` instead. */
    export const outboundSchema = User$outboundSchema;
    /** @deprecated use `User$Outbound` instead. */
    export type Outbound = User$Outbound;
}

/** @internal */
export const CreateScheduleScheduleParameters$inboundSchema: z.ZodType<
    CreateScheduleScheduleParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type CreateScheduleScheduleParameters$Outbound = number | string | boolean;

/** @internal */
export const CreateScheduleScheduleParameters$outboundSchema: z.ZodType<
    CreateScheduleScheduleParameters$Outbound,
    z.ZodTypeDef,
    CreateScheduleScheduleParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleScheduleParameters$ {
    /** @deprecated use `CreateScheduleScheduleParameters$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleScheduleParameters$inboundSchema;
    /** @deprecated use `CreateScheduleScheduleParameters$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleScheduleParameters$outboundSchema;
    /** @deprecated use `CreateScheduleScheduleParameters$Outbound` instead. */
    export type Outbound = CreateScheduleScheduleParameters$Outbound;
}

/** @internal */
export const CreateScheduleScheduleResponseDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleResponseDaysOfWeek
> = z.nativeEnum(CreateScheduleScheduleResponseDaysOfWeek);

/** @internal */
export const CreateScheduleScheduleResponseDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleResponseDaysOfWeek
> = CreateScheduleScheduleResponseDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleScheduleResponseDaysOfWeek$ {
    /** @deprecated use `CreateScheduleScheduleResponseDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleScheduleResponseDaysOfWeek$inboundSchema;
    /** @deprecated use `CreateScheduleScheduleResponseDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleScheduleResponseDaysOfWeek$outboundSchema;
}

/** @internal */
export const CreateScheduleScheduleResponseMonths$inboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleResponseMonths
> = z.nativeEnum(CreateScheduleScheduleResponseMonths);

/** @internal */
export const CreateScheduleScheduleResponseMonths$outboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleResponseMonths
> = CreateScheduleScheduleResponseMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleScheduleResponseMonths$ {
    /** @deprecated use `CreateScheduleScheduleResponseMonths$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleScheduleResponseMonths$inboundSchema;
    /** @deprecated use `CreateScheduleScheduleResponseMonths$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleScheduleResponseMonths$outboundSchema;
}

/** @internal */
export const CreateScheduleSchedule2$inboundSchema: z.ZodType<
    CreateScheduleSchedule2,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "days-of-month": z.array(z.number().int()),
        "days-of-week": z.array(CreateScheduleScheduleResponseDaysOfWeek$inboundSchema).optional(),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(CreateScheduleScheduleResponseMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type CreateScheduleSchedule2$Outbound = {
    "days-of-month": Array<number>;
    "days-of-week"?: Array<string> | undefined;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const CreateScheduleSchedule2$outboundSchema: z.ZodType<
    CreateScheduleSchedule2$Outbound,
    z.ZodTypeDef,
    CreateScheduleSchedule2
> = z
    .object({
        daysOfMonth: z.array(z.number().int()),
        daysOfWeek: z.array(CreateScheduleScheduleResponseDaysOfWeek$outboundSchema).optional(),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(CreateScheduleScheduleResponseMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleSchedule2$ {
    /** @deprecated use `CreateScheduleSchedule2$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleSchedule2$inboundSchema;
    /** @deprecated use `CreateScheduleSchedule2$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleSchedule2$outboundSchema;
    /** @deprecated use `CreateScheduleSchedule2$Outbound` instead. */
    export type Outbound = CreateScheduleSchedule2$Outbound;
}

/** @internal */
export const CreateScheduleScheduleDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleDaysOfWeek
> = z.nativeEnum(CreateScheduleScheduleDaysOfWeek);

/** @internal */
export const CreateScheduleScheduleDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleDaysOfWeek
> = CreateScheduleScheduleDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleScheduleDaysOfWeek$ {
    /** @deprecated use `CreateScheduleScheduleDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleScheduleDaysOfWeek$inboundSchema;
    /** @deprecated use `CreateScheduleScheduleDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleScheduleDaysOfWeek$outboundSchema;
}

/** @internal */
export const CreateScheduleScheduleMonths$inboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleMonths
> = z.nativeEnum(CreateScheduleScheduleMonths);

/** @internal */
export const CreateScheduleScheduleMonths$outboundSchema: z.ZodNativeEnum<
    typeof CreateScheduleScheduleMonths
> = CreateScheduleScheduleMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleScheduleMonths$ {
    /** @deprecated use `CreateScheduleScheduleMonths$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleScheduleMonths$inboundSchema;
    /** @deprecated use `CreateScheduleScheduleMonths$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleScheduleMonths$outboundSchema;
}

/** @internal */
export const CreateScheduleSchedule1$inboundSchema: z.ZodType<
    CreateScheduleSchedule1,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "days-of-month": z.array(z.number().int()).optional(),
        "days-of-week": z.array(CreateScheduleScheduleDaysOfWeek$inboundSchema),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(CreateScheduleScheduleMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type CreateScheduleSchedule1$Outbound = {
    "days-of-month"?: Array<number> | undefined;
    "days-of-week": Array<string>;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const CreateScheduleSchedule1$outboundSchema: z.ZodType<
    CreateScheduleSchedule1$Outbound,
    z.ZodTypeDef,
    CreateScheduleSchedule1
> = z
    .object({
        daysOfMonth: z.array(z.number().int()).optional(),
        daysOfWeek: z.array(CreateScheduleScheduleDaysOfWeek$outboundSchema),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(CreateScheduleScheduleMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleSchedule1$ {
    /** @deprecated use `CreateScheduleSchedule1$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleSchedule1$inboundSchema;
    /** @deprecated use `CreateScheduleSchedule1$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleSchedule1$outboundSchema;
    /** @deprecated use `CreateScheduleSchedule1$Outbound` instead. */
    export type Outbound = CreateScheduleSchedule1$Outbound;
}

/** @internal */
export const CreateScheduleTimetable$inboundSchema: z.ZodType<
    CreateScheduleTimetable,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CreateScheduleSchedule1$inboundSchema),
    z.lazy(() => CreateScheduleSchedule2$inboundSchema),
]);

/** @internal */
export type CreateScheduleTimetable$Outbound =
    | CreateScheduleSchedule1$Outbound
    | CreateScheduleSchedule2$Outbound;

/** @internal */
export const CreateScheduleTimetable$outboundSchema: z.ZodType<
    CreateScheduleTimetable$Outbound,
    z.ZodTypeDef,
    CreateScheduleTimetable
> = z.union([
    z.lazy(() => CreateScheduleSchedule1$outboundSchema),
    z.lazy(() => CreateScheduleSchedule2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleTimetable$ {
    /** @deprecated use `CreateScheduleTimetable$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleTimetable$inboundSchema;
    /** @deprecated use `CreateScheduleTimetable$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleTimetable$outboundSchema;
    /** @deprecated use `CreateScheduleTimetable$Outbound` instead. */
    export type Outbound = CreateScheduleTimetable$Outbound;
}

/** @internal */
export const CreateScheduleSchedule$inboundSchema: z.ZodType<
    CreateScheduleSchedule,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        actor: z.lazy(() => User$inboundSchema),
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        "project-slug": z.string(),
        timetable: z.union([
            z.lazy(() => CreateScheduleSchedule1$inboundSchema),
            z.lazy(() => CreateScheduleSchedule2$inboundSchema),
        ]),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "project-slug": "projectSlug",
            "updated-at": "updatedAt",
        });
    });

/** @internal */
export type CreateScheduleSchedule$Outbound = {
    actor: User$Outbound;
    "created-at": string;
    description: string;
    id: string;
    name: string;
    parameters: { [k: string]: number | string | boolean };
    "project-slug": string;
    timetable: CreateScheduleSchedule1$Outbound | CreateScheduleSchedule2$Outbound;
    "updated-at": string;
};

/** @internal */
export const CreateScheduleSchedule$outboundSchema: z.ZodType<
    CreateScheduleSchedule$Outbound,
    z.ZodTypeDef,
    CreateScheduleSchedule
> = z
    .object({
        actor: z.lazy(() => User$outboundSchema),
        createdAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        projectSlug: z.string(),
        timetable: z.union([
            z.lazy(() => CreateScheduleSchedule1$outboundSchema),
            z.lazy(() => CreateScheduleSchedule2$outboundSchema),
        ]),
        updatedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            projectSlug: "project-slug",
            updatedAt: "updated-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleSchedule$ {
    /** @deprecated use `CreateScheduleSchedule$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleSchedule$inboundSchema;
    /** @deprecated use `CreateScheduleSchedule$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleSchedule$outboundSchema;
    /** @deprecated use `CreateScheduleSchedule$Outbound` instead. */
    export type Outbound = CreateScheduleSchedule$Outbound;
}

/** @internal */
export const CreateScheduleResponse$inboundSchema: z.ZodType<
    CreateScheduleResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CreateScheduleResponseBody$inboundSchema),
    z.lazy(() => CreateScheduleSchedule$inboundSchema),
]);

/** @internal */
export type CreateScheduleResponse$Outbound =
    | CreateScheduleResponseBody$Outbound
    | CreateScheduleSchedule$Outbound;

/** @internal */
export const CreateScheduleResponse$outboundSchema: z.ZodType<
    CreateScheduleResponse$Outbound,
    z.ZodTypeDef,
    CreateScheduleResponse
> = z.union([
    z.lazy(() => CreateScheduleResponseBody$outboundSchema),
    z.lazy(() => CreateScheduleSchedule$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateScheduleResponse$ {
    /** @deprecated use `CreateScheduleResponse$inboundSchema` instead. */
    export const inboundSchema = CreateScheduleResponse$inboundSchema;
    /** @deprecated use `CreateScheduleResponse$outboundSchema` instead. */
    export const outboundSchema = CreateScheduleResponse$outboundSchema;
    /** @deprecated use `CreateScheduleResponse$Outbound` instead. */
    export type Outbound = CreateScheduleResponse$Outbound;
}
