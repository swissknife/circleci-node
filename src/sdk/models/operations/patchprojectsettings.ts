/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type PatchProjectSettingsRequest = {
    /**
     * The `organization` segment of a project or org slug, the second of the three. For GitHub OAuth or Bitbucket projects, this is the organization name. For projects that use GitLab or GitHub App, use the organization ID (found in Organization Settings).
     */
    organization: string;
    /**
     * The `project` segment of a project slug, the third of the three. For GitHub OAuth or Bitbucket projects, this is the repository name. For projects that use GitLab or GitHub App, use the project ID (found in Project Settings).
     */
    project: string;
    /**
     * The setting(s) to update, including one or more fields in the JSON object. Note that `oss: true` will only be set on projects whose underlying repositories are actually open source.
     */
    projectSettings: shared.ProjectSettings;
    /**
     * The `provider` segment of a project or org slug, the first of the three. This may be a VCS. For projects that use GitLab or GitHub App, use `circleci`.
     */
    provider: string;
};

/**
 * Credentials provided are invalid.
 */
export type PatchProjectSettingsProjectResponseBody = {
    message?: string | undefined;
};

/**
 * Request is malformed, e.g. with improperly encoded JSON
 */
export type PatchProjectSettingsResponseBody = {
    message?: string | undefined;
};

export type PatchProjectSettingsResponse =
    | PatchProjectSettingsResponseBody
    | PatchProjectSettingsProjectResponseBody
    | shared.ProjectSettings;

/** @internal */
export const PatchProjectSettingsRequest$inboundSchema: z.ZodType<
    PatchProjectSettingsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        organization: z.string(),
        project: z.string(),
        project_settings: shared.ProjectSettings$inboundSchema,
        provider: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            project_settings: "projectSettings",
        });
    });

/** @internal */
export type PatchProjectSettingsRequest$Outbound = {
    organization: string;
    project: string;
    project_settings: shared.ProjectSettings$Outbound;
    provider: string;
};

/** @internal */
export const PatchProjectSettingsRequest$outboundSchema: z.ZodType<
    PatchProjectSettingsRequest$Outbound,
    z.ZodTypeDef,
    PatchProjectSettingsRequest
> = z
    .object({
        organization: z.string(),
        project: z.string(),
        projectSettings: shared.ProjectSettings$outboundSchema,
        provider: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSettings: "project_settings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProjectSettingsRequest$ {
    /** @deprecated use `PatchProjectSettingsRequest$inboundSchema` instead. */
    export const inboundSchema = PatchProjectSettingsRequest$inboundSchema;
    /** @deprecated use `PatchProjectSettingsRequest$outboundSchema` instead. */
    export const outboundSchema = PatchProjectSettingsRequest$outboundSchema;
    /** @deprecated use `PatchProjectSettingsRequest$Outbound` instead. */
    export type Outbound = PatchProjectSettingsRequest$Outbound;
}

/** @internal */
export const PatchProjectSettingsProjectResponseBody$inboundSchema: z.ZodType<
    PatchProjectSettingsProjectResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type PatchProjectSettingsProjectResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const PatchProjectSettingsProjectResponseBody$outboundSchema: z.ZodType<
    PatchProjectSettingsProjectResponseBody$Outbound,
    z.ZodTypeDef,
    PatchProjectSettingsProjectResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProjectSettingsProjectResponseBody$ {
    /** @deprecated use `PatchProjectSettingsProjectResponseBody$inboundSchema` instead. */
    export const inboundSchema = PatchProjectSettingsProjectResponseBody$inboundSchema;
    /** @deprecated use `PatchProjectSettingsProjectResponseBody$outboundSchema` instead. */
    export const outboundSchema = PatchProjectSettingsProjectResponseBody$outboundSchema;
    /** @deprecated use `PatchProjectSettingsProjectResponseBody$Outbound` instead. */
    export type Outbound = PatchProjectSettingsProjectResponseBody$Outbound;
}

/** @internal */
export const PatchProjectSettingsResponseBody$inboundSchema: z.ZodType<
    PatchProjectSettingsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type PatchProjectSettingsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const PatchProjectSettingsResponseBody$outboundSchema: z.ZodType<
    PatchProjectSettingsResponseBody$Outbound,
    z.ZodTypeDef,
    PatchProjectSettingsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProjectSettingsResponseBody$ {
    /** @deprecated use `PatchProjectSettingsResponseBody$inboundSchema` instead. */
    export const inboundSchema = PatchProjectSettingsResponseBody$inboundSchema;
    /** @deprecated use `PatchProjectSettingsResponseBody$outboundSchema` instead. */
    export const outboundSchema = PatchProjectSettingsResponseBody$outboundSchema;
    /** @deprecated use `PatchProjectSettingsResponseBody$Outbound` instead. */
    export type Outbound = PatchProjectSettingsResponseBody$Outbound;
}

/** @internal */
export const PatchProjectSettingsResponse$inboundSchema: z.ZodType<
    PatchProjectSettingsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => PatchProjectSettingsResponseBody$inboundSchema),
    z.lazy(() => PatchProjectSettingsProjectResponseBody$inboundSchema),
    shared.ProjectSettings$inboundSchema,
]);

/** @internal */
export type PatchProjectSettingsResponse$Outbound =
    | PatchProjectSettingsResponseBody$Outbound
    | PatchProjectSettingsProjectResponseBody$Outbound
    | shared.ProjectSettings$Outbound;

/** @internal */
export const PatchProjectSettingsResponse$outboundSchema: z.ZodType<
    PatchProjectSettingsResponse$Outbound,
    z.ZodTypeDef,
    PatchProjectSettingsResponse
> = z.union([
    z.lazy(() => PatchProjectSettingsResponseBody$outboundSchema),
    z.lazy(() => PatchProjectSettingsProjectResponseBody$outboundSchema),
    shared.ProjectSettings$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchProjectSettingsResponse$ {
    /** @deprecated use `PatchProjectSettingsResponse$inboundSchema` instead. */
    export const inboundSchema = PatchProjectSettingsResponse$inboundSchema;
    /** @deprecated use `PatchProjectSettingsResponse$outboundSchema` instead. */
    export const outboundSchema = PatchProjectSettingsResponse$outboundSchema;
    /** @deprecated use `PatchProjectSettingsResponse$Outbound` instead. */
    export type Outbound = PatchProjectSettingsResponse$Outbound;
}
