/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetEnvVarRequest = {
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetEnvVarResponseBody = {
    message?: string | undefined;
};

/**
 * An environment variable is a map containing a value and an optional timestamp.
 */
export type GetEnvVarEnvironmentVariable = {
    /**
     * The creation timestamp of the environment variable.
     */
    createdAt?: any | undefined;
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * The value of the environment variable.
     */
    value: string;
};

export type GetEnvVarResponse = GetEnvVarResponseBody | GetEnvVarEnvironmentVariable;

/** @internal */
export const GetEnvVarRequest$inboundSchema: z.ZodType<GetEnvVarRequest, z.ZodTypeDef, unknown> = z
    .object({
        name: z.string(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetEnvVarRequest$Outbound = {
    name: string;
    "project-slug": string;
};

/** @internal */
export const GetEnvVarRequest$outboundSchema: z.ZodType<
    GetEnvVarRequest$Outbound,
    z.ZodTypeDef,
    GetEnvVarRequest
> = z
    .object({
        name: z.string(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnvVarRequest$ {
    /** @deprecated use `GetEnvVarRequest$inboundSchema` instead. */
    export const inboundSchema = GetEnvVarRequest$inboundSchema;
    /** @deprecated use `GetEnvVarRequest$outboundSchema` instead. */
    export const outboundSchema = GetEnvVarRequest$outboundSchema;
    /** @deprecated use `GetEnvVarRequest$Outbound` instead. */
    export type Outbound = GetEnvVarRequest$Outbound;
}

/** @internal */
export const GetEnvVarResponseBody$inboundSchema: z.ZodType<
    GetEnvVarResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetEnvVarResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetEnvVarResponseBody$outboundSchema: z.ZodType<
    GetEnvVarResponseBody$Outbound,
    z.ZodTypeDef,
    GetEnvVarResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnvVarResponseBody$ {
    /** @deprecated use `GetEnvVarResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetEnvVarResponseBody$inboundSchema;
    /** @deprecated use `GetEnvVarResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetEnvVarResponseBody$outboundSchema;
    /** @deprecated use `GetEnvVarResponseBody$Outbound` instead. */
    export type Outbound = GetEnvVarResponseBody$Outbound;
}

/** @internal */
export const GetEnvVarEnvironmentVariable$inboundSchema: z.ZodType<
    GetEnvVarEnvironmentVariable,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "created-at": z.any().optional(),
        name: z.string(),
        value: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
        });
    });

/** @internal */
export type GetEnvVarEnvironmentVariable$Outbound = {
    "created-at"?: any | undefined;
    name: string;
    value: string;
};

/** @internal */
export const GetEnvVarEnvironmentVariable$outboundSchema: z.ZodType<
    GetEnvVarEnvironmentVariable$Outbound,
    z.ZodTypeDef,
    GetEnvVarEnvironmentVariable
> = z
    .object({
        createdAt: z.any().optional(),
        name: z.string(),
        value: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnvVarEnvironmentVariable$ {
    /** @deprecated use `GetEnvVarEnvironmentVariable$inboundSchema` instead. */
    export const inboundSchema = GetEnvVarEnvironmentVariable$inboundSchema;
    /** @deprecated use `GetEnvVarEnvironmentVariable$outboundSchema` instead. */
    export const outboundSchema = GetEnvVarEnvironmentVariable$outboundSchema;
    /** @deprecated use `GetEnvVarEnvironmentVariable$Outbound` instead. */
    export type Outbound = GetEnvVarEnvironmentVariable$Outbound;
}

/** @internal */
export const GetEnvVarResponse$inboundSchema: z.ZodType<GetEnvVarResponse, z.ZodTypeDef, unknown> =
    z.union([
        z.lazy(() => GetEnvVarResponseBody$inboundSchema),
        z.lazy(() => GetEnvVarEnvironmentVariable$inboundSchema),
    ]);

/** @internal */
export type GetEnvVarResponse$Outbound =
    | GetEnvVarResponseBody$Outbound
    | GetEnvVarEnvironmentVariable$Outbound;

/** @internal */
export const GetEnvVarResponse$outboundSchema: z.ZodType<
    GetEnvVarResponse$Outbound,
    z.ZodTypeDef,
    GetEnvVarResponse
> = z.union([
    z.lazy(() => GetEnvVarResponseBody$outboundSchema),
    z.lazy(() => GetEnvVarEnvironmentVariable$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnvVarResponse$ {
    /** @deprecated use `GetEnvVarResponse$inboundSchema` instead. */
    export const inboundSchema = GetEnvVarResponse$inboundSchema;
    /** @deprecated use `GetEnvVarResponse$outboundSchema` instead. */
    export const outboundSchema = GetEnvVarResponse$outboundSchema;
    /** @deprecated use `GetEnvVarResponse$Outbound` instead. */
    export type Outbound = GetEnvVarResponse$Outbound;
}
