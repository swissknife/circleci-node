/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type TriggerPipelineParameters = number | string | boolean;

/**
 * The information you can supply when triggering a pipeline.
 */
export type TriggerPipelineTriggerPipelineParameters = {
    /**
     * The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
     */
    branch?: string | undefined;
    /**
     * An object containing pipeline parameters and their values. Pipeline parameters have the following size limits: 100 max entries, 128 maximum key length, 512 maximum value length.
     */
    parameters?: { [k: string]: number | string | boolean } | undefined;
    /**
     * The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
     */
    tag?: string | undefined;
};

export type TriggerPipelineRequest = {
    requestBody?: TriggerPipelineTriggerPipelineParameters | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type TriggerPipelineResponseBody = {
    message?: string | undefined;
};

/**
 * The current state of the pipeline.
 */
export const TriggerPipelineState = {
    Created: "created",
    Errored: "errored",
    SetupPending: "setup-pending",
    Setup: "setup",
    Pending: "pending",
} as const;
/**
 * The current state of the pipeline.
 */
export type TriggerPipelineState = ClosedEnum<typeof TriggerPipelineState>;

/**
 * A pipeline creation response.
 */
export type TriggerPipelinePipelineCreation = {
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * The unique ID of the pipeline.
     */
    id: string;
    /**
     * The number of the pipeline.
     */
    number: number;
    /**
     * The current state of the pipeline.
     */
    state: TriggerPipelineState;
};

export type TriggerPipelineResponse = TriggerPipelineResponseBody | TriggerPipelinePipelineCreation;

/** @internal */
export const TriggerPipelineParameters$inboundSchema: z.ZodType<
    TriggerPipelineParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type TriggerPipelineParameters$Outbound = number | string | boolean;

/** @internal */
export const TriggerPipelineParameters$outboundSchema: z.ZodType<
    TriggerPipelineParameters$Outbound,
    z.ZodTypeDef,
    TriggerPipelineParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelineParameters$ {
    /** @deprecated use `TriggerPipelineParameters$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelineParameters$inboundSchema;
    /** @deprecated use `TriggerPipelineParameters$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelineParameters$outboundSchema;
    /** @deprecated use `TriggerPipelineParameters$Outbound` instead. */
    export type Outbound = TriggerPipelineParameters$Outbound;
}

/** @internal */
export const TriggerPipelineTriggerPipelineParameters$inboundSchema: z.ZodType<
    TriggerPipelineTriggerPipelineParameters,
    z.ZodTypeDef,
    unknown
> = z.object({
    branch: z.string().optional(),
    parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])).optional(),
    tag: z.string().optional(),
});

/** @internal */
export type TriggerPipelineTriggerPipelineParameters$Outbound = {
    branch?: string | undefined;
    parameters?: { [k: string]: number | string | boolean } | undefined;
    tag?: string | undefined;
};

/** @internal */
export const TriggerPipelineTriggerPipelineParameters$outboundSchema: z.ZodType<
    TriggerPipelineTriggerPipelineParameters$Outbound,
    z.ZodTypeDef,
    TriggerPipelineTriggerPipelineParameters
> = z.object({
    branch: z.string().optional(),
    parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])).optional(),
    tag: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelineTriggerPipelineParameters$ {
    /** @deprecated use `TriggerPipelineTriggerPipelineParameters$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelineTriggerPipelineParameters$inboundSchema;
    /** @deprecated use `TriggerPipelineTriggerPipelineParameters$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelineTriggerPipelineParameters$outboundSchema;
    /** @deprecated use `TriggerPipelineTriggerPipelineParameters$Outbound` instead. */
    export type Outbound = TriggerPipelineTriggerPipelineParameters$Outbound;
}

/** @internal */
export const TriggerPipelineRequest$inboundSchema: z.ZodType<
    TriggerPipelineRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z
            .lazy(() => TriggerPipelineTriggerPipelineParameters$inboundSchema)
            .optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type TriggerPipelineRequest$Outbound = {
    RequestBody?: TriggerPipelineTriggerPipelineParameters$Outbound | undefined;
    "project-slug": string;
};

/** @internal */
export const TriggerPipelineRequest$outboundSchema: z.ZodType<
    TriggerPipelineRequest$Outbound,
    z.ZodTypeDef,
    TriggerPipelineRequest
> = z
    .object({
        requestBody: z
            .lazy(() => TriggerPipelineTriggerPipelineParameters$outboundSchema)
            .optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelineRequest$ {
    /** @deprecated use `TriggerPipelineRequest$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelineRequest$inboundSchema;
    /** @deprecated use `TriggerPipelineRequest$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelineRequest$outboundSchema;
    /** @deprecated use `TriggerPipelineRequest$Outbound` instead. */
    export type Outbound = TriggerPipelineRequest$Outbound;
}

/** @internal */
export const TriggerPipelineResponseBody$inboundSchema: z.ZodType<
    TriggerPipelineResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type TriggerPipelineResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const TriggerPipelineResponseBody$outboundSchema: z.ZodType<
    TriggerPipelineResponseBody$Outbound,
    z.ZodTypeDef,
    TriggerPipelineResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelineResponseBody$ {
    /** @deprecated use `TriggerPipelineResponseBody$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelineResponseBody$inboundSchema;
    /** @deprecated use `TriggerPipelineResponseBody$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelineResponseBody$outboundSchema;
    /** @deprecated use `TriggerPipelineResponseBody$Outbound` instead. */
    export type Outbound = TriggerPipelineResponseBody$Outbound;
}

/** @internal */
export const TriggerPipelineState$inboundSchema: z.ZodNativeEnum<typeof TriggerPipelineState> =
    z.nativeEnum(TriggerPipelineState);

/** @internal */
export const TriggerPipelineState$outboundSchema: z.ZodNativeEnum<typeof TriggerPipelineState> =
    TriggerPipelineState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelineState$ {
    /** @deprecated use `TriggerPipelineState$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelineState$inboundSchema;
    /** @deprecated use `TriggerPipelineState$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelineState$outboundSchema;
}

/** @internal */
export const TriggerPipelinePipelineCreation$inboundSchema: z.ZodType<
    TriggerPipelinePipelineCreation,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        id: z.string(),
        number: z.number().int(),
        state: TriggerPipelineState$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type TriggerPipelinePipelineCreation$Outbound = {
    created_at: string;
    id: string;
    number: number;
    state: string;
};

/** @internal */
export const TriggerPipelinePipelineCreation$outboundSchema: z.ZodType<
    TriggerPipelinePipelineCreation$Outbound,
    z.ZodTypeDef,
    TriggerPipelinePipelineCreation
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
        number: z.number().int(),
        state: TriggerPipelineState$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelinePipelineCreation$ {
    /** @deprecated use `TriggerPipelinePipelineCreation$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelinePipelineCreation$inboundSchema;
    /** @deprecated use `TriggerPipelinePipelineCreation$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelinePipelineCreation$outboundSchema;
    /** @deprecated use `TriggerPipelinePipelineCreation$Outbound` instead. */
    export type Outbound = TriggerPipelinePipelineCreation$Outbound;
}

/** @internal */
export const TriggerPipelineResponse$inboundSchema: z.ZodType<
    TriggerPipelineResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => TriggerPipelineResponseBody$inboundSchema),
    z.lazy(() => TriggerPipelinePipelineCreation$inboundSchema),
]);

/** @internal */
export type TriggerPipelineResponse$Outbound =
    | TriggerPipelineResponseBody$Outbound
    | TriggerPipelinePipelineCreation$Outbound;

/** @internal */
export const TriggerPipelineResponse$outboundSchema: z.ZodType<
    TriggerPipelineResponse$Outbound,
    z.ZodTypeDef,
    TriggerPipelineResponse
> = z.union([
    z.lazy(() => TriggerPipelineResponseBody$outboundSchema),
    z.lazy(() => TriggerPipelinePipelineCreation$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerPipelineResponse$ {
    /** @deprecated use `TriggerPipelineResponse$inboundSchema` instead. */
    export const inboundSchema = TriggerPipelineResponse$inboundSchema;
    /** @deprecated use `TriggerPipelineResponse$outboundSchema` instead. */
    export const outboundSchema = TriggerPipelineResponse$outboundSchema;
    /** @deprecated use `TriggerPipelineResponse$Outbound` instead. */
    export type Outbound = TriggerPipelineResponse$Outbound;
}
