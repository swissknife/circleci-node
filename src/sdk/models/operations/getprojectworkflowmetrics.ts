/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export const GetProjectWorkflowMetricsQueryParamReportingWindow = {
    Last7Days: "last-7-days",
    Last90Days: "last-90-days",
    Last24Hours: "last-24-hours",
    Last30Days: "last-30-days",
    Last60Days: "last-60-days",
} as const;
/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export type GetProjectWorkflowMetricsQueryParamReportingWindow = ClosedEnum<
    typeof GetProjectWorkflowMetricsQueryParamReportingWindow
>;

export type GetProjectWorkflowMetricsRequest = {
    /**
     * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
     */
    allBranches?: boolean | undefined;
    /**
     * The name of a vcs branch. If not passed we will scope the API call to the default branch.
     */
    branch?: string | undefined;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
     */
    reportingWindow?: GetProjectWorkflowMetricsQueryParamReportingWindow | undefined;
};

/**
 * Error response.
 */
export type GetProjectWorkflowMetricsInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Metrics relating to the duration of runs for a workflow.
 */
export type GetProjectWorkflowMetricsDurationMetrics = {
    /**
     * The max duration, in seconds, among a group of runs.
     */
    max: number;
    /**
     * The mean duration, in seconds, among a group of runs.
     */
    mean: number;
    /**
     * The median duration, in seconds, among a group of runs.
     */
    median: number;
    /**
     * The minimum duration, in seconds, among a group of runs.
     */
    min: number;
    /**
     * The 95th percentile duration, in seconds, among a group of runs.
     */
    p95: number;
    /**
     * The standard deviation, in seconds, among a group of runs.
     */
    standardDeviation: number;
};

/**
 * Metrics relating to a workflow's runs.
 */
export type GetProjectWorkflowMetricsMetrics = {
    /**
     * Metrics relating to the duration of runs for a workflow.
     */
    durationMetrics: GetProjectWorkflowMetricsDurationMetrics;
    /**
     * The number of failed runs.
     */
    failedRuns: number;
    /**
     * The mean time to recovery (mean time between failures and their next success) in seconds.
     */
    mttr: number;
    successRate: number;
    /**
     * The number of successful runs.
     */
    successfulRuns: number;
    /**
     * The average number of runs per day.
     */
    throughput: number;
    /**
     * The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
     */
    totalCreditsUsed: number;
    /**
     * The number of recovered workflow executions per day.
     */
    totalRecoveries: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

export type GetProjectWorkflowMetricsItems = {
    /**
     * Metrics relating to a workflow's runs.
     */
    metrics: GetProjectWorkflowMetricsMetrics;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * The unique ID of the project
     */
    projectId?: any | undefined;
    /**
     * The timestamp of the last build within the requested reporting window.
     */
    windowEnd: Date;
    /**
     * The timestamp of the first build within the requested reporting window.
     */
    windowStart: Date;
};

/**
 * Paginated workflow summary metrics.
 */
export type GetProjectWorkflowMetricsResponseBody = {
    /**
     * Workflow summary metrics.
     */
    items: Array<GetProjectWorkflowMetricsItems>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type GetProjectWorkflowMetricsResponse =
    | GetProjectWorkflowMetricsInsightsResponseBody
    | GetProjectWorkflowMetricsResponseBody;

/** @internal */
export const GetProjectWorkflowMetricsQueryParamReportingWindow$inboundSchema: z.ZodNativeEnum<
    typeof GetProjectWorkflowMetricsQueryParamReportingWindow
> = z.nativeEnum(GetProjectWorkflowMetricsQueryParamReportingWindow);

/** @internal */
export const GetProjectWorkflowMetricsQueryParamReportingWindow$outboundSchema: z.ZodNativeEnum<
    typeof GetProjectWorkflowMetricsQueryParamReportingWindow
> = GetProjectWorkflowMetricsQueryParamReportingWindow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsQueryParamReportingWindow$ {
    /** @deprecated use `GetProjectWorkflowMetricsQueryParamReportingWindow$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsQueryParamReportingWindow$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsQueryParamReportingWindow$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsQueryParamReportingWindow$outboundSchema;
}

/** @internal */
export const GetProjectWorkflowMetricsRequest$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "all-branches": z.boolean().optional(),
        branch: z.string().optional(),
        "page-token": z.string().optional(),
        "project-slug": z.string(),
        "reporting-window":
            GetProjectWorkflowMetricsQueryParamReportingWindow$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "all-branches": "allBranches",
            "page-token": "pageToken",
            "project-slug": "projectSlug",
            "reporting-window": "reportingWindow",
        });
    });

/** @internal */
export type GetProjectWorkflowMetricsRequest$Outbound = {
    "all-branches"?: boolean | undefined;
    branch?: string | undefined;
    "page-token"?: string | undefined;
    "project-slug": string;
    "reporting-window"?: string | undefined;
};

/** @internal */
export const GetProjectWorkflowMetricsRequest$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsRequest$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsRequest
> = z
    .object({
        allBranches: z.boolean().optional(),
        branch: z.string().optional(),
        pageToken: z.string().optional(),
        projectSlug: z.string(),
        reportingWindow:
            GetProjectWorkflowMetricsQueryParamReportingWindow$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            allBranches: "all-branches",
            pageToken: "page-token",
            projectSlug: "project-slug",
            reportingWindow: "reporting-window",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsRequest$ {
    /** @deprecated use `GetProjectWorkflowMetricsRequest$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsRequest$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsRequest$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsRequest$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsRequest$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsRequest$Outbound;
}

/** @internal */
export const GetProjectWorkflowMetricsInsightsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetProjectWorkflowMetricsInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetProjectWorkflowMetricsInsightsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsInsightsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowMetricsInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsInsightsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowMetricsDurationMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsDurationMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        max: z.number().int(),
        mean: z.number().int(),
        median: z.number().int(),
        min: z.number().int(),
        p95: z.number().int(),
        standard_deviation: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            standard_deviation: "standardDeviation",
        });
    });

/** @internal */
export type GetProjectWorkflowMetricsDurationMetrics$Outbound = {
    max: number;
    mean: number;
    median: number;
    min: number;
    p95: number;
    standard_deviation: number;
};

/** @internal */
export const GetProjectWorkflowMetricsDurationMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsDurationMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsDurationMetrics
> = z
    .object({
        max: z.number().int(),
        mean: z.number().int(),
        median: z.number().int(),
        min: z.number().int(),
        p95: z.number().int(),
        standardDeviation: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            standardDeviation: "standard_deviation",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsDurationMetrics$ {
    /** @deprecated use `GetProjectWorkflowMetricsDurationMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsDurationMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsDurationMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsDurationMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsDurationMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsDurationMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowMetricsMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        duration_metrics: z.lazy(() => GetProjectWorkflowMetricsDurationMetrics$inboundSchema),
        failed_runs: z.number().int(),
        mttr: z.number().int(),
        success_rate: z.number(),
        successful_runs: z.number().int(),
        throughput: z.number(),
        total_credits_used: z.number().int(),
        total_recoveries: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            duration_metrics: "durationMetrics",
            failed_runs: "failedRuns",
            success_rate: "successRate",
            successful_runs: "successfulRuns",
            total_credits_used: "totalCreditsUsed",
            total_recoveries: "totalRecoveries",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowMetricsMetrics$Outbound = {
    duration_metrics: GetProjectWorkflowMetricsDurationMetrics$Outbound;
    failed_runs: number;
    mttr: number;
    success_rate: number;
    successful_runs: number;
    throughput: number;
    total_credits_used: number;
    total_recoveries: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowMetricsMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsMetrics
> = z
    .object({
        durationMetrics: z.lazy(() => GetProjectWorkflowMetricsDurationMetrics$outboundSchema),
        failedRuns: z.number().int(),
        mttr: z.number().int(),
        successRate: z.number(),
        successfulRuns: z.number().int(),
        throughput: z.number(),
        totalCreditsUsed: z.number().int(),
        totalRecoveries: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            durationMetrics: "duration_metrics",
            failedRuns: "failed_runs",
            successRate: "success_rate",
            successfulRuns: "successful_runs",
            totalCreditsUsed: "total_credits_used",
            totalRecoveries: "total_recoveries",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsMetrics$ {
    /** @deprecated use `GetProjectWorkflowMetricsMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowMetricsItems$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsItems,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        metrics: z.lazy(() => GetProjectWorkflowMetricsMetrics$inboundSchema),
        name: z.string(),
        project_id: z.any().optional(),
        window_end: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        window_start: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            project_id: "projectId",
            window_end: "windowEnd",
            window_start: "windowStart",
        });
    });

/** @internal */
export type GetProjectWorkflowMetricsItems$Outbound = {
    metrics: GetProjectWorkflowMetricsMetrics$Outbound;
    name: string;
    project_id?: any | undefined;
    window_end: string;
    window_start: string;
};

/** @internal */
export const GetProjectWorkflowMetricsItems$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsItems$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsItems
> = z
    .object({
        metrics: z.lazy(() => GetProjectWorkflowMetricsMetrics$outboundSchema),
        name: z.string(),
        projectId: z.any().optional(),
        windowEnd: z.date().transform((v) => v.toISOString()),
        windowStart: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            projectId: "project_id",
            windowEnd: "window_end",
            windowStart: "window_start",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsItems$ {
    /** @deprecated use `GetProjectWorkflowMetricsItems$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsItems$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsItems$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsItems$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsItems$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsItems$Outbound;
}

/** @internal */
export const GetProjectWorkflowMetricsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => GetProjectWorkflowMetricsItems$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type GetProjectWorkflowMetricsResponseBody$Outbound = {
    items: Array<GetProjectWorkflowMetricsItems$Outbound>;
    next_page_token: string;
};

/** @internal */
export const GetProjectWorkflowMetricsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => GetProjectWorkflowMetricsItems$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowMetricsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowMetricsResponse$inboundSchema: z.ZodType<
    GetProjectWorkflowMetricsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetProjectWorkflowMetricsInsightsResponseBody$inboundSchema),
    z.lazy(() => GetProjectWorkflowMetricsResponseBody$inboundSchema),
]);

/** @internal */
export type GetProjectWorkflowMetricsResponse$Outbound =
    | GetProjectWorkflowMetricsInsightsResponseBody$Outbound
    | GetProjectWorkflowMetricsResponseBody$Outbound;

/** @internal */
export const GetProjectWorkflowMetricsResponse$outboundSchema: z.ZodType<
    GetProjectWorkflowMetricsResponse$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowMetricsResponse
> = z.union([
    z.lazy(() => GetProjectWorkflowMetricsInsightsResponseBody$outboundSchema),
    z.lazy(() => GetProjectWorkflowMetricsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowMetricsResponse$ {
    /** @deprecated use `GetProjectWorkflowMetricsResponse$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowMetricsResponse$inboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsResponse$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowMetricsResponse$outboundSchema;
    /** @deprecated use `GetProjectWorkflowMetricsResponse$Outbound` instead. */
    export type Outbound = GetProjectWorkflowMetricsResponse$Outbound;
}
