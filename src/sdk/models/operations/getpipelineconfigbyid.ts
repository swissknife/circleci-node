/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetPipelineConfigByIdRequest = {
    /**
     * The unique ID of the pipeline.
     */
    pipelineId: string;
};

/**
 * Error response.
 */
export type GetPipelineConfigByIdResponseBody = {
    message?: string | undefined;
};

/**
 * The configuration strings for the pipeline.
 */
export type GetPipelineConfigByIdPipelineConfig = {
    /**
     * The compiled configuration for the pipeline, after all orb expansion has been performed. If there were errors processing the pipeline's configuration, then this field may be empty.
     */
    compiled: string;
    /**
     * The compiled setup configuration for the pipeline, after all orb expansion has been performed. If there were errors processing the pipeline's setup workflows, then this field may be empty.
     */
    compiledSetupConfig?: string | undefined;
    /**
     * The setup configuration for the pipeline used for Setup Workflows. If there were errors processing the pipeline's configuration or if setup workflows are not enabled, then this field should not exist
     */
    setupConfig?: string | undefined;
    /**
     * The source configuration for the pipeline, before any config compilation has been performed. If there is no config, then this field will be empty.
     */
    source: string;
};

export type GetPipelineConfigByIdResponse =
    | GetPipelineConfigByIdResponseBody
    | GetPipelineConfigByIdPipelineConfig;

/** @internal */
export const GetPipelineConfigByIdRequest$inboundSchema: z.ZodType<
    GetPipelineConfigByIdRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "pipeline-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "pipeline-id": "pipelineId",
        });
    });

/** @internal */
export type GetPipelineConfigByIdRequest$Outbound = {
    "pipeline-id": string;
};

/** @internal */
export const GetPipelineConfigByIdRequest$outboundSchema: z.ZodType<
    GetPipelineConfigByIdRequest$Outbound,
    z.ZodTypeDef,
    GetPipelineConfigByIdRequest
> = z
    .object({
        pipelineId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pipelineId: "pipeline-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineConfigByIdRequest$ {
    /** @deprecated use `GetPipelineConfigByIdRequest$inboundSchema` instead. */
    export const inboundSchema = GetPipelineConfigByIdRequest$inboundSchema;
    /** @deprecated use `GetPipelineConfigByIdRequest$outboundSchema` instead. */
    export const outboundSchema = GetPipelineConfigByIdRequest$outboundSchema;
    /** @deprecated use `GetPipelineConfigByIdRequest$Outbound` instead. */
    export type Outbound = GetPipelineConfigByIdRequest$Outbound;
}

/** @internal */
export const GetPipelineConfigByIdResponseBody$inboundSchema: z.ZodType<
    GetPipelineConfigByIdResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetPipelineConfigByIdResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetPipelineConfigByIdResponseBody$outboundSchema: z.ZodType<
    GetPipelineConfigByIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetPipelineConfigByIdResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineConfigByIdResponseBody$ {
    /** @deprecated use `GetPipelineConfigByIdResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetPipelineConfigByIdResponseBody$inboundSchema;
    /** @deprecated use `GetPipelineConfigByIdResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetPipelineConfigByIdResponseBody$outboundSchema;
    /** @deprecated use `GetPipelineConfigByIdResponseBody$Outbound` instead. */
    export type Outbound = GetPipelineConfigByIdResponseBody$Outbound;
}

/** @internal */
export const GetPipelineConfigByIdPipelineConfig$inboundSchema: z.ZodType<
    GetPipelineConfigByIdPipelineConfig,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        compiled: z.string(),
        "compiled-setup-config": z.string().optional(),
        "setup-config": z.string().optional(),
        source: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "compiled-setup-config": "compiledSetupConfig",
            "setup-config": "setupConfig",
        });
    });

/** @internal */
export type GetPipelineConfigByIdPipelineConfig$Outbound = {
    compiled: string;
    "compiled-setup-config"?: string | undefined;
    "setup-config"?: string | undefined;
    source: string;
};

/** @internal */
export const GetPipelineConfigByIdPipelineConfig$outboundSchema: z.ZodType<
    GetPipelineConfigByIdPipelineConfig$Outbound,
    z.ZodTypeDef,
    GetPipelineConfigByIdPipelineConfig
> = z
    .object({
        compiled: z.string(),
        compiledSetupConfig: z.string().optional(),
        setupConfig: z.string().optional(),
        source: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            compiledSetupConfig: "compiled-setup-config",
            setupConfig: "setup-config",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineConfigByIdPipelineConfig$ {
    /** @deprecated use `GetPipelineConfigByIdPipelineConfig$inboundSchema` instead. */
    export const inboundSchema = GetPipelineConfigByIdPipelineConfig$inboundSchema;
    /** @deprecated use `GetPipelineConfigByIdPipelineConfig$outboundSchema` instead. */
    export const outboundSchema = GetPipelineConfigByIdPipelineConfig$outboundSchema;
    /** @deprecated use `GetPipelineConfigByIdPipelineConfig$Outbound` instead. */
    export type Outbound = GetPipelineConfigByIdPipelineConfig$Outbound;
}

/** @internal */
export const GetPipelineConfigByIdResponse$inboundSchema: z.ZodType<
    GetPipelineConfigByIdResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetPipelineConfigByIdResponseBody$inboundSchema),
    z.lazy(() => GetPipelineConfigByIdPipelineConfig$inboundSchema),
]);

/** @internal */
export type GetPipelineConfigByIdResponse$Outbound =
    | GetPipelineConfigByIdResponseBody$Outbound
    | GetPipelineConfigByIdPipelineConfig$Outbound;

/** @internal */
export const GetPipelineConfigByIdResponse$outboundSchema: z.ZodType<
    GetPipelineConfigByIdResponse$Outbound,
    z.ZodTypeDef,
    GetPipelineConfigByIdResponse
> = z.union([
    z.lazy(() => GetPipelineConfigByIdResponseBody$outboundSchema),
    z.lazy(() => GetPipelineConfigByIdPipelineConfig$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineConfigByIdResponse$ {
    /** @deprecated use `GetPipelineConfigByIdResponse$inboundSchema` instead. */
    export const inboundSchema = GetPipelineConfigByIdResponse$inboundSchema;
    /** @deprecated use `GetPipelineConfigByIdResponse$outboundSchema` instead. */
    export const outboundSchema = GetPipelineConfigByIdResponse$outboundSchema;
    /** @deprecated use `GetPipelineConfigByIdResponse$Outbound` instead. */
    export type Outbound = GetPipelineConfigByIdResponse$Outbound;
}
