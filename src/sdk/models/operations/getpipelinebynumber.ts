/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetPipelineByNumberRequest = {
    /**
     * The number of the pipeline.
     */
    pipelineNumber?: any | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetPipelineByNumberResponseBody = {
    message?: string | undefined;
};

/**
 * The type of error.
 */
export const GetPipelineByNumberType = {
    Config: "config",
    ConfigFetch: "config-fetch",
    Timeout: "timeout",
    Permission: "permission",
    Other: "other",
    TriggerRule: "trigger-rule",
    Plan: "plan",
} as const;
/**
 * The type of error.
 */
export type GetPipelineByNumberType = ClosedEnum<typeof GetPipelineByNumberType>;

/**
 * An error with a type and message.
 */
export type GetPipelineByNumberErrors = {
    /**
     * A human-readable error message.
     */
    message: string;
    /**
     * The type of error.
     */
    type: GetPipelineByNumberType;
};

/**
 * The current state of the pipeline.
 */
export const GetPipelineByNumberState = {
    Created: "created",
    Errored: "errored",
    SetupPending: "setup-pending",
    Setup: "setup",
    Pending: "pending",
} as const;
/**
 * The current state of the pipeline.
 */
export type GetPipelineByNumberState = ClosedEnum<typeof GetPipelineByNumberState>;

/**
 * The user who triggered the Pipeline.
 */
export type GetPipelineByNumberActor = {
    /**
     * URL to the user's avatar on the VCS
     */
    avatarUrl: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
};

/**
 * The type of trigger.
 */
export const GetPipelineByNumberPipelineType = {
    ScheduledPipeline: "scheduled_pipeline",
    Explicit: "explicit",
    Api: "api",
    Webhook: "webhook",
} as const;
/**
 * The type of trigger.
 */
export type GetPipelineByNumberPipelineType = ClosedEnum<typeof GetPipelineByNumberPipelineType>;

/**
 * A summary of the trigger.
 */
export type GetPipelineByNumberTrigger = {
    /**
     * The user who triggered the Pipeline.
     */
    actor: GetPipelineByNumberActor;
    /**
     * The date and time the trigger was received.
     */
    receivedAt: Date;
    /**
     * The type of trigger.
     */
    type: GetPipelineByNumberPipelineType;
};

export type GetPipelineByNumber4 = {};

export type GetPipelineByNumberTriggerParameters = GetPipelineByNumber4 | string | number | boolean;

/**
 * The latest commit in the pipeline.
 */
export type GetPipelineByNumberCommit = {
    /**
     * The body of the commit message.
     */
    body: string;
    /**
     * The subject of the commit message.
     */
    subject: string;
};

/**
 * VCS information for the pipeline.
 */
export type GetPipelineByNumberVcs = {
    /**
     * The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
     */
    branch?: string | undefined;
    /**
     * The latest commit in the pipeline.
     */
    commit?: GetPipelineByNumberCommit | undefined;
    /**
     * URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
     */
    originRepositoryUrl: string;
    /**
     * Name of the VCS provider (e.g. GitHub, Bitbucket).
     */
    providerName: string;
    /**
     * The code review id.
     */
    reviewId?: string | undefined;
    /**
     * The code review URL.
     */
    reviewUrl?: string | undefined;
    /**
     * The code revision the pipeline ran.
     */
    revision: string;
    /**
     * The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
     */
    tag?: string | undefined;
    /**
     * URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
     */
    targetRepositoryUrl: string;
};

/**
 * A pipeline response.
 */
export type GetPipelineByNumberPipeline = {
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * A sequence of errors that have occurred within the pipeline.
     */
    errors: Array<GetPipelineByNumberErrors>;
    /**
     * The unique ID of the pipeline.
     */
    id: string;
    /**
     * The number of the pipeline.
     */
    number: number;
    /**
     * The project-slug for the pipeline.
     */
    projectSlug: string;
    /**
     * The current state of the pipeline.
     */
    state: GetPipelineByNumberState;
    /**
     * A summary of the trigger.
     */
    trigger: GetPipelineByNumberTrigger;
    triggerParameters?:
        | { [k: string]: GetPipelineByNumber4 | string | number | boolean }
        | undefined;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * VCS information for the pipeline.
     */
    vcs?: GetPipelineByNumberVcs | undefined;
};

export type GetPipelineByNumberResponse =
    | GetPipelineByNumberResponseBody
    | GetPipelineByNumberPipeline;

/** @internal */
export const GetPipelineByNumberRequest$inboundSchema: z.ZodType<
    GetPipelineByNumberRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "pipeline-number": z.any().optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "pipeline-number": "pipelineNumber",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetPipelineByNumberRequest$Outbound = {
    "pipeline-number"?: any | undefined;
    "project-slug": string;
};

/** @internal */
export const GetPipelineByNumberRequest$outboundSchema: z.ZodType<
    GetPipelineByNumberRequest$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberRequest
> = z
    .object({
        pipelineNumber: z.any().optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pipelineNumber: "pipeline-number",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberRequest$ {
    /** @deprecated use `GetPipelineByNumberRequest$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberRequest$inboundSchema;
    /** @deprecated use `GetPipelineByNumberRequest$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberRequest$outboundSchema;
    /** @deprecated use `GetPipelineByNumberRequest$Outbound` instead. */
    export type Outbound = GetPipelineByNumberRequest$Outbound;
}

/** @internal */
export const GetPipelineByNumberResponseBody$inboundSchema: z.ZodType<
    GetPipelineByNumberResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetPipelineByNumberResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetPipelineByNumberResponseBody$outboundSchema: z.ZodType<
    GetPipelineByNumberResponseBody$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberResponseBody$ {
    /** @deprecated use `GetPipelineByNumberResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberResponseBody$inboundSchema;
    /** @deprecated use `GetPipelineByNumberResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberResponseBody$outboundSchema;
    /** @deprecated use `GetPipelineByNumberResponseBody$Outbound` instead. */
    export type Outbound = GetPipelineByNumberResponseBody$Outbound;
}

/** @internal */
export const GetPipelineByNumberType$inboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByNumberType
> = z.nativeEnum(GetPipelineByNumberType);

/** @internal */
export const GetPipelineByNumberType$outboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByNumberType
> = GetPipelineByNumberType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberType$ {
    /** @deprecated use `GetPipelineByNumberType$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberType$inboundSchema;
    /** @deprecated use `GetPipelineByNumberType$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberType$outboundSchema;
}

/** @internal */
export const GetPipelineByNumberErrors$inboundSchema: z.ZodType<
    GetPipelineByNumberErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
    type: GetPipelineByNumberType$inboundSchema,
});

/** @internal */
export type GetPipelineByNumberErrors$Outbound = {
    message: string;
    type: string;
};

/** @internal */
export const GetPipelineByNumberErrors$outboundSchema: z.ZodType<
    GetPipelineByNumberErrors$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberErrors
> = z.object({
    message: z.string(),
    type: GetPipelineByNumberType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberErrors$ {
    /** @deprecated use `GetPipelineByNumberErrors$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberErrors$inboundSchema;
    /** @deprecated use `GetPipelineByNumberErrors$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberErrors$outboundSchema;
    /** @deprecated use `GetPipelineByNumberErrors$Outbound` instead. */
    export type Outbound = GetPipelineByNumberErrors$Outbound;
}

/** @internal */
export const GetPipelineByNumberState$inboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByNumberState
> = z.nativeEnum(GetPipelineByNumberState);

/** @internal */
export const GetPipelineByNumberState$outboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByNumberState
> = GetPipelineByNumberState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberState$ {
    /** @deprecated use `GetPipelineByNumberState$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberState$inboundSchema;
    /** @deprecated use `GetPipelineByNumberState$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberState$outboundSchema;
}

/** @internal */
export const GetPipelineByNumberActor$inboundSchema: z.ZodType<
    GetPipelineByNumberActor,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        avatar_url: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatar_url: "avatarUrl",
        });
    });

/** @internal */
export type GetPipelineByNumberActor$Outbound = {
    avatar_url: string;
    login: string;
};

/** @internal */
export const GetPipelineByNumberActor$outboundSchema: z.ZodType<
    GetPipelineByNumberActor$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberActor
> = z
    .object({
        avatarUrl: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatarUrl: "avatar_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberActor$ {
    /** @deprecated use `GetPipelineByNumberActor$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberActor$inboundSchema;
    /** @deprecated use `GetPipelineByNumberActor$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberActor$outboundSchema;
    /** @deprecated use `GetPipelineByNumberActor$Outbound` instead. */
    export type Outbound = GetPipelineByNumberActor$Outbound;
}

/** @internal */
export const GetPipelineByNumberPipelineType$inboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByNumberPipelineType
> = z.nativeEnum(GetPipelineByNumberPipelineType);

/** @internal */
export const GetPipelineByNumberPipelineType$outboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByNumberPipelineType
> = GetPipelineByNumberPipelineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberPipelineType$ {
    /** @deprecated use `GetPipelineByNumberPipelineType$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberPipelineType$inboundSchema;
    /** @deprecated use `GetPipelineByNumberPipelineType$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberPipelineType$outboundSchema;
}

/** @internal */
export const GetPipelineByNumberTrigger$inboundSchema: z.ZodType<
    GetPipelineByNumberTrigger,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        actor: z.lazy(() => GetPipelineByNumberActor$inboundSchema),
        received_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        type: GetPipelineByNumberPipelineType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            received_at: "receivedAt",
        });
    });

/** @internal */
export type GetPipelineByNumberTrigger$Outbound = {
    actor: GetPipelineByNumberActor$Outbound;
    received_at: string;
    type: string;
};

/** @internal */
export const GetPipelineByNumberTrigger$outboundSchema: z.ZodType<
    GetPipelineByNumberTrigger$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberTrigger
> = z
    .object({
        actor: z.lazy(() => GetPipelineByNumberActor$outboundSchema),
        receivedAt: z.date().transform((v) => v.toISOString()),
        type: GetPipelineByNumberPipelineType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            receivedAt: "received_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberTrigger$ {
    /** @deprecated use `GetPipelineByNumberTrigger$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberTrigger$inboundSchema;
    /** @deprecated use `GetPipelineByNumberTrigger$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberTrigger$outboundSchema;
    /** @deprecated use `GetPipelineByNumberTrigger$Outbound` instead. */
    export type Outbound = GetPipelineByNumberTrigger$Outbound;
}

/** @internal */
export const GetPipelineByNumber4$inboundSchema: z.ZodType<
    GetPipelineByNumber4,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type GetPipelineByNumber4$Outbound = {};

/** @internal */
export const GetPipelineByNumber4$outboundSchema: z.ZodType<
    GetPipelineByNumber4$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumber4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumber4$ {
    /** @deprecated use `GetPipelineByNumber4$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumber4$inboundSchema;
    /** @deprecated use `GetPipelineByNumber4$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumber4$outboundSchema;
    /** @deprecated use `GetPipelineByNumber4$Outbound` instead. */
    export type Outbound = GetPipelineByNumber4$Outbound;
}

/** @internal */
export const GetPipelineByNumberTriggerParameters$inboundSchema: z.ZodType<
    GetPipelineByNumberTriggerParameters,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetPipelineByNumber4$inboundSchema),
    z.string(),
    z.number().int(),
    z.boolean(),
]);

/** @internal */
export type GetPipelineByNumberTriggerParameters$Outbound =
    | GetPipelineByNumber4$Outbound
    | string
    | number
    | boolean;

/** @internal */
export const GetPipelineByNumberTriggerParameters$outboundSchema: z.ZodType<
    GetPipelineByNumberTriggerParameters$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberTriggerParameters
> = z.union([
    z.lazy(() => GetPipelineByNumber4$outboundSchema),
    z.string(),
    z.number().int(),
    z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberTriggerParameters$ {
    /** @deprecated use `GetPipelineByNumberTriggerParameters$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberTriggerParameters$inboundSchema;
    /** @deprecated use `GetPipelineByNumberTriggerParameters$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberTriggerParameters$outboundSchema;
    /** @deprecated use `GetPipelineByNumberTriggerParameters$Outbound` instead. */
    export type Outbound = GetPipelineByNumberTriggerParameters$Outbound;
}

/** @internal */
export const GetPipelineByNumberCommit$inboundSchema: z.ZodType<
    GetPipelineByNumberCommit,
    z.ZodTypeDef,
    unknown
> = z.object({
    body: z.string(),
    subject: z.string(),
});

/** @internal */
export type GetPipelineByNumberCommit$Outbound = {
    body: string;
    subject: string;
};

/** @internal */
export const GetPipelineByNumberCommit$outboundSchema: z.ZodType<
    GetPipelineByNumberCommit$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberCommit
> = z.object({
    body: z.string(),
    subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberCommit$ {
    /** @deprecated use `GetPipelineByNumberCommit$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberCommit$inboundSchema;
    /** @deprecated use `GetPipelineByNumberCommit$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberCommit$outboundSchema;
    /** @deprecated use `GetPipelineByNumberCommit$Outbound` instead. */
    export type Outbound = GetPipelineByNumberCommit$Outbound;
}

/** @internal */
export const GetPipelineByNumberVcs$inboundSchema: z.ZodType<
    GetPipelineByNumberVcs,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => GetPipelineByNumberCommit$inboundSchema).optional(),
        origin_repository_url: z.string(),
        provider_name: z.string(),
        review_id: z.string().optional(),
        review_url: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        target_repository_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            origin_repository_url: "originRepositoryUrl",
            provider_name: "providerName",
            review_id: "reviewId",
            review_url: "reviewUrl",
            target_repository_url: "targetRepositoryUrl",
        });
    });

/** @internal */
export type GetPipelineByNumberVcs$Outbound = {
    branch?: string | undefined;
    commit?: GetPipelineByNumberCommit$Outbound | undefined;
    origin_repository_url: string;
    provider_name: string;
    review_id?: string | undefined;
    review_url?: string | undefined;
    revision: string;
    tag?: string | undefined;
    target_repository_url: string;
};

/** @internal */
export const GetPipelineByNumberVcs$outboundSchema: z.ZodType<
    GetPipelineByNumberVcs$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberVcs
> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => GetPipelineByNumberCommit$outboundSchema).optional(),
        originRepositoryUrl: z.string(),
        providerName: z.string(),
        reviewId: z.string().optional(),
        reviewUrl: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        targetRepositoryUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            originRepositoryUrl: "origin_repository_url",
            providerName: "provider_name",
            reviewId: "review_id",
            reviewUrl: "review_url",
            targetRepositoryUrl: "target_repository_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberVcs$ {
    /** @deprecated use `GetPipelineByNumberVcs$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberVcs$inboundSchema;
    /** @deprecated use `GetPipelineByNumberVcs$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberVcs$outboundSchema;
    /** @deprecated use `GetPipelineByNumberVcs$Outbound` instead. */
    export type Outbound = GetPipelineByNumberVcs$Outbound;
}

/** @internal */
export const GetPipelineByNumberPipeline$inboundSchema: z.ZodType<
    GetPipelineByNumberPipeline,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        errors: z.array(z.lazy(() => GetPipelineByNumberErrors$inboundSchema)),
        id: z.string(),
        number: z.number().int(),
        project_slug: z.string(),
        state: GetPipelineByNumberState$inboundSchema,
        trigger: z.lazy(() => GetPipelineByNumberTrigger$inboundSchema),
        trigger_parameters: z
            .record(
                z.union([
                    z.lazy(() => GetPipelineByNumber4$inboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        vcs: z.lazy(() => GetPipelineByNumberVcs$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            project_slug: "projectSlug",
            trigger_parameters: "triggerParameters",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type GetPipelineByNumberPipeline$Outbound = {
    created_at: string;
    errors: Array<GetPipelineByNumberErrors$Outbound>;
    id: string;
    number: number;
    project_slug: string;
    state: string;
    trigger: GetPipelineByNumberTrigger$Outbound;
    trigger_parameters?:
        | { [k: string]: GetPipelineByNumber4$Outbound | string | number | boolean }
        | undefined;
    updated_at?: string | undefined;
    vcs?: GetPipelineByNumberVcs$Outbound | undefined;
};

/** @internal */
export const GetPipelineByNumberPipeline$outboundSchema: z.ZodType<
    GetPipelineByNumberPipeline$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberPipeline
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        errors: z.array(z.lazy(() => GetPipelineByNumberErrors$outboundSchema)),
        id: z.string(),
        number: z.number().int(),
        projectSlug: z.string(),
        state: GetPipelineByNumberState$outboundSchema,
        trigger: z.lazy(() => GetPipelineByNumberTrigger$outboundSchema),
        triggerParameters: z
            .record(
                z.union([
                    z.lazy(() => GetPipelineByNumber4$outboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        vcs: z.lazy(() => GetPipelineByNumberVcs$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            projectSlug: "project_slug",
            triggerParameters: "trigger_parameters",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberPipeline$ {
    /** @deprecated use `GetPipelineByNumberPipeline$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberPipeline$inboundSchema;
    /** @deprecated use `GetPipelineByNumberPipeline$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberPipeline$outboundSchema;
    /** @deprecated use `GetPipelineByNumberPipeline$Outbound` instead. */
    export type Outbound = GetPipelineByNumberPipeline$Outbound;
}

/** @internal */
export const GetPipelineByNumberResponse$inboundSchema: z.ZodType<
    GetPipelineByNumberResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetPipelineByNumberResponseBody$inboundSchema),
    z.lazy(() => GetPipelineByNumberPipeline$inboundSchema),
]);

/** @internal */
export type GetPipelineByNumberResponse$Outbound =
    | GetPipelineByNumberResponseBody$Outbound
    | GetPipelineByNumberPipeline$Outbound;

/** @internal */
export const GetPipelineByNumberResponse$outboundSchema: z.ZodType<
    GetPipelineByNumberResponse$Outbound,
    z.ZodTypeDef,
    GetPipelineByNumberResponse
> = z.union([
    z.lazy(() => GetPipelineByNumberResponseBody$outboundSchema),
    z.lazy(() => GetPipelineByNumberPipeline$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByNumberResponse$ {
    /** @deprecated use `GetPipelineByNumberResponse$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByNumberResponse$inboundSchema;
    /** @deprecated use `GetPipelineByNumberResponse$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByNumberResponse$outboundSchema;
    /** @deprecated use `GetPipelineByNumberResponse$Outbound` instead. */
    export type Outbound = GetPipelineByNumberResponse$Outbound;
}
