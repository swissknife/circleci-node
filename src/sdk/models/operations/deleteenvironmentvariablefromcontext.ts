/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteEnvironmentVariableFromContextRequest = {
    /**
     * ID of the context (UUID)
     */
    contextId: string;
    /**
     * The name of the environment variable
     */
    envVarName: string;
};

/**
 * Error response.
 */
export type DeleteEnvironmentVariableFromContextResponseBody = {
    message?: string | undefined;
};

/**
 * message response
 */
export type DeleteEnvironmentVariableFromContextMessageResponse = {
    /**
     * A human-readable message
     */
    message: string;
};

export type DeleteEnvironmentVariableFromContextResponse =
    | DeleteEnvironmentVariableFromContextMessageResponse
    | DeleteEnvironmentVariableFromContextResponseBody;

/** @internal */
export const DeleteEnvironmentVariableFromContextRequest$inboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "context-id": z.string(),
        "env-var-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "context-id": "contextId",
            "env-var-name": "envVarName",
        });
    });

/** @internal */
export type DeleteEnvironmentVariableFromContextRequest$Outbound = {
    "context-id": string;
    "env-var-name": string;
};

/** @internal */
export const DeleteEnvironmentVariableFromContextRequest$outboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextRequest$Outbound,
    z.ZodTypeDef,
    DeleteEnvironmentVariableFromContextRequest
> = z
    .object({
        contextId: z.string(),
        envVarName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            contextId: "context-id",
            envVarName: "env-var-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvironmentVariableFromContextRequest$ {
    /** @deprecated use `DeleteEnvironmentVariableFromContextRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvironmentVariableFromContextRequest$inboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvironmentVariableFromContextRequest$outboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextRequest$Outbound` instead. */
    export type Outbound = DeleteEnvironmentVariableFromContextRequest$Outbound;
}

/** @internal */
export const DeleteEnvironmentVariableFromContextResponseBody$inboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type DeleteEnvironmentVariableFromContextResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const DeleteEnvironmentVariableFromContextResponseBody$outboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextResponseBody$Outbound,
    z.ZodTypeDef,
    DeleteEnvironmentVariableFromContextResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvironmentVariableFromContextResponseBody$ {
    /** @deprecated use `DeleteEnvironmentVariableFromContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvironmentVariableFromContextResponseBody$inboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvironmentVariableFromContextResponseBody$outboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextResponseBody$Outbound` instead. */
    export type Outbound = DeleteEnvironmentVariableFromContextResponseBody$Outbound;
}

/** @internal */
export const DeleteEnvironmentVariableFromContextMessageResponse$inboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextMessageResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
});

/** @internal */
export type DeleteEnvironmentVariableFromContextMessageResponse$Outbound = {
    message: string;
};

/** @internal */
export const DeleteEnvironmentVariableFromContextMessageResponse$outboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextMessageResponse$Outbound,
    z.ZodTypeDef,
    DeleteEnvironmentVariableFromContextMessageResponse
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvironmentVariableFromContextMessageResponse$ {
    /** @deprecated use `DeleteEnvironmentVariableFromContextMessageResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvironmentVariableFromContextMessageResponse$inboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextMessageResponse$outboundSchema` instead. */
    export const outboundSchema =
        DeleteEnvironmentVariableFromContextMessageResponse$outboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextMessageResponse$Outbound` instead. */
    export type Outbound = DeleteEnvironmentVariableFromContextMessageResponse$Outbound;
}

/** @internal */
export const DeleteEnvironmentVariableFromContextResponse$inboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => DeleteEnvironmentVariableFromContextMessageResponse$inboundSchema),
    z.lazy(() => DeleteEnvironmentVariableFromContextResponseBody$inboundSchema),
]);

/** @internal */
export type DeleteEnvironmentVariableFromContextResponse$Outbound =
    | DeleteEnvironmentVariableFromContextMessageResponse$Outbound
    | DeleteEnvironmentVariableFromContextResponseBody$Outbound;

/** @internal */
export const DeleteEnvironmentVariableFromContextResponse$outboundSchema: z.ZodType<
    DeleteEnvironmentVariableFromContextResponse$Outbound,
    z.ZodTypeDef,
    DeleteEnvironmentVariableFromContextResponse
> = z.union([
    z.lazy(() => DeleteEnvironmentVariableFromContextMessageResponse$outboundSchema),
    z.lazy(() => DeleteEnvironmentVariableFromContextResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvironmentVariableFromContextResponse$ {
    /** @deprecated use `DeleteEnvironmentVariableFromContextResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvironmentVariableFromContextResponse$inboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvironmentVariableFromContextResponse$outboundSchema;
    /** @deprecated use `DeleteEnvironmentVariableFromContextResponse$Outbound` instead. */
    export type Outbound = DeleteEnvironmentVariableFromContextResponse$Outbound;
}
