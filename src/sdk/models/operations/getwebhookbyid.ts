/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetWebhookByIdRequest = {
    /**
     * ID of the webhook (UUID)
     */
    webhookId: string;
};

/**
 * Error response.
 */
export type GetWebhookByIdResponseBody = {
    message?: string | undefined;
};

export const GetWebhookByIdEvents = {
    WorkflowCompleted: "workflow-completed",
    JobCompleted: "job-completed",
} as const;
export type GetWebhookByIdEvents = ClosedEnum<typeof GetWebhookByIdEvents>;

/**
 * The scope in which the relevant events that will trigger webhooks
 */
export type GetWebhookByIdScope = {
    /**
     * ID of the scope being used (at the moment, only project ID is supported)
     */
    id: string;
    /**
     * Type of the scope being used
     */
    type: string;
};

/**
 * A webhook
 */
export type GetWebhookByIdWebhook = {
    /**
     * The date and time the webhook was created.
     */
    createdAt: Date;
    /**
     * Events that will trigger the webhook
     */
    events: Array<GetWebhookByIdEvents>;
    /**
     * The unique ID of the webhook
     */
    id: string;
    /**
     * Name of the webhook
     */
    name: string;
    /**
     * The scope in which the relevant events that will trigger webhooks
     */
    scope: GetWebhookByIdScope;
    /**
     * Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request
     */
    signingSecret: string;
    /**
     * The date and time the webhook was last updated.
     */
    updatedAt: Date;
    /**
     * URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
     */
    url: string;
    /**
     * Whether to enforce TLS certificate verification when delivering the webhook
     */
    verifyTls: boolean;
};

export type GetWebhookByIdResponse = GetWebhookByIdResponseBody | GetWebhookByIdWebhook;

/** @internal */
export const GetWebhookByIdRequest$inboundSchema: z.ZodType<
    GetWebhookByIdRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "webhook-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "webhook-id": "webhookId",
        });
    });

/** @internal */
export type GetWebhookByIdRequest$Outbound = {
    "webhook-id": string;
};

/** @internal */
export const GetWebhookByIdRequest$outboundSchema: z.ZodType<
    GetWebhookByIdRequest$Outbound,
    z.ZodTypeDef,
    GetWebhookByIdRequest
> = z
    .object({
        webhookId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            webhookId: "webhook-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByIdRequest$ {
    /** @deprecated use `GetWebhookByIdRequest$inboundSchema` instead. */
    export const inboundSchema = GetWebhookByIdRequest$inboundSchema;
    /** @deprecated use `GetWebhookByIdRequest$outboundSchema` instead. */
    export const outboundSchema = GetWebhookByIdRequest$outboundSchema;
    /** @deprecated use `GetWebhookByIdRequest$Outbound` instead. */
    export type Outbound = GetWebhookByIdRequest$Outbound;
}

/** @internal */
export const GetWebhookByIdResponseBody$inboundSchema: z.ZodType<
    GetWebhookByIdResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetWebhookByIdResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetWebhookByIdResponseBody$outboundSchema: z.ZodType<
    GetWebhookByIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetWebhookByIdResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByIdResponseBody$ {
    /** @deprecated use `GetWebhookByIdResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWebhookByIdResponseBody$inboundSchema;
    /** @deprecated use `GetWebhookByIdResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWebhookByIdResponseBody$outboundSchema;
    /** @deprecated use `GetWebhookByIdResponseBody$Outbound` instead. */
    export type Outbound = GetWebhookByIdResponseBody$Outbound;
}

/** @internal */
export const GetWebhookByIdEvents$inboundSchema: z.ZodNativeEnum<typeof GetWebhookByIdEvents> =
    z.nativeEnum(GetWebhookByIdEvents);

/** @internal */
export const GetWebhookByIdEvents$outboundSchema: z.ZodNativeEnum<typeof GetWebhookByIdEvents> =
    GetWebhookByIdEvents$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByIdEvents$ {
    /** @deprecated use `GetWebhookByIdEvents$inboundSchema` instead. */
    export const inboundSchema = GetWebhookByIdEvents$inboundSchema;
    /** @deprecated use `GetWebhookByIdEvents$outboundSchema` instead. */
    export const outboundSchema = GetWebhookByIdEvents$outboundSchema;
}

/** @internal */
export const GetWebhookByIdScope$inboundSchema: z.ZodType<
    GetWebhookByIdScope,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    type: z.string(),
});

/** @internal */
export type GetWebhookByIdScope$Outbound = {
    id: string;
    type: string;
};

/** @internal */
export const GetWebhookByIdScope$outboundSchema: z.ZodType<
    GetWebhookByIdScope$Outbound,
    z.ZodTypeDef,
    GetWebhookByIdScope
> = z.object({
    id: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByIdScope$ {
    /** @deprecated use `GetWebhookByIdScope$inboundSchema` instead. */
    export const inboundSchema = GetWebhookByIdScope$inboundSchema;
    /** @deprecated use `GetWebhookByIdScope$outboundSchema` instead. */
    export const outboundSchema = GetWebhookByIdScope$outboundSchema;
    /** @deprecated use `GetWebhookByIdScope$Outbound` instead. */
    export type Outbound = GetWebhookByIdScope$Outbound;
}

/** @internal */
export const GetWebhookByIdWebhook$inboundSchema: z.ZodType<
    GetWebhookByIdWebhook,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        events: z.array(GetWebhookByIdEvents$inboundSchema),
        id: z.string(),
        name: z.string(),
        scope: z.lazy(() => GetWebhookByIdScope$inboundSchema),
        "signing-secret": z.string(),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        url: z.string(),
        "verify-tls": z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "signing-secret": "signingSecret",
            "updated-at": "updatedAt",
            "verify-tls": "verifyTls",
        });
    });

/** @internal */
export type GetWebhookByIdWebhook$Outbound = {
    "created-at": string;
    events: Array<string>;
    id: string;
    name: string;
    scope: GetWebhookByIdScope$Outbound;
    "signing-secret": string;
    "updated-at": string;
    url: string;
    "verify-tls": boolean;
};

/** @internal */
export const GetWebhookByIdWebhook$outboundSchema: z.ZodType<
    GetWebhookByIdWebhook$Outbound,
    z.ZodTypeDef,
    GetWebhookByIdWebhook
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        events: z.array(GetWebhookByIdEvents$outboundSchema),
        id: z.string(),
        name: z.string(),
        scope: z.lazy(() => GetWebhookByIdScope$outboundSchema),
        signingSecret: z.string(),
        updatedAt: z.date().transform((v) => v.toISOString()),
        url: z.string(),
        verifyTls: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            signingSecret: "signing-secret",
            updatedAt: "updated-at",
            verifyTls: "verify-tls",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByIdWebhook$ {
    /** @deprecated use `GetWebhookByIdWebhook$inboundSchema` instead. */
    export const inboundSchema = GetWebhookByIdWebhook$inboundSchema;
    /** @deprecated use `GetWebhookByIdWebhook$outboundSchema` instead. */
    export const outboundSchema = GetWebhookByIdWebhook$outboundSchema;
    /** @deprecated use `GetWebhookByIdWebhook$Outbound` instead. */
    export type Outbound = GetWebhookByIdWebhook$Outbound;
}

/** @internal */
export const GetWebhookByIdResponse$inboundSchema: z.ZodType<
    GetWebhookByIdResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetWebhookByIdResponseBody$inboundSchema),
    z.lazy(() => GetWebhookByIdWebhook$inboundSchema),
]);

/** @internal */
export type GetWebhookByIdResponse$Outbound =
    | GetWebhookByIdResponseBody$Outbound
    | GetWebhookByIdWebhook$Outbound;

/** @internal */
export const GetWebhookByIdResponse$outboundSchema: z.ZodType<
    GetWebhookByIdResponse$Outbound,
    z.ZodTypeDef,
    GetWebhookByIdResponse
> = z.union([
    z.lazy(() => GetWebhookByIdResponseBody$outboundSchema),
    z.lazy(() => GetWebhookByIdWebhook$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookByIdResponse$ {
    /** @deprecated use `GetWebhookByIdResponse$inboundSchema` instead. */
    export const inboundSchema = GetWebhookByIdResponse$inboundSchema;
    /** @deprecated use `GetWebhookByIdResponse$outboundSchema` instead. */
    export const outboundSchema = GetWebhookByIdResponse$outboundSchema;
    /** @deprecated use `GetWebhookByIdResponse$Outbound` instead. */
    export type Outbound = GetWebhookByIdResponse$Outbound;
}
