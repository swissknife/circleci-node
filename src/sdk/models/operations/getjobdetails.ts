/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetJobDetailsRequest = {
    /**
     * The number of the job.
     */
    jobNumber?: any | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetJobDetailsResponseBody = {
    message?: string | undefined;
};

/**
 * Information about the context.
 */
export type Contexts = {
    /**
     * The name of the context.
     */
    name: string;
};

/**
 * Information about executor used for a job.
 */
export type Executor = {
    /**
     * Resource class name.
     */
    resourceClass: string;
    /**
     * Executor type.
     */
    type?: string | undefined;
};

/**
 * Info about the latest workflow the job was a part of.
 */
export type LatestWorkflow = {
    /**
     * The unique ID of the workflow.
     */
    id: string;
    /**
     * The name of the workflow.
     */
    name: string;
};

/**
 * Message from CircleCI execution platform.
 */
export type Messages = {
    /**
     * Information describing message.
     */
    message: string;
    /**
     * Value describing the reason for message to be added to the job.
     */
    reason?: string | undefined;
    /**
     * Message type.
     */
    type: string;
};

/**
 * Information about an organization.
 */
export type Organization = {
    /**
     * The name of the organization.
     */
    name: string;
};

/**
 * Info about a status of the parallel run.
 */
export type ParallelRuns = {
    /**
     * Index of the parallel run.
     */
    index: number;
    /**
     * Status of the parallel run.
     */
    status: string;
};

/**
 * Info about a pipeline the job is a part of.
 */
export type Pipeline = {
    /**
     * The unique ID of the pipeline.
     */
    id: string;
};

/**
 * Information about a project.
 */
export type Project = {
    /**
     * URL to the repository hosting the project's code
     */
    externalUrl: string;
    id: string;
    /**
     * The name of the project
     */
    name: string;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    slug: string;
};

/**
 * The current status of the job.
 */
export const Status = {
    Success: "success",
    Running: "running",
    NotRun: "not_run",
    Failed: "failed",
    Retried: "retried",
    Queued: "queued",
    NotRunning: "not_running",
    InfrastructureFail: "infrastructure_fail",
    Timedout: "timedout",
    OnHold: "on_hold",
    TerminatedUnknown: "terminated-unknown",
    Blocked: "blocked",
    Canceled: "canceled",
    Unauthorized: "unauthorized",
} as const;
/**
 * The current status of the job.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * Job Details
 */
export type GetJobDetailsJobDetails = {
    /**
     * List of contexts used by the job.
     */
    contexts: Array<Contexts>;
    /**
     * The time when the job was created.
     */
    createdAt: Date;
    /**
     * Duration of a job in milliseconds.
     */
    duration: number;
    /**
     * Information about executor used for a job.
     */
    executor: Executor;
    /**
     * Info about the latest workflow the job was a part of.
     */
    latestWorkflow: LatestWorkflow;
    /**
     * Messages from CircleCI execution platform.
     */
    messages: Array<Messages>;
    /**
     * The name of the job.
     */
    name: string;
    /**
     * The number of the job.
     */
    number: number;
    /**
     * Information about an organization.
     */
    organization: Organization;
    /**
     * Info about parallels runs and their status.
     */
    parallelRuns: Array<ParallelRuns>;
    /**
     * A number of parallel runs the job has.
     */
    parallelism: number;
    /**
     * Info about a pipeline the job is a part of.
     */
    pipeline: Pipeline;
    /**
     * Information about a project.
     */
    project: Project;
    /**
     * The time when the job was placed in a queue.
     */
    queuedAt: Date;
    /**
     * The date and time the job started.
     */
    startedAt: Date;
    /**
     * The current status of the job.
     */
    status: Status;
    /**
     * The time when the job stopped.
     */
    stoppedAt?: Date | undefined;
    /**
     * URL of the job in CircleCI Web UI.
     */
    webUrl: string;
};

export type GetJobDetailsResponse = GetJobDetailsResponseBody | GetJobDetailsJobDetails;

/** @internal */
export const GetJobDetailsRequest$inboundSchema: z.ZodType<
    GetJobDetailsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "job-number": z.any().optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "job-number": "jobNumber",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetJobDetailsRequest$Outbound = {
    "job-number"?: any | undefined;
    "project-slug": string;
};

/** @internal */
export const GetJobDetailsRequest$outboundSchema: z.ZodType<
    GetJobDetailsRequest$Outbound,
    z.ZodTypeDef,
    GetJobDetailsRequest
> = z
    .object({
        jobNumber: z.any().optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            jobNumber: "job-number",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobDetailsRequest$ {
    /** @deprecated use `GetJobDetailsRequest$inboundSchema` instead. */
    export const inboundSchema = GetJobDetailsRequest$inboundSchema;
    /** @deprecated use `GetJobDetailsRequest$outboundSchema` instead. */
    export const outboundSchema = GetJobDetailsRequest$outboundSchema;
    /** @deprecated use `GetJobDetailsRequest$Outbound` instead. */
    export type Outbound = GetJobDetailsRequest$Outbound;
}

/** @internal */
export const GetJobDetailsResponseBody$inboundSchema: z.ZodType<
    GetJobDetailsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetJobDetailsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetJobDetailsResponseBody$outboundSchema: z.ZodType<
    GetJobDetailsResponseBody$Outbound,
    z.ZodTypeDef,
    GetJobDetailsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobDetailsResponseBody$ {
    /** @deprecated use `GetJobDetailsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetJobDetailsResponseBody$inboundSchema;
    /** @deprecated use `GetJobDetailsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetJobDetailsResponseBody$outboundSchema;
    /** @deprecated use `GetJobDetailsResponseBody$Outbound` instead. */
    export type Outbound = GetJobDetailsResponseBody$Outbound;
}

/** @internal */
export const Contexts$inboundSchema: z.ZodType<Contexts, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
});

/** @internal */
export type Contexts$Outbound = {
    name: string;
};

/** @internal */
export const Contexts$outboundSchema: z.ZodType<Contexts$Outbound, z.ZodTypeDef, Contexts> =
    z.object({
        name: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contexts$ {
    /** @deprecated use `Contexts$inboundSchema` instead. */
    export const inboundSchema = Contexts$inboundSchema;
    /** @deprecated use `Contexts$outboundSchema` instead. */
    export const outboundSchema = Contexts$outboundSchema;
    /** @deprecated use `Contexts$Outbound` instead. */
    export type Outbound = Contexts$Outbound;
}

/** @internal */
export const Executor$inboundSchema: z.ZodType<Executor, z.ZodTypeDef, unknown> = z
    .object({
        resource_class: z.string(),
        type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            resource_class: "resourceClass",
        });
    });

/** @internal */
export type Executor$Outbound = {
    resource_class: string;
    type?: string | undefined;
};

/** @internal */
export const Executor$outboundSchema: z.ZodType<Executor$Outbound, z.ZodTypeDef, Executor> = z
    .object({
        resourceClass: z.string(),
        type: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            resourceClass: "resource_class",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Executor$ {
    /** @deprecated use `Executor$inboundSchema` instead. */
    export const inboundSchema = Executor$inboundSchema;
    /** @deprecated use `Executor$outboundSchema` instead. */
    export const outboundSchema = Executor$outboundSchema;
    /** @deprecated use `Executor$Outbound` instead. */
    export type Outbound = Executor$Outbound;
}

/** @internal */
export const LatestWorkflow$inboundSchema: z.ZodType<LatestWorkflow, z.ZodTypeDef, unknown> =
    z.object({
        id: z.string(),
        name: z.string(),
    });

/** @internal */
export type LatestWorkflow$Outbound = {
    id: string;
    name: string;
};

/** @internal */
export const LatestWorkflow$outboundSchema: z.ZodType<
    LatestWorkflow$Outbound,
    z.ZodTypeDef,
    LatestWorkflow
> = z.object({
    id: z.string(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LatestWorkflow$ {
    /** @deprecated use `LatestWorkflow$inboundSchema` instead. */
    export const inboundSchema = LatestWorkflow$inboundSchema;
    /** @deprecated use `LatestWorkflow$outboundSchema` instead. */
    export const outboundSchema = LatestWorkflow$outboundSchema;
    /** @deprecated use `LatestWorkflow$Outbound` instead. */
    export type Outbound = LatestWorkflow$Outbound;
}

/** @internal */
export const Messages$inboundSchema: z.ZodType<Messages, z.ZodTypeDef, unknown> = z.object({
    message: z.string(),
    reason: z.string().optional(),
    type: z.string(),
});

/** @internal */
export type Messages$Outbound = {
    message: string;
    reason?: string | undefined;
    type: string;
};

/** @internal */
export const Messages$outboundSchema: z.ZodType<Messages$Outbound, z.ZodTypeDef, Messages> =
    z.object({
        message: z.string(),
        reason: z.string().optional(),
        type: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Messages$ {
    /** @deprecated use `Messages$inboundSchema` instead. */
    export const inboundSchema = Messages$inboundSchema;
    /** @deprecated use `Messages$outboundSchema` instead. */
    export const outboundSchema = Messages$outboundSchema;
    /** @deprecated use `Messages$Outbound` instead. */
    export type Outbound = Messages$Outbound;
}

/** @internal */
export const Organization$inboundSchema: z.ZodType<Organization, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
});

/** @internal */
export type Organization$Outbound = {
    name: string;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
    Organization$Outbound,
    z.ZodTypeDef,
    Organization
> = z.object({
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
    /** @deprecated use `Organization$inboundSchema` instead. */
    export const inboundSchema = Organization$inboundSchema;
    /** @deprecated use `Organization$outboundSchema` instead. */
    export const outboundSchema = Organization$outboundSchema;
    /** @deprecated use `Organization$Outbound` instead. */
    export type Outbound = Organization$Outbound;
}

/** @internal */
export const ParallelRuns$inboundSchema: z.ZodType<ParallelRuns, z.ZodTypeDef, unknown> = z.object({
    index: z.number().int(),
    status: z.string(),
});

/** @internal */
export type ParallelRuns$Outbound = {
    index: number;
    status: string;
};

/** @internal */
export const ParallelRuns$outboundSchema: z.ZodType<
    ParallelRuns$Outbound,
    z.ZodTypeDef,
    ParallelRuns
> = z.object({
    index: z.number().int(),
    status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParallelRuns$ {
    /** @deprecated use `ParallelRuns$inboundSchema` instead. */
    export const inboundSchema = ParallelRuns$inboundSchema;
    /** @deprecated use `ParallelRuns$outboundSchema` instead. */
    export const outboundSchema = ParallelRuns$outboundSchema;
    /** @deprecated use `ParallelRuns$Outbound` instead. */
    export type Outbound = ParallelRuns$Outbound;
}

/** @internal */
export const Pipeline$inboundSchema: z.ZodType<Pipeline, z.ZodTypeDef, unknown> = z.object({
    id: z.string(),
});

/** @internal */
export type Pipeline$Outbound = {
    id: string;
};

/** @internal */
export const Pipeline$outboundSchema: z.ZodType<Pipeline$Outbound, z.ZodTypeDef, Pipeline> =
    z.object({
        id: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pipeline$ {
    /** @deprecated use `Pipeline$inboundSchema` instead. */
    export const inboundSchema = Pipeline$inboundSchema;
    /** @deprecated use `Pipeline$outboundSchema` instead. */
    export const outboundSchema = Pipeline$outboundSchema;
    /** @deprecated use `Pipeline$Outbound` instead. */
    export type Outbound = Pipeline$Outbound;
}

/** @internal */
export const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> = z
    .object({
        external_url: z.string(),
        id: z.string(),
        name: z.string(),
        slug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            external_url: "externalUrl",
        });
    });

/** @internal */
export type Project$Outbound = {
    external_url: string;
    id: string;
    name: string;
    slug: string;
};

/** @internal */
export const Project$outboundSchema: z.ZodType<Project$Outbound, z.ZodTypeDef, Project> = z
    .object({
        externalUrl: z.string(),
        id: z.string(),
        name: z.string(),
        slug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            externalUrl: "external_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Project$ {
    /** @deprecated use `Project$inboundSchema` instead. */
    export const inboundSchema = Project$inboundSchema;
    /** @deprecated use `Project$outboundSchema` instead. */
    export const outboundSchema = Project$outboundSchema;
    /** @deprecated use `Project$Outbound` instead. */
    export type Outbound = Project$Outbound;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetJobDetailsJobDetails$inboundSchema: z.ZodType<
    GetJobDetailsJobDetails,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        contexts: z.array(z.lazy(() => Contexts$inboundSchema)),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        duration: z.number().int(),
        executor: z.lazy(() => Executor$inboundSchema),
        latest_workflow: z.lazy(() => LatestWorkflow$inboundSchema),
        messages: z.array(z.lazy(() => Messages$inboundSchema)),
        name: z.string(),
        number: z.number().int(),
        organization: z.lazy(() => Organization$inboundSchema),
        parallel_runs: z.array(z.lazy(() => ParallelRuns$inboundSchema)),
        parallelism: z.number().int(),
        pipeline: z.lazy(() => Pipeline$inboundSchema),
        project: z.lazy(() => Project$inboundSchema),
        queued_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        started_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        status: Status$inboundSchema,
        stopped_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        web_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            latest_workflow: "latestWorkflow",
            parallel_runs: "parallelRuns",
            queued_at: "queuedAt",
            started_at: "startedAt",
            stopped_at: "stoppedAt",
            web_url: "webUrl",
        });
    });

/** @internal */
export type GetJobDetailsJobDetails$Outbound = {
    contexts: Array<Contexts$Outbound>;
    created_at: string;
    duration: number;
    executor: Executor$Outbound;
    latest_workflow: LatestWorkflow$Outbound;
    messages: Array<Messages$Outbound>;
    name: string;
    number: number;
    organization: Organization$Outbound;
    parallel_runs: Array<ParallelRuns$Outbound>;
    parallelism: number;
    pipeline: Pipeline$Outbound;
    project: Project$Outbound;
    queued_at: string;
    started_at: string;
    status: string;
    stopped_at?: string | undefined;
    web_url: string;
};

/** @internal */
export const GetJobDetailsJobDetails$outboundSchema: z.ZodType<
    GetJobDetailsJobDetails$Outbound,
    z.ZodTypeDef,
    GetJobDetailsJobDetails
> = z
    .object({
        contexts: z.array(z.lazy(() => Contexts$outboundSchema)),
        createdAt: z.date().transform((v) => v.toISOString()),
        duration: z.number().int(),
        executor: z.lazy(() => Executor$outboundSchema),
        latestWorkflow: z.lazy(() => LatestWorkflow$outboundSchema),
        messages: z.array(z.lazy(() => Messages$outboundSchema)),
        name: z.string(),
        number: z.number().int(),
        organization: z.lazy(() => Organization$outboundSchema),
        parallelRuns: z.array(z.lazy(() => ParallelRuns$outboundSchema)),
        parallelism: z.number().int(),
        pipeline: z.lazy(() => Pipeline$outboundSchema),
        project: z.lazy(() => Project$outboundSchema),
        queuedAt: z.date().transform((v) => v.toISOString()),
        startedAt: z.date().transform((v) => v.toISOString()),
        status: Status$outboundSchema,
        stoppedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        webUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            latestWorkflow: "latest_workflow",
            parallelRuns: "parallel_runs",
            queuedAt: "queued_at",
            startedAt: "started_at",
            stoppedAt: "stopped_at",
            webUrl: "web_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobDetailsJobDetails$ {
    /** @deprecated use `GetJobDetailsJobDetails$inboundSchema` instead. */
    export const inboundSchema = GetJobDetailsJobDetails$inboundSchema;
    /** @deprecated use `GetJobDetailsJobDetails$outboundSchema` instead. */
    export const outboundSchema = GetJobDetailsJobDetails$outboundSchema;
    /** @deprecated use `GetJobDetailsJobDetails$Outbound` instead. */
    export type Outbound = GetJobDetailsJobDetails$Outbound;
}

/** @internal */
export const GetJobDetailsResponse$inboundSchema: z.ZodType<
    GetJobDetailsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetJobDetailsResponseBody$inboundSchema),
    z.lazy(() => GetJobDetailsJobDetails$inboundSchema),
]);

/** @internal */
export type GetJobDetailsResponse$Outbound =
    | GetJobDetailsResponseBody$Outbound
    | GetJobDetailsJobDetails$Outbound;

/** @internal */
export const GetJobDetailsResponse$outboundSchema: z.ZodType<
    GetJobDetailsResponse$Outbound,
    z.ZodTypeDef,
    GetJobDetailsResponse
> = z.union([
    z.lazy(() => GetJobDetailsResponseBody$outboundSchema),
    z.lazy(() => GetJobDetailsJobDetails$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobDetailsResponse$ {
    /** @deprecated use `GetJobDetailsResponse$inboundSchema` instead. */
    export const inboundSchema = GetJobDetailsResponse$inboundSchema;
    /** @deprecated use `GetJobDetailsResponse$outboundSchema` instead. */
    export const outboundSchema = GetJobDetailsResponse$outboundSchema;
    /** @deprecated use `GetJobDetailsResponse$Outbound` instead. */
    export type Outbound = GetJobDetailsResponse$Outbound;
}
