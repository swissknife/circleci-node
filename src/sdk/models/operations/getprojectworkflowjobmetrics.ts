/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export const QueryParamReportingWindow = {
    Last7Days: "last-7-days",
    Last90Days: "last-90-days",
    Last24Hours: "last-24-hours",
    Last30Days: "last-30-days",
    Last60Days: "last-60-days",
} as const;
/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export type QueryParamReportingWindow = ClosedEnum<typeof QueryParamReportingWindow>;

export type GetProjectWorkflowJobMetricsRequest = {
    /**
     * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
     */
    allBranches?: boolean | undefined;
    /**
     * The name of a vcs branch. If not passed we will scope the API call to the default branch.
     */
    branch?: string | undefined;
    /**
     * The name of the jobs you would like to filter from your workflow. If not specified, all workflow jobs will be returned. The job name can either be the full job name or just a substring of the job name.
     */
    jobName?: string | undefined;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
     */
    reportingWindow?: QueryParamReportingWindow | undefined;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Error response.
 */
export type GetProjectWorkflowJobMetricsInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Metrics relating to the duration of runs for a workflow job.
 */
export type GetProjectWorkflowJobMetricsDurationMetrics = {
    /**
     * The max duration, in seconds, among a group of runs.
     */
    max: number;
    /**
     * The mean duration, in seconds, among a group of runs.
     */
    mean: number;
    /**
     * The median duration, in seconds, among a group of runs.
     */
    median: number;
    /**
     * The minimum duration, in seconds, among a group of runs.
     */
    min: number;
    /**
     * The 95th percentile duration, in seconds, among a group of runs.
     */
    p95: number;
    /**
     * The standard deviation, in seconds, among a group of runs.
     */
    standardDeviation: number;
};

/**
 * Metrics relating to a workflow job's runs.
 */
export type GetProjectWorkflowJobMetricsMetrics = {
    /**
     * Metrics relating to the duration of runs for a workflow job.
     */
    durationMetrics: GetProjectWorkflowJobMetricsDurationMetrics;
    /**
     * The number of failed runs.
     */
    failedRuns: number;
    successRate: number;
    /**
     * The number of successful runs.
     */
    successfulRuns: number;
    /**
     * The average number of runs per day.
     */
    throughput: number;
    /**
     * The total credits consumed by the job in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
     */
    totalCreditsUsed: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

export type GetProjectWorkflowJobMetricsItems = {
    /**
     * Metrics relating to a workflow job's runs.
     */
    metrics: GetProjectWorkflowJobMetricsMetrics;
    /**
     * The name of the job.
     */
    name: string;
    /**
     * The timestamp of the last build within the requested reporting window.
     */
    windowEnd: Date;
    /**
     * The timestamp of the first build within the requested reporting window.
     */
    windowStart: Date;
};

/**
 * Paginated workflow job summary metrics.
 */
export type GetProjectWorkflowJobMetricsResponseBody = {
    /**
     * Job summary metrics.
     */
    items: Array<GetProjectWorkflowJobMetricsItems>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type GetProjectWorkflowJobMetricsResponse =
    | GetProjectWorkflowJobMetricsInsightsResponseBody
    | GetProjectWorkflowJobMetricsResponseBody;

/** @internal */
export const QueryParamReportingWindow$inboundSchema: z.ZodNativeEnum<
    typeof QueryParamReportingWindow
> = z.nativeEnum(QueryParamReportingWindow);

/** @internal */
export const QueryParamReportingWindow$outboundSchema: z.ZodNativeEnum<
    typeof QueryParamReportingWindow
> = QueryParamReportingWindow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamReportingWindow$ {
    /** @deprecated use `QueryParamReportingWindow$inboundSchema` instead. */
    export const inboundSchema = QueryParamReportingWindow$inboundSchema;
    /** @deprecated use `QueryParamReportingWindow$outboundSchema` instead. */
    export const outboundSchema = QueryParamReportingWindow$outboundSchema;
}

/** @internal */
export const GetProjectWorkflowJobMetricsRequest$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "all-branches": z.boolean().optional(),
        branch: z.string().optional(),
        "job-name": z.string().optional(),
        "page-token": z.string().optional(),
        "project-slug": z.string(),
        "reporting-window": QueryParamReportingWindow$inboundSchema.optional(),
        "workflow-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "all-branches": "allBranches",
            "job-name": "jobName",
            "page-token": "pageToken",
            "project-slug": "projectSlug",
            "reporting-window": "reportingWindow",
            "workflow-name": "workflowName",
        });
    });

/** @internal */
export type GetProjectWorkflowJobMetricsRequest$Outbound = {
    "all-branches"?: boolean | undefined;
    branch?: string | undefined;
    "job-name"?: string | undefined;
    "page-token"?: string | undefined;
    "project-slug": string;
    "reporting-window"?: string | undefined;
    "workflow-name": string;
};

/** @internal */
export const GetProjectWorkflowJobMetricsRequest$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsRequest$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsRequest
> = z
    .object({
        allBranches: z.boolean().optional(),
        branch: z.string().optional(),
        jobName: z.string().optional(),
        pageToken: z.string().optional(),
        projectSlug: z.string(),
        reportingWindow: QueryParamReportingWindow$outboundSchema.optional(),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            allBranches: "all-branches",
            jobName: "job-name",
            pageToken: "page-token",
            projectSlug: "project-slug",
            reportingWindow: "reporting-window",
            workflowName: "workflow-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsRequest$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsRequest$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsRequest$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsRequest$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsRequest$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsRequest$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsRequest$Outbound;
}

/** @internal */
export const GetProjectWorkflowJobMetricsInsightsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetProjectWorkflowJobMetricsInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetProjectWorkflowJobMetricsInsightsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsInsightsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsInsightsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowJobMetricsDurationMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsDurationMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        max: z.number().int(),
        mean: z.number().int(),
        median: z.number().int(),
        min: z.number().int(),
        p95: z.number().int(),
        standard_deviation: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            standard_deviation: "standardDeviation",
        });
    });

/** @internal */
export type GetProjectWorkflowJobMetricsDurationMetrics$Outbound = {
    max: number;
    mean: number;
    median: number;
    min: number;
    p95: number;
    standard_deviation: number;
};

/** @internal */
export const GetProjectWorkflowJobMetricsDurationMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsDurationMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsDurationMetrics
> = z
    .object({
        max: z.number().int(),
        mean: z.number().int(),
        median: z.number().int(),
        min: z.number().int(),
        p95: z.number().int(),
        standardDeviation: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            standardDeviation: "standard_deviation",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsDurationMetrics$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsDurationMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsDurationMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsDurationMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsDurationMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsDurationMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsDurationMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowJobMetricsMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        duration_metrics: z.lazy(() => GetProjectWorkflowJobMetricsDurationMetrics$inboundSchema),
        failed_runs: z.number().int(),
        success_rate: z.number(),
        successful_runs: z.number().int(),
        throughput: z.number(),
        total_credits_used: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            duration_metrics: "durationMetrics",
            failed_runs: "failedRuns",
            success_rate: "successRate",
            successful_runs: "successfulRuns",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowJobMetricsMetrics$Outbound = {
    duration_metrics: GetProjectWorkflowJobMetricsDurationMetrics$Outbound;
    failed_runs: number;
    success_rate: number;
    successful_runs: number;
    throughput: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowJobMetricsMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsMetrics
> = z
    .object({
        durationMetrics: z.lazy(() => GetProjectWorkflowJobMetricsDurationMetrics$outboundSchema),
        failedRuns: z.number().int(),
        successRate: z.number(),
        successfulRuns: z.number().int(),
        throughput: z.number(),
        totalCreditsUsed: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            durationMetrics: "duration_metrics",
            failedRuns: "failed_runs",
            successRate: "success_rate",
            successfulRuns: "successful_runs",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsMetrics$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowJobMetricsItems$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsItems,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        metrics: z.lazy(() => GetProjectWorkflowJobMetricsMetrics$inboundSchema),
        name: z.string(),
        window_end: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        window_start: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            window_end: "windowEnd",
            window_start: "windowStart",
        });
    });

/** @internal */
export type GetProjectWorkflowJobMetricsItems$Outbound = {
    metrics: GetProjectWorkflowJobMetricsMetrics$Outbound;
    name: string;
    window_end: string;
    window_start: string;
};

/** @internal */
export const GetProjectWorkflowJobMetricsItems$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsItems$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsItems
> = z
    .object({
        metrics: z.lazy(() => GetProjectWorkflowJobMetricsMetrics$outboundSchema),
        name: z.string(),
        windowEnd: z.date().transform((v) => v.toISOString()),
        windowStart: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            windowEnd: "window_end",
            windowStart: "window_start",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsItems$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsItems$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsItems$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsItems$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsItems$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsItems$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsItems$Outbound;
}

/** @internal */
export const GetProjectWorkflowJobMetricsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => GetProjectWorkflowJobMetricsItems$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type GetProjectWorkflowJobMetricsResponseBody$Outbound = {
    items: Array<GetProjectWorkflowJobMetricsItems$Outbound>;
    next_page_token: string;
};

/** @internal */
export const GetProjectWorkflowJobMetricsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => GetProjectWorkflowJobMetricsItems$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowJobMetricsResponse$inboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetProjectWorkflowJobMetricsInsightsResponseBody$inboundSchema),
    z.lazy(() => GetProjectWorkflowJobMetricsResponseBody$inboundSchema),
]);

/** @internal */
export type GetProjectWorkflowJobMetricsResponse$Outbound =
    | GetProjectWorkflowJobMetricsInsightsResponseBody$Outbound
    | GetProjectWorkflowJobMetricsResponseBody$Outbound;

/** @internal */
export const GetProjectWorkflowJobMetricsResponse$outboundSchema: z.ZodType<
    GetProjectWorkflowJobMetricsResponse$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowJobMetricsResponse
> = z.union([
    z.lazy(() => GetProjectWorkflowJobMetricsInsightsResponseBody$outboundSchema),
    z.lazy(() => GetProjectWorkflowJobMetricsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowJobMetricsResponse$ {
    /** @deprecated use `GetProjectWorkflowJobMetricsResponse$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowJobMetricsResponse$inboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsResponse$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowJobMetricsResponse$outboundSchema;
    /** @deprecated use `GetProjectWorkflowJobMetricsResponse$Outbound` instead. */
    export type Outbound = GetProjectWorkflowJobMetricsResponse$Outbound;
}
