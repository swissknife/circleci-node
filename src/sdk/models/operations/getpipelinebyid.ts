/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetPipelineByIdRequest = {
    /**
     * The unique ID of the pipeline.
     */
    pipelineId: string;
};

/**
 * Error response.
 */
export type GetPipelineByIdResponseBody = {
    message?: string | undefined;
};

/**
 * The type of error.
 */
export const GetPipelineByIdType = {
    Config: "config",
    ConfigFetch: "config-fetch",
    Timeout: "timeout",
    Permission: "permission",
    Other: "other",
    TriggerRule: "trigger-rule",
    Plan: "plan",
} as const;
/**
 * The type of error.
 */
export type GetPipelineByIdType = ClosedEnum<typeof GetPipelineByIdType>;

/**
 * An error with a type and message.
 */
export type Errors = {
    /**
     * A human-readable error message.
     */
    message: string;
    /**
     * The type of error.
     */
    type: GetPipelineByIdType;
};

/**
 * The current state of the pipeline.
 */
export const State = {
    Created: "created",
    Errored: "errored",
    SetupPending: "setup-pending",
    Setup: "setup",
    Pending: "pending",
} as const;
/**
 * The current state of the pipeline.
 */
export type State = ClosedEnum<typeof State>;

/**
 * The user who triggered the Pipeline.
 */
export type Actor = {
    /**
     * URL to the user's avatar on the VCS
     */
    avatarUrl: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
};

/**
 * The type of trigger.
 */
export const GetPipelineByIdPipelineType = {
    ScheduledPipeline: "scheduled_pipeline",
    Explicit: "explicit",
    Api: "api",
    Webhook: "webhook",
} as const;
/**
 * The type of trigger.
 */
export type GetPipelineByIdPipelineType = ClosedEnum<typeof GetPipelineByIdPipelineType>;

/**
 * A summary of the trigger.
 */
export type Trigger = {
    /**
     * The user who triggered the Pipeline.
     */
    actor: Actor;
    /**
     * The date and time the trigger was received.
     */
    receivedAt: Date;
    /**
     * The type of trigger.
     */
    type: GetPipelineByIdPipelineType;
};

export type Four = {};

export type TriggerParameters = Four | string | number | boolean;

/**
 * The latest commit in the pipeline.
 */
export type Commit = {
    /**
     * The body of the commit message.
     */
    body: string;
    /**
     * The subject of the commit message.
     */
    subject: string;
};

/**
 * VCS information for the pipeline.
 */
export type Vcs = {
    /**
     * The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
     */
    branch?: string | undefined;
    /**
     * The latest commit in the pipeline.
     */
    commit?: Commit | undefined;
    /**
     * URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
     */
    originRepositoryUrl: string;
    /**
     * Name of the VCS provider (e.g. GitHub, Bitbucket).
     */
    providerName: string;
    /**
     * The code review id.
     */
    reviewId?: string | undefined;
    /**
     * The code review URL.
     */
    reviewUrl?: string | undefined;
    /**
     * The code revision the pipeline ran.
     */
    revision: string;
    /**
     * The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
     */
    tag?: string | undefined;
    /**
     * URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
     */
    targetRepositoryUrl: string;
};

/**
 * A pipeline response.
 */
export type GetPipelineByIdPipeline = {
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * A sequence of errors that have occurred within the pipeline.
     */
    errors: Array<Errors>;
    /**
     * The unique ID of the pipeline.
     */
    id: string;
    /**
     * The number of the pipeline.
     */
    number: number;
    /**
     * The project-slug for the pipeline.
     */
    projectSlug: string;
    /**
     * The current state of the pipeline.
     */
    state: State;
    /**
     * A summary of the trigger.
     */
    trigger: Trigger;
    triggerParameters?: { [k: string]: Four | string | number | boolean } | undefined;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * VCS information for the pipeline.
     */
    vcs?: Vcs | undefined;
};

export type GetPipelineByIdResponse = GetPipelineByIdResponseBody | GetPipelineByIdPipeline;

/** @internal */
export const GetPipelineByIdRequest$inboundSchema: z.ZodType<
    GetPipelineByIdRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "pipeline-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "pipeline-id": "pipelineId",
        });
    });

/** @internal */
export type GetPipelineByIdRequest$Outbound = {
    "pipeline-id": string;
};

/** @internal */
export const GetPipelineByIdRequest$outboundSchema: z.ZodType<
    GetPipelineByIdRequest$Outbound,
    z.ZodTypeDef,
    GetPipelineByIdRequest
> = z
    .object({
        pipelineId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pipelineId: "pipeline-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByIdRequest$ {
    /** @deprecated use `GetPipelineByIdRequest$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByIdRequest$inboundSchema;
    /** @deprecated use `GetPipelineByIdRequest$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByIdRequest$outboundSchema;
    /** @deprecated use `GetPipelineByIdRequest$Outbound` instead. */
    export type Outbound = GetPipelineByIdRequest$Outbound;
}

/** @internal */
export const GetPipelineByIdResponseBody$inboundSchema: z.ZodType<
    GetPipelineByIdResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetPipelineByIdResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetPipelineByIdResponseBody$outboundSchema: z.ZodType<
    GetPipelineByIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetPipelineByIdResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByIdResponseBody$ {
    /** @deprecated use `GetPipelineByIdResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByIdResponseBody$inboundSchema;
    /** @deprecated use `GetPipelineByIdResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByIdResponseBody$outboundSchema;
    /** @deprecated use `GetPipelineByIdResponseBody$Outbound` instead. */
    export type Outbound = GetPipelineByIdResponseBody$Outbound;
}

/** @internal */
export const GetPipelineByIdType$inboundSchema: z.ZodNativeEnum<typeof GetPipelineByIdType> =
    z.nativeEnum(GetPipelineByIdType);

/** @internal */
export const GetPipelineByIdType$outboundSchema: z.ZodNativeEnum<typeof GetPipelineByIdType> =
    GetPipelineByIdType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByIdType$ {
    /** @deprecated use `GetPipelineByIdType$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByIdType$inboundSchema;
    /** @deprecated use `GetPipelineByIdType$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByIdType$outboundSchema;
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z.object({
    message: z.string(),
    type: GetPipelineByIdType$inboundSchema,
});

/** @internal */
export type Errors$Outbound = {
    message: string;
    type: string;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<Errors$Outbound, z.ZodTypeDef, Errors> = z.object({
    message: z.string(),
    type: GetPipelineByIdType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
    /** @deprecated use `Errors$inboundSchema` instead. */
    export const inboundSchema = Errors$inboundSchema;
    /** @deprecated use `Errors$outboundSchema` instead. */
    export const outboundSchema = Errors$outboundSchema;
    /** @deprecated use `Errors$Outbound` instead. */
    export type Outbound = Errors$Outbound;
}

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(State);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> = State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
    /** @deprecated use `State$inboundSchema` instead. */
    export const inboundSchema = State$inboundSchema;
    /** @deprecated use `State$outboundSchema` instead. */
    export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const Actor$inboundSchema: z.ZodType<Actor, z.ZodTypeDef, unknown> = z
    .object({
        avatar_url: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatar_url: "avatarUrl",
        });
    });

/** @internal */
export type Actor$Outbound = {
    avatar_url: string;
    login: string;
};

/** @internal */
export const Actor$outboundSchema: z.ZodType<Actor$Outbound, z.ZodTypeDef, Actor> = z
    .object({
        avatarUrl: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatarUrl: "avatar_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actor$ {
    /** @deprecated use `Actor$inboundSchema` instead. */
    export const inboundSchema = Actor$inboundSchema;
    /** @deprecated use `Actor$outboundSchema` instead. */
    export const outboundSchema = Actor$outboundSchema;
    /** @deprecated use `Actor$Outbound` instead. */
    export type Outbound = Actor$Outbound;
}

/** @internal */
export const GetPipelineByIdPipelineType$inboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByIdPipelineType
> = z.nativeEnum(GetPipelineByIdPipelineType);

/** @internal */
export const GetPipelineByIdPipelineType$outboundSchema: z.ZodNativeEnum<
    typeof GetPipelineByIdPipelineType
> = GetPipelineByIdPipelineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByIdPipelineType$ {
    /** @deprecated use `GetPipelineByIdPipelineType$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByIdPipelineType$inboundSchema;
    /** @deprecated use `GetPipelineByIdPipelineType$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByIdPipelineType$outboundSchema;
}

/** @internal */
export const Trigger$inboundSchema: z.ZodType<Trigger, z.ZodTypeDef, unknown> = z
    .object({
        actor: z.lazy(() => Actor$inboundSchema),
        received_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        type: GetPipelineByIdPipelineType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            received_at: "receivedAt",
        });
    });

/** @internal */
export type Trigger$Outbound = {
    actor: Actor$Outbound;
    received_at: string;
    type: string;
};

/** @internal */
export const Trigger$outboundSchema: z.ZodType<Trigger$Outbound, z.ZodTypeDef, Trigger> = z
    .object({
        actor: z.lazy(() => Actor$outboundSchema),
        receivedAt: z.date().transform((v) => v.toISOString()),
        type: GetPipelineByIdPipelineType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            receivedAt: "received_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trigger$ {
    /** @deprecated use `Trigger$inboundSchema` instead. */
    export const inboundSchema = Trigger$inboundSchema;
    /** @deprecated use `Trigger$outboundSchema` instead. */
    export const outboundSchema = Trigger$outboundSchema;
    /** @deprecated use `Trigger$Outbound` instead. */
    export type Outbound = Trigger$Outbound;
}

/** @internal */
export const Four$inboundSchema: z.ZodType<Four, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Four$Outbound = {};

/** @internal */
export const Four$outboundSchema: z.ZodType<Four$Outbound, z.ZodTypeDef, Four> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Four$ {
    /** @deprecated use `Four$inboundSchema` instead. */
    export const inboundSchema = Four$inboundSchema;
    /** @deprecated use `Four$outboundSchema` instead. */
    export const outboundSchema = Four$outboundSchema;
    /** @deprecated use `Four$Outbound` instead. */
    export type Outbound = Four$Outbound;
}

/** @internal */
export const TriggerParameters$inboundSchema: z.ZodType<TriggerParameters, z.ZodTypeDef, unknown> =
    z.union([z.lazy(() => Four$inboundSchema), z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type TriggerParameters$Outbound = Four$Outbound | string | number | boolean;

/** @internal */
export const TriggerParameters$outboundSchema: z.ZodType<
    TriggerParameters$Outbound,
    z.ZodTypeDef,
    TriggerParameters
> = z.union([z.lazy(() => Four$outboundSchema), z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TriggerParameters$ {
    /** @deprecated use `TriggerParameters$inboundSchema` instead. */
    export const inboundSchema = TriggerParameters$inboundSchema;
    /** @deprecated use `TriggerParameters$outboundSchema` instead. */
    export const outboundSchema = TriggerParameters$outboundSchema;
    /** @deprecated use `TriggerParameters$Outbound` instead. */
    export type Outbound = TriggerParameters$Outbound;
}

/** @internal */
export const Commit$inboundSchema: z.ZodType<Commit, z.ZodTypeDef, unknown> = z.object({
    body: z.string(),
    subject: z.string(),
});

/** @internal */
export type Commit$Outbound = {
    body: string;
    subject: string;
};

/** @internal */
export const Commit$outboundSchema: z.ZodType<Commit$Outbound, z.ZodTypeDef, Commit> = z.object({
    body: z.string(),
    subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Commit$ {
    /** @deprecated use `Commit$inboundSchema` instead. */
    export const inboundSchema = Commit$inboundSchema;
    /** @deprecated use `Commit$outboundSchema` instead. */
    export const outboundSchema = Commit$outboundSchema;
    /** @deprecated use `Commit$Outbound` instead. */
    export type Outbound = Commit$Outbound;
}

/** @internal */
export const Vcs$inboundSchema: z.ZodType<Vcs, z.ZodTypeDef, unknown> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => Commit$inboundSchema).optional(),
        origin_repository_url: z.string(),
        provider_name: z.string(),
        review_id: z.string().optional(),
        review_url: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        target_repository_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            origin_repository_url: "originRepositoryUrl",
            provider_name: "providerName",
            review_id: "reviewId",
            review_url: "reviewUrl",
            target_repository_url: "targetRepositoryUrl",
        });
    });

/** @internal */
export type Vcs$Outbound = {
    branch?: string | undefined;
    commit?: Commit$Outbound | undefined;
    origin_repository_url: string;
    provider_name: string;
    review_id?: string | undefined;
    review_url?: string | undefined;
    revision: string;
    tag?: string | undefined;
    target_repository_url: string;
};

/** @internal */
export const Vcs$outboundSchema: z.ZodType<Vcs$Outbound, z.ZodTypeDef, Vcs> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => Commit$outboundSchema).optional(),
        originRepositoryUrl: z.string(),
        providerName: z.string(),
        reviewId: z.string().optional(),
        reviewUrl: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        targetRepositoryUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            originRepositoryUrl: "origin_repository_url",
            providerName: "provider_name",
            reviewId: "review_id",
            reviewUrl: "review_url",
            targetRepositoryUrl: "target_repository_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vcs$ {
    /** @deprecated use `Vcs$inboundSchema` instead. */
    export const inboundSchema = Vcs$inboundSchema;
    /** @deprecated use `Vcs$outboundSchema` instead. */
    export const outboundSchema = Vcs$outboundSchema;
    /** @deprecated use `Vcs$Outbound` instead. */
    export type Outbound = Vcs$Outbound;
}

/** @internal */
export const GetPipelineByIdPipeline$inboundSchema: z.ZodType<
    GetPipelineByIdPipeline,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        errors: z.array(z.lazy(() => Errors$inboundSchema)),
        id: z.string(),
        number: z.number().int(),
        project_slug: z.string(),
        state: State$inboundSchema,
        trigger: z.lazy(() => Trigger$inboundSchema),
        trigger_parameters: z
            .record(
                z.union([
                    z.lazy(() => Four$inboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        vcs: z.lazy(() => Vcs$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            project_slug: "projectSlug",
            trigger_parameters: "triggerParameters",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type GetPipelineByIdPipeline$Outbound = {
    created_at: string;
    errors: Array<Errors$Outbound>;
    id: string;
    number: number;
    project_slug: string;
    state: string;
    trigger: Trigger$Outbound;
    trigger_parameters?: { [k: string]: Four$Outbound | string | number | boolean } | undefined;
    updated_at?: string | undefined;
    vcs?: Vcs$Outbound | undefined;
};

/** @internal */
export const GetPipelineByIdPipeline$outboundSchema: z.ZodType<
    GetPipelineByIdPipeline$Outbound,
    z.ZodTypeDef,
    GetPipelineByIdPipeline
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        errors: z.array(z.lazy(() => Errors$outboundSchema)),
        id: z.string(),
        number: z.number().int(),
        projectSlug: z.string(),
        state: State$outboundSchema,
        trigger: z.lazy(() => Trigger$outboundSchema),
        triggerParameters: z
            .record(
                z.union([
                    z.lazy(() => Four$outboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        vcs: z.lazy(() => Vcs$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            projectSlug: "project_slug",
            triggerParameters: "trigger_parameters",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByIdPipeline$ {
    /** @deprecated use `GetPipelineByIdPipeline$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByIdPipeline$inboundSchema;
    /** @deprecated use `GetPipelineByIdPipeline$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByIdPipeline$outboundSchema;
    /** @deprecated use `GetPipelineByIdPipeline$Outbound` instead. */
    export type Outbound = GetPipelineByIdPipeline$Outbound;
}

/** @internal */
export const GetPipelineByIdResponse$inboundSchema: z.ZodType<
    GetPipelineByIdResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetPipelineByIdResponseBody$inboundSchema),
    z.lazy(() => GetPipelineByIdPipeline$inboundSchema),
]);

/** @internal */
export type GetPipelineByIdResponse$Outbound =
    | GetPipelineByIdResponseBody$Outbound
    | GetPipelineByIdPipeline$Outbound;

/** @internal */
export const GetPipelineByIdResponse$outboundSchema: z.ZodType<
    GetPipelineByIdResponse$Outbound,
    z.ZodTypeDef,
    GetPipelineByIdResponse
> = z.union([
    z.lazy(() => GetPipelineByIdResponseBody$outboundSchema),
    z.lazy(() => GetPipelineByIdPipeline$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPipelineByIdResponse$ {
    /** @deprecated use `GetPipelineByIdResponse$inboundSchema` instead. */
    export const inboundSchema = GetPipelineByIdResponse$inboundSchema;
    /** @deprecated use `GetPipelineByIdResponse$outboundSchema` instead. */
    export const outboundSchema = GetPipelineByIdResponse$outboundSchema;
    /** @deprecated use `GetPipelineByIdResponse$Outbound` instead. */
    export type Outbound = GetPipelineByIdResponse$Outbound;
}
