/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * The information you can supply when rerunning a workflow.
 */
export type RerunWorkflowRerunWorkflowParameters = {
    /**
     * Whether to enable SSH access for the triggering user on the newly-rerun job. Requires the jobs parameter to be used and so is mutually exclusive with the from_failed parameter.
     */
    enableSsh?: boolean | undefined;
    /**
     * Whether to rerun the workflow from the failed job. Mutually exclusive with the jobs parameter.
     */
    fromFailed?: boolean | undefined;
    /**
     * A list of job IDs to rerun.
     */
    jobs?: Array<string> | undefined;
    /**
     * Completes rerun using sparse trees logic, an optimization for workflows that have disconnected subgraphs. Requires jobs parameter and so is mutually exclusive with the from_failed parameter.
     */
    sparseTree?: boolean | undefined;
};

export type RerunWorkflowRequest = {
    requestBody?: RerunWorkflowRerunWorkflowParameters | undefined;
    /**
     * The unique ID of the workflow.
     */
    id: string;
};

/**
 * Error response.
 */
export type RerunWorkflowWorkflowResponseBody = {
    message?: string | undefined;
};

/**
 * A response to rerunning a workflow
 */
export type RerunWorkflowResponseBody = {
    /**
     * The ID of the newly-created workflow.
     */
    workflowId: string;
};

export type RerunWorkflowResponse = RerunWorkflowResponseBody | RerunWorkflowWorkflowResponseBody;

/** @internal */
export const RerunWorkflowRerunWorkflowParameters$inboundSchema: z.ZodType<
    RerunWorkflowRerunWorkflowParameters,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        enable_ssh: z.boolean().optional(),
        from_failed: z.boolean().optional(),
        jobs: z.array(z.string()).optional(),
        sparse_tree: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            enable_ssh: "enableSsh",
            from_failed: "fromFailed",
            sparse_tree: "sparseTree",
        });
    });

/** @internal */
export type RerunWorkflowRerunWorkflowParameters$Outbound = {
    enable_ssh?: boolean | undefined;
    from_failed?: boolean | undefined;
    jobs?: Array<string> | undefined;
    sparse_tree?: boolean | undefined;
};

/** @internal */
export const RerunWorkflowRerunWorkflowParameters$outboundSchema: z.ZodType<
    RerunWorkflowRerunWorkflowParameters$Outbound,
    z.ZodTypeDef,
    RerunWorkflowRerunWorkflowParameters
> = z
    .object({
        enableSsh: z.boolean().optional(),
        fromFailed: z.boolean().optional(),
        jobs: z.array(z.string()).optional(),
        sparseTree: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            enableSsh: "enable_ssh",
            fromFailed: "from_failed",
            sparseTree: "sparse_tree",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerunWorkflowRerunWorkflowParameters$ {
    /** @deprecated use `RerunWorkflowRerunWorkflowParameters$inboundSchema` instead. */
    export const inboundSchema = RerunWorkflowRerunWorkflowParameters$inboundSchema;
    /** @deprecated use `RerunWorkflowRerunWorkflowParameters$outboundSchema` instead. */
    export const outboundSchema = RerunWorkflowRerunWorkflowParameters$outboundSchema;
    /** @deprecated use `RerunWorkflowRerunWorkflowParameters$Outbound` instead. */
    export type Outbound = RerunWorkflowRerunWorkflowParameters$Outbound;
}

/** @internal */
export const RerunWorkflowRequest$inboundSchema: z.ZodType<
    RerunWorkflowRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => RerunWorkflowRerunWorkflowParameters$inboundSchema).optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type RerunWorkflowRequest$Outbound = {
    RequestBody?: RerunWorkflowRerunWorkflowParameters$Outbound | undefined;
    id: string;
};

/** @internal */
export const RerunWorkflowRequest$outboundSchema: z.ZodType<
    RerunWorkflowRequest$Outbound,
    z.ZodTypeDef,
    RerunWorkflowRequest
> = z
    .object({
        requestBody: z.lazy(() => RerunWorkflowRerunWorkflowParameters$outboundSchema).optional(),
        id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerunWorkflowRequest$ {
    /** @deprecated use `RerunWorkflowRequest$inboundSchema` instead. */
    export const inboundSchema = RerunWorkflowRequest$inboundSchema;
    /** @deprecated use `RerunWorkflowRequest$outboundSchema` instead. */
    export const outboundSchema = RerunWorkflowRequest$outboundSchema;
    /** @deprecated use `RerunWorkflowRequest$Outbound` instead. */
    export type Outbound = RerunWorkflowRequest$Outbound;
}

/** @internal */
export const RerunWorkflowWorkflowResponseBody$inboundSchema: z.ZodType<
    RerunWorkflowWorkflowResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type RerunWorkflowWorkflowResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const RerunWorkflowWorkflowResponseBody$outboundSchema: z.ZodType<
    RerunWorkflowWorkflowResponseBody$Outbound,
    z.ZodTypeDef,
    RerunWorkflowWorkflowResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerunWorkflowWorkflowResponseBody$ {
    /** @deprecated use `RerunWorkflowWorkflowResponseBody$inboundSchema` instead. */
    export const inboundSchema = RerunWorkflowWorkflowResponseBody$inboundSchema;
    /** @deprecated use `RerunWorkflowWorkflowResponseBody$outboundSchema` instead. */
    export const outboundSchema = RerunWorkflowWorkflowResponseBody$outboundSchema;
    /** @deprecated use `RerunWorkflowWorkflowResponseBody$Outbound` instead. */
    export type Outbound = RerunWorkflowWorkflowResponseBody$Outbound;
}

/** @internal */
export const RerunWorkflowResponseBody$inboundSchema: z.ZodType<
    RerunWorkflowResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        workflow_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_id: "workflowId",
        });
    });

/** @internal */
export type RerunWorkflowResponseBody$Outbound = {
    workflow_id: string;
};

/** @internal */
export const RerunWorkflowResponseBody$outboundSchema: z.ZodType<
    RerunWorkflowResponseBody$Outbound,
    z.ZodTypeDef,
    RerunWorkflowResponseBody
> = z
    .object({
        workflowId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowId: "workflow_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerunWorkflowResponseBody$ {
    /** @deprecated use `RerunWorkflowResponseBody$inboundSchema` instead. */
    export const inboundSchema = RerunWorkflowResponseBody$inboundSchema;
    /** @deprecated use `RerunWorkflowResponseBody$outboundSchema` instead. */
    export const outboundSchema = RerunWorkflowResponseBody$outboundSchema;
    /** @deprecated use `RerunWorkflowResponseBody$Outbound` instead. */
    export type Outbound = RerunWorkflowResponseBody$Outbound;
}

/** @internal */
export const RerunWorkflowResponse$inboundSchema: z.ZodType<
    RerunWorkflowResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => RerunWorkflowResponseBody$inboundSchema),
    z.lazy(() => RerunWorkflowWorkflowResponseBody$inboundSchema),
]);

/** @internal */
export type RerunWorkflowResponse$Outbound =
    | RerunWorkflowResponseBody$Outbound
    | RerunWorkflowWorkflowResponseBody$Outbound;

/** @internal */
export const RerunWorkflowResponse$outboundSchema: z.ZodType<
    RerunWorkflowResponse$Outbound,
    z.ZodTypeDef,
    RerunWorkflowResponse
> = z.union([
    z.lazy(() => RerunWorkflowResponseBody$outboundSchema),
    z.lazy(() => RerunWorkflowWorkflowResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RerunWorkflowResponse$ {
    /** @deprecated use `RerunWorkflowResponse$inboundSchema` instead. */
    export const inboundSchema = RerunWorkflowResponse$inboundSchema;
    /** @deprecated use `RerunWorkflowResponse$outboundSchema` instead. */
    export const outboundSchema = RerunWorkflowResponse$outboundSchema;
    /** @deprecated use `RerunWorkflowResponse$Outbound` instead. */
    export type Outbound = RerunWorkflowResponse$Outbound;
}
