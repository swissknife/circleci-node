/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetScheduleByIdRequest = {
    /**
     * The unique ID of the schedule.
     */
    scheduleId: string;
};

/**
 * Error response.
 */
export type GetScheduleByIdResponseBody = {
    message?: string | undefined;
};

/**
 * The attribution actor who will run the scheduled pipeline.
 */
export type GetScheduleByIdUser = {
    /**
     * The unique ID of the user.
     */
    id: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
    /**
     * The name of the user.
     */
    name: string;
};

export type GetScheduleByIdParameters = number | string | boolean;

/**
 * Day in a week, in three letters format
 */
export const GetScheduleByIdScheduleDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type GetScheduleByIdScheduleDaysOfWeek = ClosedEnum<
    typeof GetScheduleByIdScheduleDaysOfWeek
>;

/**
 * Month, in three letters format.
 */
export const GetScheduleByIdScheduleMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type GetScheduleByIdScheduleMonths = ClosedEnum<typeof GetScheduleByIdScheduleMonths>;

export type GetScheduleById2 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth: Array<number>;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek?: Array<GetScheduleByIdScheduleDaysOfWeek> | undefined;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<GetScheduleByIdScheduleMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Day in a week, in three letters format
 */
export const GetScheduleByIdDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type GetScheduleByIdDaysOfWeek = ClosedEnum<typeof GetScheduleByIdDaysOfWeek>;

/**
 * Month, in three letters format.
 */
export const GetScheduleByIdMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type GetScheduleByIdMonths = ClosedEnum<typeof GetScheduleByIdMonths>;

export type GetScheduleById1 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth?: Array<number> | undefined;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek: Array<GetScheduleByIdDaysOfWeek>;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<GetScheduleByIdMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Timetable that specifies when a schedule triggers.
 */
export type GetScheduleByIdTimetable = GetScheduleById1 | GetScheduleById2;

/**
 * A schedule response
 */
export type GetScheduleByIdSchedule = {
    /**
     * The attribution actor who will run the scheduled pipeline.
     */
    actor: GetScheduleByIdUser;
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * Description of the schedule.
     */
    description: string;
    /**
     * The unique ID of the schedule.
     */
    id: string;
    /**
     * Name of the schedule.
     */
    name: string;
    /**
     * Pipeline parameters represented as key-value pairs. Must contain branch or tag.
     */
    parameters: { [k: string]: number | string | boolean };
    /**
     * The project-slug for the schedule
     */
    projectSlug: string;
    /**
     * Timetable that specifies when a schedule triggers.
     */
    timetable: GetScheduleById1 | GetScheduleById2;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt: Date;
};

export type GetScheduleByIdResponse = GetScheduleByIdResponseBody | GetScheduleByIdSchedule;

/** @internal */
export const GetScheduleByIdRequest$inboundSchema: z.ZodType<
    GetScheduleByIdRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "schedule-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "schedule-id": "scheduleId",
        });
    });

/** @internal */
export type GetScheduleByIdRequest$Outbound = {
    "schedule-id": string;
};

/** @internal */
export const GetScheduleByIdRequest$outboundSchema: z.ZodType<
    GetScheduleByIdRequest$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdRequest
> = z
    .object({
        scheduleId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            scheduleId: "schedule-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdRequest$ {
    /** @deprecated use `GetScheduleByIdRequest$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdRequest$inboundSchema;
    /** @deprecated use `GetScheduleByIdRequest$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdRequest$outboundSchema;
    /** @deprecated use `GetScheduleByIdRequest$Outbound` instead. */
    export type Outbound = GetScheduleByIdRequest$Outbound;
}

/** @internal */
export const GetScheduleByIdResponseBody$inboundSchema: z.ZodType<
    GetScheduleByIdResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetScheduleByIdResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetScheduleByIdResponseBody$outboundSchema: z.ZodType<
    GetScheduleByIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdResponseBody$ {
    /** @deprecated use `GetScheduleByIdResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdResponseBody$inboundSchema;
    /** @deprecated use `GetScheduleByIdResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdResponseBody$outboundSchema;
    /** @deprecated use `GetScheduleByIdResponseBody$Outbound` instead. */
    export type Outbound = GetScheduleByIdResponseBody$Outbound;
}

/** @internal */
export const GetScheduleByIdUser$inboundSchema: z.ZodType<
    GetScheduleByIdUser,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/** @internal */
export type GetScheduleByIdUser$Outbound = {
    id: string;
    login: string;
    name: string;
};

/** @internal */
export const GetScheduleByIdUser$outboundSchema: z.ZodType<
    GetScheduleByIdUser$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdUser
> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdUser$ {
    /** @deprecated use `GetScheduleByIdUser$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdUser$inboundSchema;
    /** @deprecated use `GetScheduleByIdUser$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdUser$outboundSchema;
    /** @deprecated use `GetScheduleByIdUser$Outbound` instead. */
    export type Outbound = GetScheduleByIdUser$Outbound;
}

/** @internal */
export const GetScheduleByIdParameters$inboundSchema: z.ZodType<
    GetScheduleByIdParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type GetScheduleByIdParameters$Outbound = number | string | boolean;

/** @internal */
export const GetScheduleByIdParameters$outboundSchema: z.ZodType<
    GetScheduleByIdParameters$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdParameters$ {
    /** @deprecated use `GetScheduleByIdParameters$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdParameters$inboundSchema;
    /** @deprecated use `GetScheduleByIdParameters$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdParameters$outboundSchema;
    /** @deprecated use `GetScheduleByIdParameters$Outbound` instead. */
    export type Outbound = GetScheduleByIdParameters$Outbound;
}

/** @internal */
export const GetScheduleByIdScheduleDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof GetScheduleByIdScheduleDaysOfWeek
> = z.nativeEnum(GetScheduleByIdScheduleDaysOfWeek);

/** @internal */
export const GetScheduleByIdScheduleDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof GetScheduleByIdScheduleDaysOfWeek
> = GetScheduleByIdScheduleDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdScheduleDaysOfWeek$ {
    /** @deprecated use `GetScheduleByIdScheduleDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdScheduleDaysOfWeek$inboundSchema;
    /** @deprecated use `GetScheduleByIdScheduleDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdScheduleDaysOfWeek$outboundSchema;
}

/** @internal */
export const GetScheduleByIdScheduleMonths$inboundSchema: z.ZodNativeEnum<
    typeof GetScheduleByIdScheduleMonths
> = z.nativeEnum(GetScheduleByIdScheduleMonths);

/** @internal */
export const GetScheduleByIdScheduleMonths$outboundSchema: z.ZodNativeEnum<
    typeof GetScheduleByIdScheduleMonths
> = GetScheduleByIdScheduleMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdScheduleMonths$ {
    /** @deprecated use `GetScheduleByIdScheduleMonths$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdScheduleMonths$inboundSchema;
    /** @deprecated use `GetScheduleByIdScheduleMonths$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdScheduleMonths$outboundSchema;
}

/** @internal */
export const GetScheduleById2$inboundSchema: z.ZodType<GetScheduleById2, z.ZodTypeDef, unknown> = z
    .object({
        "days-of-month": z.array(z.number().int()),
        "days-of-week": z.array(GetScheduleByIdScheduleDaysOfWeek$inboundSchema).optional(),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(GetScheduleByIdScheduleMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type GetScheduleById2$Outbound = {
    "days-of-month": Array<number>;
    "days-of-week"?: Array<string> | undefined;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const GetScheduleById2$outboundSchema: z.ZodType<
    GetScheduleById2$Outbound,
    z.ZodTypeDef,
    GetScheduleById2
> = z
    .object({
        daysOfMonth: z.array(z.number().int()),
        daysOfWeek: z.array(GetScheduleByIdScheduleDaysOfWeek$outboundSchema).optional(),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(GetScheduleByIdScheduleMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleById2$ {
    /** @deprecated use `GetScheduleById2$inboundSchema` instead. */
    export const inboundSchema = GetScheduleById2$inboundSchema;
    /** @deprecated use `GetScheduleById2$outboundSchema` instead. */
    export const outboundSchema = GetScheduleById2$outboundSchema;
    /** @deprecated use `GetScheduleById2$Outbound` instead. */
    export type Outbound = GetScheduleById2$Outbound;
}

/** @internal */
export const GetScheduleByIdDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof GetScheduleByIdDaysOfWeek
> = z.nativeEnum(GetScheduleByIdDaysOfWeek);

/** @internal */
export const GetScheduleByIdDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof GetScheduleByIdDaysOfWeek
> = GetScheduleByIdDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdDaysOfWeek$ {
    /** @deprecated use `GetScheduleByIdDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdDaysOfWeek$inboundSchema;
    /** @deprecated use `GetScheduleByIdDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdDaysOfWeek$outboundSchema;
}

/** @internal */
export const GetScheduleByIdMonths$inboundSchema: z.ZodNativeEnum<typeof GetScheduleByIdMonths> =
    z.nativeEnum(GetScheduleByIdMonths);

/** @internal */
export const GetScheduleByIdMonths$outboundSchema: z.ZodNativeEnum<typeof GetScheduleByIdMonths> =
    GetScheduleByIdMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdMonths$ {
    /** @deprecated use `GetScheduleByIdMonths$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdMonths$inboundSchema;
    /** @deprecated use `GetScheduleByIdMonths$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdMonths$outboundSchema;
}

/** @internal */
export const GetScheduleById1$inboundSchema: z.ZodType<GetScheduleById1, z.ZodTypeDef, unknown> = z
    .object({
        "days-of-month": z.array(z.number().int()).optional(),
        "days-of-week": z.array(GetScheduleByIdDaysOfWeek$inboundSchema),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(GetScheduleByIdMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type GetScheduleById1$Outbound = {
    "days-of-month"?: Array<number> | undefined;
    "days-of-week": Array<string>;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const GetScheduleById1$outboundSchema: z.ZodType<
    GetScheduleById1$Outbound,
    z.ZodTypeDef,
    GetScheduleById1
> = z
    .object({
        daysOfMonth: z.array(z.number().int()).optional(),
        daysOfWeek: z.array(GetScheduleByIdDaysOfWeek$outboundSchema),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(GetScheduleByIdMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleById1$ {
    /** @deprecated use `GetScheduleById1$inboundSchema` instead. */
    export const inboundSchema = GetScheduleById1$inboundSchema;
    /** @deprecated use `GetScheduleById1$outboundSchema` instead. */
    export const outboundSchema = GetScheduleById1$outboundSchema;
    /** @deprecated use `GetScheduleById1$Outbound` instead. */
    export type Outbound = GetScheduleById1$Outbound;
}

/** @internal */
export const GetScheduleByIdTimetable$inboundSchema: z.ZodType<
    GetScheduleByIdTimetable,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetScheduleById1$inboundSchema),
    z.lazy(() => GetScheduleById2$inboundSchema),
]);

/** @internal */
export type GetScheduleByIdTimetable$Outbound =
    | GetScheduleById1$Outbound
    | GetScheduleById2$Outbound;

/** @internal */
export const GetScheduleByIdTimetable$outboundSchema: z.ZodType<
    GetScheduleByIdTimetable$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdTimetable
> = z.union([
    z.lazy(() => GetScheduleById1$outboundSchema),
    z.lazy(() => GetScheduleById2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdTimetable$ {
    /** @deprecated use `GetScheduleByIdTimetable$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdTimetable$inboundSchema;
    /** @deprecated use `GetScheduleByIdTimetable$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdTimetable$outboundSchema;
    /** @deprecated use `GetScheduleByIdTimetable$Outbound` instead. */
    export type Outbound = GetScheduleByIdTimetable$Outbound;
}

/** @internal */
export const GetScheduleByIdSchedule$inboundSchema: z.ZodType<
    GetScheduleByIdSchedule,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        actor: z.lazy(() => GetScheduleByIdUser$inboundSchema),
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        "project-slug": z.string(),
        timetable: z.union([
            z.lazy(() => GetScheduleById1$inboundSchema),
            z.lazy(() => GetScheduleById2$inboundSchema),
        ]),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "project-slug": "projectSlug",
            "updated-at": "updatedAt",
        });
    });

/** @internal */
export type GetScheduleByIdSchedule$Outbound = {
    actor: GetScheduleByIdUser$Outbound;
    "created-at": string;
    description: string;
    id: string;
    name: string;
    parameters: { [k: string]: number | string | boolean };
    "project-slug": string;
    timetable: GetScheduleById1$Outbound | GetScheduleById2$Outbound;
    "updated-at": string;
};

/** @internal */
export const GetScheduleByIdSchedule$outboundSchema: z.ZodType<
    GetScheduleByIdSchedule$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdSchedule
> = z
    .object({
        actor: z.lazy(() => GetScheduleByIdUser$outboundSchema),
        createdAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        projectSlug: z.string(),
        timetable: z.union([
            z.lazy(() => GetScheduleById1$outboundSchema),
            z.lazy(() => GetScheduleById2$outboundSchema),
        ]),
        updatedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            projectSlug: "project-slug",
            updatedAt: "updated-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdSchedule$ {
    /** @deprecated use `GetScheduleByIdSchedule$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdSchedule$inboundSchema;
    /** @deprecated use `GetScheduleByIdSchedule$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdSchedule$outboundSchema;
    /** @deprecated use `GetScheduleByIdSchedule$Outbound` instead. */
    export type Outbound = GetScheduleByIdSchedule$Outbound;
}

/** @internal */
export const GetScheduleByIdResponse$inboundSchema: z.ZodType<
    GetScheduleByIdResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetScheduleByIdResponseBody$inboundSchema),
    z.lazy(() => GetScheduleByIdSchedule$inboundSchema),
]);

/** @internal */
export type GetScheduleByIdResponse$Outbound =
    | GetScheduleByIdResponseBody$Outbound
    | GetScheduleByIdSchedule$Outbound;

/** @internal */
export const GetScheduleByIdResponse$outboundSchema: z.ZodType<
    GetScheduleByIdResponse$Outbound,
    z.ZodTypeDef,
    GetScheduleByIdResponse
> = z.union([
    z.lazy(() => GetScheduleByIdResponseBody$outboundSchema),
    z.lazy(() => GetScheduleByIdSchedule$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetScheduleByIdResponse$ {
    /** @deprecated use `GetScheduleByIdResponse$inboundSchema` instead. */
    export const inboundSchema = GetScheduleByIdResponse$inboundSchema;
    /** @deprecated use `GetScheduleByIdResponse$outboundSchema` instead. */
    export const outboundSchema = GetScheduleByIdResponse$outboundSchema;
    /** @deprecated use `GetScheduleByIdResponse$Outbound` instead. */
    export type Outbound = GetScheduleByIdResponse$Outbound;
}
