/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ListEnvironmentVariablesFromContextRequest = {
    /**
     * ID of the context (UUID)
     */
    contextId: string;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
};

/**
 * Error response.
 */
export type ListEnvironmentVariablesFromContextContextResponseBody = {
    message?: string | undefined;
};

export type Items = {
    /**
     * ID of the context (UUID)
     */
    contextId: string;
    /**
     * The date and time the environment variable was created.
     */
    createdAt: Date;
    /**
     * The date and time the environment variable was updated
     */
    updatedAt: Date;
    /**
     * The name of the environment variable
     */
    variable: string;
};

/**
 * A paginated list of environment variables
 */
export type ListEnvironmentVariablesFromContextResponseBody = {
    items: Array<Items>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListEnvironmentVariablesFromContextResponse =
    | ListEnvironmentVariablesFromContextContextResponseBody
    | ListEnvironmentVariablesFromContextResponseBody;

/** @internal */
export const ListEnvironmentVariablesFromContextRequest$inboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "context-id": z.string(),
        "page-token": z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "context-id": "contextId",
            "page-token": "pageToken",
        });
    });

/** @internal */
export type ListEnvironmentVariablesFromContextRequest$Outbound = {
    "context-id": string;
    "page-token"?: string | undefined;
};

/** @internal */
export const ListEnvironmentVariablesFromContextRequest$outboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextRequest$Outbound,
    z.ZodTypeDef,
    ListEnvironmentVariablesFromContextRequest
> = z
    .object({
        contextId: z.string(),
        pageToken: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contextId: "context-id",
            pageToken: "page-token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvironmentVariablesFromContextRequest$ {
    /** @deprecated use `ListEnvironmentVariablesFromContextRequest$inboundSchema` instead. */
    export const inboundSchema = ListEnvironmentVariablesFromContextRequest$inboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextRequest$outboundSchema` instead. */
    export const outboundSchema = ListEnvironmentVariablesFromContextRequest$outboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextRequest$Outbound` instead. */
    export type Outbound = ListEnvironmentVariablesFromContextRequest$Outbound;
}

/** @internal */
export const ListEnvironmentVariablesFromContextContextResponseBody$inboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListEnvironmentVariablesFromContextContextResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListEnvironmentVariablesFromContextContextResponseBody$outboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextContextResponseBody$Outbound,
    z.ZodTypeDef,
    ListEnvironmentVariablesFromContextContextResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvironmentVariablesFromContextContextResponseBody$ {
    /** @deprecated use `ListEnvironmentVariablesFromContextContextResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        ListEnvironmentVariablesFromContextContextResponseBody$inboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextContextResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        ListEnvironmentVariablesFromContextContextResponseBody$outboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextContextResponseBody$Outbound` instead. */
    export type Outbound = ListEnvironmentVariablesFromContextContextResponseBody$Outbound;
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
    .object({
        context_id: z.string(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        variable: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            context_id: "contextId",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type Items$Outbound = {
    context_id: string;
    created_at: string;
    updated_at: string;
    variable: string;
};

/** @internal */
export const Items$outboundSchema: z.ZodType<Items$Outbound, z.ZodTypeDef, Items> = z
    .object({
        contextId: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
        variable: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            contextId: "context_id",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
    /** @deprecated use `Items$inboundSchema` instead. */
    export const inboundSchema = Items$inboundSchema;
    /** @deprecated use `Items$outboundSchema` instead. */
    export const outboundSchema = Items$outboundSchema;
    /** @deprecated use `Items$Outbound` instead. */
    export type Outbound = Items$Outbound;
}

/** @internal */
export const ListEnvironmentVariablesFromContextResponseBody$inboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Items$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListEnvironmentVariablesFromContextResponseBody$Outbound = {
    items: Array<Items$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListEnvironmentVariablesFromContextResponseBody$outboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextResponseBody$Outbound,
    z.ZodTypeDef,
    ListEnvironmentVariablesFromContextResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => Items$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvironmentVariablesFromContextResponseBody$ {
    /** @deprecated use `ListEnvironmentVariablesFromContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListEnvironmentVariablesFromContextResponseBody$inboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListEnvironmentVariablesFromContextResponseBody$outboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextResponseBody$Outbound` instead. */
    export type Outbound = ListEnvironmentVariablesFromContextResponseBody$Outbound;
}

/** @internal */
export const ListEnvironmentVariablesFromContextResponse$inboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListEnvironmentVariablesFromContextContextResponseBody$inboundSchema),
    z.lazy(() => ListEnvironmentVariablesFromContextResponseBody$inboundSchema),
]);

/** @internal */
export type ListEnvironmentVariablesFromContextResponse$Outbound =
    | ListEnvironmentVariablesFromContextContextResponseBody$Outbound
    | ListEnvironmentVariablesFromContextResponseBody$Outbound;

/** @internal */
export const ListEnvironmentVariablesFromContextResponse$outboundSchema: z.ZodType<
    ListEnvironmentVariablesFromContextResponse$Outbound,
    z.ZodTypeDef,
    ListEnvironmentVariablesFromContextResponse
> = z.union([
    z.lazy(() => ListEnvironmentVariablesFromContextContextResponseBody$outboundSchema),
    z.lazy(() => ListEnvironmentVariablesFromContextResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvironmentVariablesFromContextResponse$ {
    /** @deprecated use `ListEnvironmentVariablesFromContextResponse$inboundSchema` instead. */
    export const inboundSchema = ListEnvironmentVariablesFromContextResponse$inboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextResponse$outboundSchema` instead. */
    export const outboundSchema = ListEnvironmentVariablesFromContextResponse$outboundSchema;
    /** @deprecated use `ListEnvironmentVariablesFromContextResponse$Outbound` instead. */
    export type Outbound = ListEnvironmentVariablesFromContextResponse$Outbound;
}
