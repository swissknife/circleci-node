/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Type of the scope being used
 */
export const ScopeType = {
    Project: "project",
} as const;
/**
 * Type of the scope being used
 */
export type ScopeType = ClosedEnum<typeof ScopeType>;

export type GetWebhooksRequest = {
    /**
     * ID of the scope being used (at the moment, only project ID is supported)
     */
    scopeId: string;
    /**
     * Type of the scope being used
     */
    scopeType: ScopeType;
};

/**
 * Error response.
 */
export type GetWebhooksWebhookResponseBody = {
    message?: string | undefined;
};

export const GetWebhooksEvents = {
    WorkflowCompleted: "workflow-completed",
    JobCompleted: "job-completed",
} as const;
export type GetWebhooksEvents = ClosedEnum<typeof GetWebhooksEvents>;

/**
 * The scope in which the relevant events that will trigger webhooks
 */
export type GetWebhooksScope = {
    /**
     * ID of the scope being used (at the moment, only project ID is supported)
     */
    id: string;
    /**
     * Type of the scope being used
     */
    type: string;
};

export type Webhook = {
    /**
     * The date and time the webhook was created.
     */
    createdAt: Date;
    /**
     * Events that will trigger the webhook
     */
    events: Array<GetWebhooksEvents>;
    /**
     * The unique ID of the webhook
     */
    id: string;
    /**
     * Name of the webhook
     */
    name: string;
    /**
     * The scope in which the relevant events that will trigger webhooks
     */
    scope: GetWebhooksScope;
    /**
     * Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request
     */
    signingSecret: string;
    /**
     * The date and time the webhook was last updated.
     */
    updatedAt: Date;
    /**
     * URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
     */
    url: string;
    /**
     * Whether to enforce TLS certificate verification when delivering the webhook
     */
    verifyTls: boolean;
};

/**
 * A list of webhooks
 */
export type GetWebhooksResponseBody = {
    items: Array<Webhook>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type GetWebhooksResponse = GetWebhooksWebhookResponseBody | GetWebhooksResponseBody;

/** @internal */
export const ScopeType$inboundSchema: z.ZodNativeEnum<typeof ScopeType> = z.nativeEnum(ScopeType);

/** @internal */
export const ScopeType$outboundSchema: z.ZodNativeEnum<typeof ScopeType> = ScopeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScopeType$ {
    /** @deprecated use `ScopeType$inboundSchema` instead. */
    export const inboundSchema = ScopeType$inboundSchema;
    /** @deprecated use `ScopeType$outboundSchema` instead. */
    export const outboundSchema = ScopeType$outboundSchema;
}

/** @internal */
export const GetWebhooksRequest$inboundSchema: z.ZodType<
    GetWebhooksRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "scope-id": z.string(),
        "scope-type": ScopeType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "scope-id": "scopeId",
            "scope-type": "scopeType",
        });
    });

/** @internal */
export type GetWebhooksRequest$Outbound = {
    "scope-id": string;
    "scope-type": string;
};

/** @internal */
export const GetWebhooksRequest$outboundSchema: z.ZodType<
    GetWebhooksRequest$Outbound,
    z.ZodTypeDef,
    GetWebhooksRequest
> = z
    .object({
        scopeId: z.string(),
        scopeType: ScopeType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            scopeId: "scope-id",
            scopeType: "scope-type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhooksRequest$ {
    /** @deprecated use `GetWebhooksRequest$inboundSchema` instead. */
    export const inboundSchema = GetWebhooksRequest$inboundSchema;
    /** @deprecated use `GetWebhooksRequest$outboundSchema` instead. */
    export const outboundSchema = GetWebhooksRequest$outboundSchema;
    /** @deprecated use `GetWebhooksRequest$Outbound` instead. */
    export type Outbound = GetWebhooksRequest$Outbound;
}

/** @internal */
export const GetWebhooksWebhookResponseBody$inboundSchema: z.ZodType<
    GetWebhooksWebhookResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetWebhooksWebhookResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetWebhooksWebhookResponseBody$outboundSchema: z.ZodType<
    GetWebhooksWebhookResponseBody$Outbound,
    z.ZodTypeDef,
    GetWebhooksWebhookResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhooksWebhookResponseBody$ {
    /** @deprecated use `GetWebhooksWebhookResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWebhooksWebhookResponseBody$inboundSchema;
    /** @deprecated use `GetWebhooksWebhookResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWebhooksWebhookResponseBody$outboundSchema;
    /** @deprecated use `GetWebhooksWebhookResponseBody$Outbound` instead. */
    export type Outbound = GetWebhooksWebhookResponseBody$Outbound;
}

/** @internal */
export const GetWebhooksEvents$inboundSchema: z.ZodNativeEnum<typeof GetWebhooksEvents> =
    z.nativeEnum(GetWebhooksEvents);

/** @internal */
export const GetWebhooksEvents$outboundSchema: z.ZodNativeEnum<typeof GetWebhooksEvents> =
    GetWebhooksEvents$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhooksEvents$ {
    /** @deprecated use `GetWebhooksEvents$inboundSchema` instead. */
    export const inboundSchema = GetWebhooksEvents$inboundSchema;
    /** @deprecated use `GetWebhooksEvents$outboundSchema` instead. */
    export const outboundSchema = GetWebhooksEvents$outboundSchema;
}

/** @internal */
export const GetWebhooksScope$inboundSchema: z.ZodType<GetWebhooksScope, z.ZodTypeDef, unknown> =
    z.object({
        id: z.string(),
        type: z.string(),
    });

/** @internal */
export type GetWebhooksScope$Outbound = {
    id: string;
    type: string;
};

/** @internal */
export const GetWebhooksScope$outboundSchema: z.ZodType<
    GetWebhooksScope$Outbound,
    z.ZodTypeDef,
    GetWebhooksScope
> = z.object({
    id: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhooksScope$ {
    /** @deprecated use `GetWebhooksScope$inboundSchema` instead. */
    export const inboundSchema = GetWebhooksScope$inboundSchema;
    /** @deprecated use `GetWebhooksScope$outboundSchema` instead. */
    export const outboundSchema = GetWebhooksScope$outboundSchema;
    /** @deprecated use `GetWebhooksScope$Outbound` instead. */
    export type Outbound = GetWebhooksScope$Outbound;
}

/** @internal */
export const Webhook$inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z
    .object({
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        events: z.array(GetWebhooksEvents$inboundSchema),
        id: z.string(),
        name: z.string(),
        scope: z.lazy(() => GetWebhooksScope$inboundSchema),
        "signing-secret": z.string(),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        url: z.string(),
        "verify-tls": z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "signing-secret": "signingSecret",
            "updated-at": "updatedAt",
            "verify-tls": "verifyTls",
        });
    });

/** @internal */
export type Webhook$Outbound = {
    "created-at": string;
    events: Array<string>;
    id: string;
    name: string;
    scope: GetWebhooksScope$Outbound;
    "signing-secret": string;
    "updated-at": string;
    url: string;
    "verify-tls": boolean;
};

/** @internal */
export const Webhook$outboundSchema: z.ZodType<Webhook$Outbound, z.ZodTypeDef, Webhook> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        events: z.array(GetWebhooksEvents$outboundSchema),
        id: z.string(),
        name: z.string(),
        scope: z.lazy(() => GetWebhooksScope$outboundSchema),
        signingSecret: z.string(),
        updatedAt: z.date().transform((v) => v.toISOString()),
        url: z.string(),
        verifyTls: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            signingSecret: "signing-secret",
            updatedAt: "updated-at",
            verifyTls: "verify-tls",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Webhook$ {
    /** @deprecated use `Webhook$inboundSchema` instead. */
    export const inboundSchema = Webhook$inboundSchema;
    /** @deprecated use `Webhook$outboundSchema` instead. */
    export const outboundSchema = Webhook$outboundSchema;
    /** @deprecated use `Webhook$Outbound` instead. */
    export type Outbound = Webhook$Outbound;
}

/** @internal */
export const GetWebhooksResponseBody$inboundSchema: z.ZodType<
    GetWebhooksResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Webhook$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type GetWebhooksResponseBody$Outbound = {
    items: Array<Webhook$Outbound>;
    next_page_token: string;
};

/** @internal */
export const GetWebhooksResponseBody$outboundSchema: z.ZodType<
    GetWebhooksResponseBody$Outbound,
    z.ZodTypeDef,
    GetWebhooksResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => Webhook$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhooksResponseBody$ {
    /** @deprecated use `GetWebhooksResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWebhooksResponseBody$inboundSchema;
    /** @deprecated use `GetWebhooksResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWebhooksResponseBody$outboundSchema;
    /** @deprecated use `GetWebhooksResponseBody$Outbound` instead. */
    export type Outbound = GetWebhooksResponseBody$Outbound;
}

/** @internal */
export const GetWebhooksResponse$inboundSchema: z.ZodType<
    GetWebhooksResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetWebhooksWebhookResponseBody$inboundSchema),
    z.lazy(() => GetWebhooksResponseBody$inboundSchema),
]);

/** @internal */
export type GetWebhooksResponse$Outbound =
    | GetWebhooksWebhookResponseBody$Outbound
    | GetWebhooksResponseBody$Outbound;

/** @internal */
export const GetWebhooksResponse$outboundSchema: z.ZodType<
    GetWebhooksResponse$Outbound,
    z.ZodTypeDef,
    GetWebhooksResponse
> = z.union([
    z.lazy(() => GetWebhooksWebhookResponseBody$outboundSchema),
    z.lazy(() => GetWebhooksResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhooksResponse$ {
    /** @deprecated use `GetWebhooksResponse$inboundSchema` instead. */
    export const inboundSchema = GetWebhooksResponse$inboundSchema;
    /** @deprecated use `GetWebhooksResponse$outboundSchema` instead. */
    export const outboundSchema = GetWebhooksResponse$outboundSchema;
    /** @deprecated use `GetWebhooksResponse$Outbound` instead. */
    export type Outbound = GetWebhooksResponse$Outbound;
}
