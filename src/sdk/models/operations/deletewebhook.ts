/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteWebhookRequest = {
    /**
     * ID of the webhook (UUID)
     */
    webhookId: string;
};

/**
 * Error response.
 */
export type DeleteWebhookResponseBody = {
    message?: string | undefined;
};

/**
 * message response
 */
export type DeleteWebhookMessageResponse = {
    /**
     * A human-readable message
     */
    message: string;
};

export type DeleteWebhookResponse = DeleteWebhookMessageResponse | DeleteWebhookResponseBody;

/** @internal */
export const DeleteWebhookRequest$inboundSchema: z.ZodType<
    DeleteWebhookRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "webhook-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "webhook-id": "webhookId",
        });
    });

/** @internal */
export type DeleteWebhookRequest$Outbound = {
    "webhook-id": string;
};

/** @internal */
export const DeleteWebhookRequest$outboundSchema: z.ZodType<
    DeleteWebhookRequest$Outbound,
    z.ZodTypeDef,
    DeleteWebhookRequest
> = z
    .object({
        webhookId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            webhookId: "webhook-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookRequest$ {
    /** @deprecated use `DeleteWebhookRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteWebhookRequest$inboundSchema;
    /** @deprecated use `DeleteWebhookRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteWebhookRequest$outboundSchema;
    /** @deprecated use `DeleteWebhookRequest$Outbound` instead. */
    export type Outbound = DeleteWebhookRequest$Outbound;
}

/** @internal */
export const DeleteWebhookResponseBody$inboundSchema: z.ZodType<
    DeleteWebhookResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type DeleteWebhookResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const DeleteWebhookResponseBody$outboundSchema: z.ZodType<
    DeleteWebhookResponseBody$Outbound,
    z.ZodTypeDef,
    DeleteWebhookResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookResponseBody$ {
    /** @deprecated use `DeleteWebhookResponseBody$inboundSchema` instead. */
    export const inboundSchema = DeleteWebhookResponseBody$inboundSchema;
    /** @deprecated use `DeleteWebhookResponseBody$outboundSchema` instead. */
    export const outboundSchema = DeleteWebhookResponseBody$outboundSchema;
    /** @deprecated use `DeleteWebhookResponseBody$Outbound` instead. */
    export type Outbound = DeleteWebhookResponseBody$Outbound;
}

/** @internal */
export const DeleteWebhookMessageResponse$inboundSchema: z.ZodType<
    DeleteWebhookMessageResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
});

/** @internal */
export type DeleteWebhookMessageResponse$Outbound = {
    message: string;
};

/** @internal */
export const DeleteWebhookMessageResponse$outboundSchema: z.ZodType<
    DeleteWebhookMessageResponse$Outbound,
    z.ZodTypeDef,
    DeleteWebhookMessageResponse
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookMessageResponse$ {
    /** @deprecated use `DeleteWebhookMessageResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteWebhookMessageResponse$inboundSchema;
    /** @deprecated use `DeleteWebhookMessageResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteWebhookMessageResponse$outboundSchema;
    /** @deprecated use `DeleteWebhookMessageResponse$Outbound` instead. */
    export type Outbound = DeleteWebhookMessageResponse$Outbound;
}

/** @internal */
export const DeleteWebhookResponse$inboundSchema: z.ZodType<
    DeleteWebhookResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => DeleteWebhookMessageResponse$inboundSchema),
    z.lazy(() => DeleteWebhookResponseBody$inboundSchema),
]);

/** @internal */
export type DeleteWebhookResponse$Outbound =
    | DeleteWebhookMessageResponse$Outbound
    | DeleteWebhookResponseBody$Outbound;

/** @internal */
export const DeleteWebhookResponse$outboundSchema: z.ZodType<
    DeleteWebhookResponse$Outbound,
    z.ZodTypeDef,
    DeleteWebhookResponse
> = z.union([
    z.lazy(() => DeleteWebhookMessageResponse$outboundSchema),
    z.lazy(() => DeleteWebhookResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWebhookResponse$ {
    /** @deprecated use `DeleteWebhookResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteWebhookResponse$inboundSchema;
    /** @deprecated use `DeleteWebhookResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteWebhookResponse$outboundSchema;
    /** @deprecated use `DeleteWebhookResponse$Outbound` instead. */
    export type Outbound = DeleteWebhookResponse$Outbound;
}
