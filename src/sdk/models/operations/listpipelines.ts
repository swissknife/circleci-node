/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type ListPipelinesRequest = {
    /**
     * Only include entries created by your user.
     */
    mine?: boolean | undefined;
    /**
     * Org slug in the form `vcs-slug/org-name`. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug` and replace the `org-name` with the organization ID (found in Organization Settings).
     */
    orgSlug?: string | undefined;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
};

/**
 * Error response.
 */
export type ListPipelinesResponseBody = {
    message?: string | undefined;
};

/**
 * The type of error.
 */
export const ListPipelinesType = {
    Config: "config",
    ConfigFetch: "config-fetch",
    Timeout: "timeout",
    Permission: "permission",
    Other: "other",
    TriggerRule: "trigger-rule",
    Plan: "plan",
} as const;
/**
 * The type of error.
 */
export type ListPipelinesType = ClosedEnum<typeof ListPipelinesType>;

/**
 * An error with a type and message.
 */
export type ListPipelinesErrors = {
    /**
     * A human-readable error message.
     */
    message: string;
    /**
     * The type of error.
     */
    type: ListPipelinesType;
};

/**
 * The current state of the pipeline.
 */
export const ListPipelinesState = {
    Created: "created",
    Errored: "errored",
    SetupPending: "setup-pending",
    Setup: "setup",
    Pending: "pending",
} as const;
/**
 * The current state of the pipeline.
 */
export type ListPipelinesState = ClosedEnum<typeof ListPipelinesState>;

/**
 * The user who triggered the Pipeline.
 */
export type ListPipelinesActor = {
    /**
     * URL to the user's avatar on the VCS
     */
    avatarUrl: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
};

/**
 * The type of trigger.
 */
export const ListPipelinesPipelineType = {
    ScheduledPipeline: "scheduled_pipeline",
    Explicit: "explicit",
    Api: "api",
    Webhook: "webhook",
} as const;
/**
 * The type of trigger.
 */
export type ListPipelinesPipelineType = ClosedEnum<typeof ListPipelinesPipelineType>;

/**
 * A summary of the trigger.
 */
export type ListPipelinesTrigger = {
    /**
     * The user who triggered the Pipeline.
     */
    actor: ListPipelinesActor;
    /**
     * The date and time the trigger was received.
     */
    receivedAt: Date;
    /**
     * The type of trigger.
     */
    type: ListPipelinesPipelineType;
};

export type ListPipelines4 = {};

export type ListPipelinesTriggerParameters = ListPipelines4 | string | number | boolean;

/**
 * The latest commit in the pipeline.
 */
export type ListPipelinesCommit = {
    /**
     * The body of the commit message.
     */
    body: string;
    /**
     * The subject of the commit message.
     */
    subject: string;
};

/**
 * VCS information for the pipeline.
 */
export type ListPipelinesVcs = {
    /**
     * The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
     */
    branch?: string | undefined;
    /**
     * The latest commit in the pipeline.
     */
    commit?: ListPipelinesCommit | undefined;
    /**
     * URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
     */
    originRepositoryUrl: string;
    /**
     * Name of the VCS provider (e.g. GitHub, Bitbucket).
     */
    providerName: string;
    /**
     * The code review id.
     */
    reviewId?: string | undefined;
    /**
     * The code review URL.
     */
    reviewUrl?: string | undefined;
    /**
     * The code revision the pipeline ran.
     */
    revision: string;
    /**
     * The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
     */
    tag?: string | undefined;
    /**
     * URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
     */
    targetRepositoryUrl: string;
};

/**
 * A pipeline response.
 */
export type ListPipelinesPipeline = {
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * A sequence of errors that have occurred within the pipeline.
     */
    errors: Array<ListPipelinesErrors>;
    /**
     * The unique ID of the pipeline.
     */
    id: string;
    /**
     * The number of the pipeline.
     */
    number: number;
    /**
     * The project-slug for the pipeline.
     */
    projectSlug: string;
    /**
     * The current state of the pipeline.
     */
    state: ListPipelinesState;
    /**
     * A summary of the trigger.
     */
    trigger: ListPipelinesTrigger;
    triggerParameters?: { [k: string]: ListPipelines4 | string | number | boolean } | undefined;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * VCS information for the pipeline.
     */
    vcs?: ListPipelinesVcs | undefined;
};

/**
 * List of pipelines
 */
export type ListPipelinesPipelineListResponse = {
    items: Array<ListPipelinesPipeline>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListPipelinesResponse = ListPipelinesResponseBody | ListPipelinesPipelineListResponse;

/** @internal */
export const ListPipelinesRequest$inboundSchema: z.ZodType<
    ListPipelinesRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        mine: z.boolean().optional(),
        "org-slug": z.string().optional(),
        "page-token": z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "org-slug": "orgSlug",
            "page-token": "pageToken",
        });
    });

/** @internal */
export type ListPipelinesRequest$Outbound = {
    mine?: boolean | undefined;
    "org-slug"?: string | undefined;
    "page-token"?: string | undefined;
};

/** @internal */
export const ListPipelinesRequest$outboundSchema: z.ZodType<
    ListPipelinesRequest$Outbound,
    z.ZodTypeDef,
    ListPipelinesRequest
> = z
    .object({
        mine: z.boolean().optional(),
        orgSlug: z.string().optional(),
        pageToken: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            orgSlug: "org-slug",
            pageToken: "page-token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesRequest$ {
    /** @deprecated use `ListPipelinesRequest$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesRequest$inboundSchema;
    /** @deprecated use `ListPipelinesRequest$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesRequest$outboundSchema;
    /** @deprecated use `ListPipelinesRequest$Outbound` instead. */
    export type Outbound = ListPipelinesRequest$Outbound;
}

/** @internal */
export const ListPipelinesResponseBody$inboundSchema: z.ZodType<
    ListPipelinesResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListPipelinesResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListPipelinesResponseBody$outboundSchema: z.ZodType<
    ListPipelinesResponseBody$Outbound,
    z.ZodTypeDef,
    ListPipelinesResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponseBody$ {
    /** @deprecated use `ListPipelinesResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesResponseBody$inboundSchema;
    /** @deprecated use `ListPipelinesResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesResponseBody$outboundSchema;
    /** @deprecated use `ListPipelinesResponseBody$Outbound` instead. */
    export type Outbound = ListPipelinesResponseBody$Outbound;
}

/** @internal */
export const ListPipelinesType$inboundSchema: z.ZodNativeEnum<typeof ListPipelinesType> =
    z.nativeEnum(ListPipelinesType);

/** @internal */
export const ListPipelinesType$outboundSchema: z.ZodNativeEnum<typeof ListPipelinesType> =
    ListPipelinesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesType$ {
    /** @deprecated use `ListPipelinesType$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesType$inboundSchema;
    /** @deprecated use `ListPipelinesType$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesType$outboundSchema;
}

/** @internal */
export const ListPipelinesErrors$inboundSchema: z.ZodType<
    ListPipelinesErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
    type: ListPipelinesType$inboundSchema,
});

/** @internal */
export type ListPipelinesErrors$Outbound = {
    message: string;
    type: string;
};

/** @internal */
export const ListPipelinesErrors$outboundSchema: z.ZodType<
    ListPipelinesErrors$Outbound,
    z.ZodTypeDef,
    ListPipelinesErrors
> = z.object({
    message: z.string(),
    type: ListPipelinesType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesErrors$ {
    /** @deprecated use `ListPipelinesErrors$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesErrors$inboundSchema;
    /** @deprecated use `ListPipelinesErrors$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesErrors$outboundSchema;
    /** @deprecated use `ListPipelinesErrors$Outbound` instead. */
    export type Outbound = ListPipelinesErrors$Outbound;
}

/** @internal */
export const ListPipelinesState$inboundSchema: z.ZodNativeEnum<typeof ListPipelinesState> =
    z.nativeEnum(ListPipelinesState);

/** @internal */
export const ListPipelinesState$outboundSchema: z.ZodNativeEnum<typeof ListPipelinesState> =
    ListPipelinesState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesState$ {
    /** @deprecated use `ListPipelinesState$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesState$inboundSchema;
    /** @deprecated use `ListPipelinesState$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesState$outboundSchema;
}

/** @internal */
export const ListPipelinesActor$inboundSchema: z.ZodType<
    ListPipelinesActor,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        avatar_url: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatar_url: "avatarUrl",
        });
    });

/** @internal */
export type ListPipelinesActor$Outbound = {
    avatar_url: string;
    login: string;
};

/** @internal */
export const ListPipelinesActor$outboundSchema: z.ZodType<
    ListPipelinesActor$Outbound,
    z.ZodTypeDef,
    ListPipelinesActor
> = z
    .object({
        avatarUrl: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatarUrl: "avatar_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesActor$ {
    /** @deprecated use `ListPipelinesActor$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesActor$inboundSchema;
    /** @deprecated use `ListPipelinesActor$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesActor$outboundSchema;
    /** @deprecated use `ListPipelinesActor$Outbound` instead. */
    export type Outbound = ListPipelinesActor$Outbound;
}

/** @internal */
export const ListPipelinesPipelineType$inboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesPipelineType
> = z.nativeEnum(ListPipelinesPipelineType);

/** @internal */
export const ListPipelinesPipelineType$outboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesPipelineType
> = ListPipelinesPipelineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesPipelineType$ {
    /** @deprecated use `ListPipelinesPipelineType$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesPipelineType$inboundSchema;
    /** @deprecated use `ListPipelinesPipelineType$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesPipelineType$outboundSchema;
}

/** @internal */
export const ListPipelinesTrigger$inboundSchema: z.ZodType<
    ListPipelinesTrigger,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        actor: z.lazy(() => ListPipelinesActor$inboundSchema),
        received_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        type: ListPipelinesPipelineType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            received_at: "receivedAt",
        });
    });

/** @internal */
export type ListPipelinesTrigger$Outbound = {
    actor: ListPipelinesActor$Outbound;
    received_at: string;
    type: string;
};

/** @internal */
export const ListPipelinesTrigger$outboundSchema: z.ZodType<
    ListPipelinesTrigger$Outbound,
    z.ZodTypeDef,
    ListPipelinesTrigger
> = z
    .object({
        actor: z.lazy(() => ListPipelinesActor$outboundSchema),
        receivedAt: z.date().transform((v) => v.toISOString()),
        type: ListPipelinesPipelineType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            receivedAt: "received_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesTrigger$ {
    /** @deprecated use `ListPipelinesTrigger$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesTrigger$inboundSchema;
    /** @deprecated use `ListPipelinesTrigger$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesTrigger$outboundSchema;
    /** @deprecated use `ListPipelinesTrigger$Outbound` instead. */
    export type Outbound = ListPipelinesTrigger$Outbound;
}

/** @internal */
export const ListPipelines4$inboundSchema: z.ZodType<ListPipelines4, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type ListPipelines4$Outbound = {};

/** @internal */
export const ListPipelines4$outboundSchema: z.ZodType<
    ListPipelines4$Outbound,
    z.ZodTypeDef,
    ListPipelines4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelines4$ {
    /** @deprecated use `ListPipelines4$inboundSchema` instead. */
    export const inboundSchema = ListPipelines4$inboundSchema;
    /** @deprecated use `ListPipelines4$outboundSchema` instead. */
    export const outboundSchema = ListPipelines4$outboundSchema;
    /** @deprecated use `ListPipelines4$Outbound` instead. */
    export type Outbound = ListPipelines4$Outbound;
}

/** @internal */
export const ListPipelinesTriggerParameters$inboundSchema: z.ZodType<
    ListPipelinesTriggerParameters,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListPipelines4$inboundSchema),
    z.string(),
    z.number().int(),
    z.boolean(),
]);

/** @internal */
export type ListPipelinesTriggerParameters$Outbound =
    | ListPipelines4$Outbound
    | string
    | number
    | boolean;

/** @internal */
export const ListPipelinesTriggerParameters$outboundSchema: z.ZodType<
    ListPipelinesTriggerParameters$Outbound,
    z.ZodTypeDef,
    ListPipelinesTriggerParameters
> = z.union([
    z.lazy(() => ListPipelines4$outboundSchema),
    z.string(),
    z.number().int(),
    z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesTriggerParameters$ {
    /** @deprecated use `ListPipelinesTriggerParameters$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesTriggerParameters$inboundSchema;
    /** @deprecated use `ListPipelinesTriggerParameters$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesTriggerParameters$outboundSchema;
    /** @deprecated use `ListPipelinesTriggerParameters$Outbound` instead. */
    export type Outbound = ListPipelinesTriggerParameters$Outbound;
}

/** @internal */
export const ListPipelinesCommit$inboundSchema: z.ZodType<
    ListPipelinesCommit,
    z.ZodTypeDef,
    unknown
> = z.object({
    body: z.string(),
    subject: z.string(),
});

/** @internal */
export type ListPipelinesCommit$Outbound = {
    body: string;
    subject: string;
};

/** @internal */
export const ListPipelinesCommit$outboundSchema: z.ZodType<
    ListPipelinesCommit$Outbound,
    z.ZodTypeDef,
    ListPipelinesCommit
> = z.object({
    body: z.string(),
    subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesCommit$ {
    /** @deprecated use `ListPipelinesCommit$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesCommit$inboundSchema;
    /** @deprecated use `ListPipelinesCommit$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesCommit$outboundSchema;
    /** @deprecated use `ListPipelinesCommit$Outbound` instead. */
    export type Outbound = ListPipelinesCommit$Outbound;
}

/** @internal */
export const ListPipelinesVcs$inboundSchema: z.ZodType<ListPipelinesVcs, z.ZodTypeDef, unknown> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => ListPipelinesCommit$inboundSchema).optional(),
        origin_repository_url: z.string(),
        provider_name: z.string(),
        review_id: z.string().optional(),
        review_url: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        target_repository_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            origin_repository_url: "originRepositoryUrl",
            provider_name: "providerName",
            review_id: "reviewId",
            review_url: "reviewUrl",
            target_repository_url: "targetRepositoryUrl",
        });
    });

/** @internal */
export type ListPipelinesVcs$Outbound = {
    branch?: string | undefined;
    commit?: ListPipelinesCommit$Outbound | undefined;
    origin_repository_url: string;
    provider_name: string;
    review_id?: string | undefined;
    review_url?: string | undefined;
    revision: string;
    tag?: string | undefined;
    target_repository_url: string;
};

/** @internal */
export const ListPipelinesVcs$outboundSchema: z.ZodType<
    ListPipelinesVcs$Outbound,
    z.ZodTypeDef,
    ListPipelinesVcs
> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => ListPipelinesCommit$outboundSchema).optional(),
        originRepositoryUrl: z.string(),
        providerName: z.string(),
        reviewId: z.string().optional(),
        reviewUrl: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        targetRepositoryUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            originRepositoryUrl: "origin_repository_url",
            providerName: "provider_name",
            reviewId: "review_id",
            reviewUrl: "review_url",
            targetRepositoryUrl: "target_repository_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesVcs$ {
    /** @deprecated use `ListPipelinesVcs$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesVcs$inboundSchema;
    /** @deprecated use `ListPipelinesVcs$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesVcs$outboundSchema;
    /** @deprecated use `ListPipelinesVcs$Outbound` instead. */
    export type Outbound = ListPipelinesVcs$Outbound;
}

/** @internal */
export const ListPipelinesPipeline$inboundSchema: z.ZodType<
    ListPipelinesPipeline,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        errors: z.array(z.lazy(() => ListPipelinesErrors$inboundSchema)),
        id: z.string(),
        number: z.number().int(),
        project_slug: z.string(),
        state: ListPipelinesState$inboundSchema,
        trigger: z.lazy(() => ListPipelinesTrigger$inboundSchema),
        trigger_parameters: z
            .record(
                z.union([
                    z.lazy(() => ListPipelines4$inboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        vcs: z.lazy(() => ListPipelinesVcs$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            project_slug: "projectSlug",
            trigger_parameters: "triggerParameters",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type ListPipelinesPipeline$Outbound = {
    created_at: string;
    errors: Array<ListPipelinesErrors$Outbound>;
    id: string;
    number: number;
    project_slug: string;
    state: string;
    trigger: ListPipelinesTrigger$Outbound;
    trigger_parameters?:
        | { [k: string]: ListPipelines4$Outbound | string | number | boolean }
        | undefined;
    updated_at?: string | undefined;
    vcs?: ListPipelinesVcs$Outbound | undefined;
};

/** @internal */
export const ListPipelinesPipeline$outboundSchema: z.ZodType<
    ListPipelinesPipeline$Outbound,
    z.ZodTypeDef,
    ListPipelinesPipeline
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        errors: z.array(z.lazy(() => ListPipelinesErrors$outboundSchema)),
        id: z.string(),
        number: z.number().int(),
        projectSlug: z.string(),
        state: ListPipelinesState$outboundSchema,
        trigger: z.lazy(() => ListPipelinesTrigger$outboundSchema),
        triggerParameters: z
            .record(
                z.union([
                    z.lazy(() => ListPipelines4$outboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        vcs: z.lazy(() => ListPipelinesVcs$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            projectSlug: "project_slug",
            triggerParameters: "trigger_parameters",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesPipeline$ {
    /** @deprecated use `ListPipelinesPipeline$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesPipeline$inboundSchema;
    /** @deprecated use `ListPipelinesPipeline$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesPipeline$outboundSchema;
    /** @deprecated use `ListPipelinesPipeline$Outbound` instead. */
    export type Outbound = ListPipelinesPipeline$Outbound;
}

/** @internal */
export const ListPipelinesPipelineListResponse$inboundSchema: z.ZodType<
    ListPipelinesPipelineListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => ListPipelinesPipeline$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListPipelinesPipelineListResponse$Outbound = {
    items: Array<ListPipelinesPipeline$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListPipelinesPipelineListResponse$outboundSchema: z.ZodType<
    ListPipelinesPipelineListResponse$Outbound,
    z.ZodTypeDef,
    ListPipelinesPipelineListResponse
> = z
    .object({
        items: z.array(z.lazy(() => ListPipelinesPipeline$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesPipelineListResponse$ {
    /** @deprecated use `ListPipelinesPipelineListResponse$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesPipelineListResponse$inboundSchema;
    /** @deprecated use `ListPipelinesPipelineListResponse$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesPipelineListResponse$outboundSchema;
    /** @deprecated use `ListPipelinesPipelineListResponse$Outbound` instead. */
    export type Outbound = ListPipelinesPipelineListResponse$Outbound;
}

/** @internal */
export const ListPipelinesResponse$inboundSchema: z.ZodType<
    ListPipelinesResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListPipelinesResponseBody$inboundSchema),
    z.lazy(() => ListPipelinesPipelineListResponse$inboundSchema),
]);

/** @internal */
export type ListPipelinesResponse$Outbound =
    | ListPipelinesResponseBody$Outbound
    | ListPipelinesPipelineListResponse$Outbound;

/** @internal */
export const ListPipelinesResponse$outboundSchema: z.ZodType<
    ListPipelinesResponse$Outbound,
    z.ZodTypeDef,
    ListPipelinesResponse
> = z.union([
    z.lazy(() => ListPipelinesResponseBody$outboundSchema),
    z.lazy(() => ListPipelinesPipelineListResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesResponse$ {
    /** @deprecated use `ListPipelinesResponse$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesResponse$inboundSchema;
    /** @deprecated use `ListPipelinesResponse$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesResponse$outboundSchema;
    /** @deprecated use `ListPipelinesResponse$Outbound` instead. */
    export type Outbound = ListPipelinesResponse$Outbound;
}
