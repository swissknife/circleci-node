/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetPolicyBundleRequest = {
    context: string;
    ownerID: string;
};

/**
 * The request is malformed (e.g, a given path parameter is invalid)
 *
 * @remarks
 *
 */
export type GetPolicyBundleResponseBody = {
    error: string;
};

export type GetPolicyBundleResponse =
    | GetPolicyBundleResponseBody
    | { [k: string]: Array<shared.Policy> };

/** @internal */
export const GetPolicyBundleRequest$inboundSchema: z.ZodType<
    GetPolicyBundleRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    context: z.string(),
    ownerID: z.string(),
});

/** @internal */
export type GetPolicyBundleRequest$Outbound = {
    context: string;
    ownerID: string;
};

/** @internal */
export const GetPolicyBundleRequest$outboundSchema: z.ZodType<
    GetPolicyBundleRequest$Outbound,
    z.ZodTypeDef,
    GetPolicyBundleRequest
> = z.object({
    context: z.string(),
    ownerID: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPolicyBundleRequest$ {
    /** @deprecated use `GetPolicyBundleRequest$inboundSchema` instead. */
    export const inboundSchema = GetPolicyBundleRequest$inboundSchema;
    /** @deprecated use `GetPolicyBundleRequest$outboundSchema` instead. */
    export const outboundSchema = GetPolicyBundleRequest$outboundSchema;
    /** @deprecated use `GetPolicyBundleRequest$Outbound` instead. */
    export type Outbound = GetPolicyBundleRequest$Outbound;
}

/** @internal */
export const GetPolicyBundleResponseBody$inboundSchema: z.ZodType<
    GetPolicyBundleResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.string(),
});

/** @internal */
export type GetPolicyBundleResponseBody$Outbound = {
    error: string;
};

/** @internal */
export const GetPolicyBundleResponseBody$outboundSchema: z.ZodType<
    GetPolicyBundleResponseBody$Outbound,
    z.ZodTypeDef,
    GetPolicyBundleResponseBody
> = z.object({
    error: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPolicyBundleResponseBody$ {
    /** @deprecated use `GetPolicyBundleResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetPolicyBundleResponseBody$inboundSchema;
    /** @deprecated use `GetPolicyBundleResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetPolicyBundleResponseBody$outboundSchema;
    /** @deprecated use `GetPolicyBundleResponseBody$Outbound` instead. */
    export type Outbound = GetPolicyBundleResponseBody$Outbound;
}

/** @internal */
export const GetPolicyBundleResponse$inboundSchema: z.ZodType<
    GetPolicyBundleResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetPolicyBundleResponseBody$inboundSchema),
    z.record(z.array(shared.Policy$inboundSchema)),
]);

/** @internal */
export type GetPolicyBundleResponse$Outbound =
    | GetPolicyBundleResponseBody$Outbound
    | { [k: string]: Array<shared.Policy$Outbound> };

/** @internal */
export const GetPolicyBundleResponse$outboundSchema: z.ZodType<
    GetPolicyBundleResponse$Outbound,
    z.ZodTypeDef,
    GetPolicyBundleResponse
> = z.union([
    z.lazy(() => GetPolicyBundleResponseBody$outboundSchema),
    z.record(z.array(shared.Policy$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPolicyBundleResponse$ {
    /** @deprecated use `GetPolicyBundleResponse$inboundSchema` instead. */
    export const inboundSchema = GetPolicyBundleResponse$inboundSchema;
    /** @deprecated use `GetPolicyBundleResponse$outboundSchema` instead. */
    export const outboundSchema = GetPolicyBundleResponse$outboundSchema;
    /** @deprecated use `GetPolicyBundleResponse$Outbound` instead. */
    export type Outbound = GetPolicyBundleResponse$Outbound;
}
