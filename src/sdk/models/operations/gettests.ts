/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetTestsRequest = {
    /**
     * The number of the job.
     */
    jobNumber?: any | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetTestsResponseBody = {
    message?: string | undefined;
};

export type GetTestsItems = {
    /**
     * The programmatic location of the test.
     */
    classname: string;
    /**
     * The file in which the test is defined.
     */
    file: string;
    /**
     * The failure message associated with the test.
     */
    message: string;
    /**
     * The name of the test.
     */
    name: string;
    /**
     * Indication of whether the test succeeded.
     */
    result: string;
    /**
     * The time it took to run the test in seconds
     */
    runTime: number;
    /**
     * The program that generated the test results
     */
    source: string;
};

/**
 * A paginated list of test results.
 */
export type GetTestsTestsResponse = {
    items: Array<GetTestsItems>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type GetTestsResponse = GetTestsResponseBody | GetTestsTestsResponse;

/** @internal */
export const GetTestsRequest$inboundSchema: z.ZodType<GetTestsRequest, z.ZodTypeDef, unknown> = z
    .object({
        "job-number": z.any().optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "job-number": "jobNumber",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetTestsRequest$Outbound = {
    "job-number"?: any | undefined;
    "project-slug": string;
};

/** @internal */
export const GetTestsRequest$outboundSchema: z.ZodType<
    GetTestsRequest$Outbound,
    z.ZodTypeDef,
    GetTestsRequest
> = z
    .object({
        jobNumber: z.any().optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            jobNumber: "job-number",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestsRequest$ {
    /** @deprecated use `GetTestsRequest$inboundSchema` instead. */
    export const inboundSchema = GetTestsRequest$inboundSchema;
    /** @deprecated use `GetTestsRequest$outboundSchema` instead. */
    export const outboundSchema = GetTestsRequest$outboundSchema;
    /** @deprecated use `GetTestsRequest$Outbound` instead. */
    export type Outbound = GetTestsRequest$Outbound;
}

/** @internal */
export const GetTestsResponseBody$inboundSchema: z.ZodType<
    GetTestsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetTestsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetTestsResponseBody$outboundSchema: z.ZodType<
    GetTestsResponseBody$Outbound,
    z.ZodTypeDef,
    GetTestsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestsResponseBody$ {
    /** @deprecated use `GetTestsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetTestsResponseBody$inboundSchema;
    /** @deprecated use `GetTestsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetTestsResponseBody$outboundSchema;
    /** @deprecated use `GetTestsResponseBody$Outbound` instead. */
    export type Outbound = GetTestsResponseBody$Outbound;
}

/** @internal */
export const GetTestsItems$inboundSchema: z.ZodType<GetTestsItems, z.ZodTypeDef, unknown> = z
    .object({
        classname: z.string(),
        file: z.string(),
        message: z.string(),
        name: z.string(),
        result: z.string(),
        run_time: z.number(),
        source: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            run_time: "runTime",
        });
    });

/** @internal */
export type GetTestsItems$Outbound = {
    classname: string;
    file: string;
    message: string;
    name: string;
    result: string;
    run_time: number;
    source: string;
};

/** @internal */
export const GetTestsItems$outboundSchema: z.ZodType<
    GetTestsItems$Outbound,
    z.ZodTypeDef,
    GetTestsItems
> = z
    .object({
        classname: z.string(),
        file: z.string(),
        message: z.string(),
        name: z.string(),
        result: z.string(),
        runTime: z.number(),
        source: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            runTime: "run_time",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestsItems$ {
    /** @deprecated use `GetTestsItems$inboundSchema` instead. */
    export const inboundSchema = GetTestsItems$inboundSchema;
    /** @deprecated use `GetTestsItems$outboundSchema` instead. */
    export const outboundSchema = GetTestsItems$outboundSchema;
    /** @deprecated use `GetTestsItems$Outbound` instead. */
    export type Outbound = GetTestsItems$Outbound;
}

/** @internal */
export const GetTestsTestsResponse$inboundSchema: z.ZodType<
    GetTestsTestsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => GetTestsItems$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type GetTestsTestsResponse$Outbound = {
    items: Array<GetTestsItems$Outbound>;
    next_page_token: string;
};

/** @internal */
export const GetTestsTestsResponse$outboundSchema: z.ZodType<
    GetTestsTestsResponse$Outbound,
    z.ZodTypeDef,
    GetTestsTestsResponse
> = z
    .object({
        items: z.array(z.lazy(() => GetTestsItems$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestsTestsResponse$ {
    /** @deprecated use `GetTestsTestsResponse$inboundSchema` instead. */
    export const inboundSchema = GetTestsTestsResponse$inboundSchema;
    /** @deprecated use `GetTestsTestsResponse$outboundSchema` instead. */
    export const outboundSchema = GetTestsTestsResponse$outboundSchema;
    /** @deprecated use `GetTestsTestsResponse$Outbound` instead. */
    export type Outbound = GetTestsTestsResponse$Outbound;
}

/** @internal */
export const GetTestsResponse$inboundSchema: z.ZodType<GetTestsResponse, z.ZodTypeDef, unknown> =
    z.union([
        z.lazy(() => GetTestsResponseBody$inboundSchema),
        z.lazy(() => GetTestsTestsResponse$inboundSchema),
    ]);

/** @internal */
export type GetTestsResponse$Outbound =
    | GetTestsResponseBody$Outbound
    | GetTestsTestsResponse$Outbound;

/** @internal */
export const GetTestsResponse$outboundSchema: z.ZodType<
    GetTestsResponse$Outbound,
    z.ZodTypeDef,
    GetTestsResponse
> = z.union([
    z.lazy(() => GetTestsResponseBody$outboundSchema),
    z.lazy(() => GetTestsTestsResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTestsResponse$ {
    /** @deprecated use `GetTestsResponse$inboundSchema` instead. */
    export const inboundSchema = GetTestsResponse$inboundSchema;
    /** @deprecated use `GetTestsResponse$outboundSchema` instead. */
    export const outboundSchema = GetTestsResponse$outboundSchema;
    /** @deprecated use `GetTestsResponse$Outbound` instead. */
    export type Outbound = GetTestsResponse$Outbound;
}
