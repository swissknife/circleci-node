/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ListEnvVarsRequest = {
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type ListEnvVarsResponseBody = {
    message?: string | undefined;
};

/**
 * An environment variable is a map containing a value and an optional timestamp.
 */
export type EnvironmentVariable = {
    /**
     * The creation timestamp of the environment variable.
     */
    createdAt?: any | undefined;
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * The value of the environment variable.
     */
    value: string;
};

/**
 * A sequence of environment variables.
 */
export type ListEnvVarsEnvironmentVariableListResponse = {
    items: Array<EnvironmentVariable>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListEnvVarsResponse =
    | ListEnvVarsResponseBody
    | ListEnvVarsEnvironmentVariableListResponse;

/** @internal */
export const ListEnvVarsRequest$inboundSchema: z.ZodType<
    ListEnvVarsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type ListEnvVarsRequest$Outbound = {
    "project-slug": string;
};

/** @internal */
export const ListEnvVarsRequest$outboundSchema: z.ZodType<
    ListEnvVarsRequest$Outbound,
    z.ZodTypeDef,
    ListEnvVarsRequest
> = z
    .object({
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvVarsRequest$ {
    /** @deprecated use `ListEnvVarsRequest$inboundSchema` instead. */
    export const inboundSchema = ListEnvVarsRequest$inboundSchema;
    /** @deprecated use `ListEnvVarsRequest$outboundSchema` instead. */
    export const outboundSchema = ListEnvVarsRequest$outboundSchema;
    /** @deprecated use `ListEnvVarsRequest$Outbound` instead. */
    export type Outbound = ListEnvVarsRequest$Outbound;
}

/** @internal */
export const ListEnvVarsResponseBody$inboundSchema: z.ZodType<
    ListEnvVarsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListEnvVarsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListEnvVarsResponseBody$outboundSchema: z.ZodType<
    ListEnvVarsResponseBody$Outbound,
    z.ZodTypeDef,
    ListEnvVarsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvVarsResponseBody$ {
    /** @deprecated use `ListEnvVarsResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListEnvVarsResponseBody$inboundSchema;
    /** @deprecated use `ListEnvVarsResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListEnvVarsResponseBody$outboundSchema;
    /** @deprecated use `ListEnvVarsResponseBody$Outbound` instead. */
    export type Outbound = ListEnvVarsResponseBody$Outbound;
}

/** @internal */
export const EnvironmentVariable$inboundSchema: z.ZodType<
    EnvironmentVariable,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "created-at": z.any().optional(),
        name: z.string(),
        value: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
        });
    });

/** @internal */
export type EnvironmentVariable$Outbound = {
    "created-at"?: any | undefined;
    name: string;
    value: string;
};

/** @internal */
export const EnvironmentVariable$outboundSchema: z.ZodType<
    EnvironmentVariable$Outbound,
    z.ZodTypeDef,
    EnvironmentVariable
> = z
    .object({
        createdAt: z.any().optional(),
        name: z.string(),
        value: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentVariable$ {
    /** @deprecated use `EnvironmentVariable$inboundSchema` instead. */
    export const inboundSchema = EnvironmentVariable$inboundSchema;
    /** @deprecated use `EnvironmentVariable$outboundSchema` instead. */
    export const outboundSchema = EnvironmentVariable$outboundSchema;
    /** @deprecated use `EnvironmentVariable$Outbound` instead. */
    export type Outbound = EnvironmentVariable$Outbound;
}

/** @internal */
export const ListEnvVarsEnvironmentVariableListResponse$inboundSchema: z.ZodType<
    ListEnvVarsEnvironmentVariableListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => EnvironmentVariable$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListEnvVarsEnvironmentVariableListResponse$Outbound = {
    items: Array<EnvironmentVariable$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListEnvVarsEnvironmentVariableListResponse$outboundSchema: z.ZodType<
    ListEnvVarsEnvironmentVariableListResponse$Outbound,
    z.ZodTypeDef,
    ListEnvVarsEnvironmentVariableListResponse
> = z
    .object({
        items: z.array(z.lazy(() => EnvironmentVariable$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvVarsEnvironmentVariableListResponse$ {
    /** @deprecated use `ListEnvVarsEnvironmentVariableListResponse$inboundSchema` instead. */
    export const inboundSchema = ListEnvVarsEnvironmentVariableListResponse$inboundSchema;
    /** @deprecated use `ListEnvVarsEnvironmentVariableListResponse$outboundSchema` instead. */
    export const outboundSchema = ListEnvVarsEnvironmentVariableListResponse$outboundSchema;
    /** @deprecated use `ListEnvVarsEnvironmentVariableListResponse$Outbound` instead. */
    export type Outbound = ListEnvVarsEnvironmentVariableListResponse$Outbound;
}

/** @internal */
export const ListEnvVarsResponse$inboundSchema: z.ZodType<
    ListEnvVarsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListEnvVarsResponseBody$inboundSchema),
    z.lazy(() => ListEnvVarsEnvironmentVariableListResponse$inboundSchema),
]);

/** @internal */
export type ListEnvVarsResponse$Outbound =
    | ListEnvVarsResponseBody$Outbound
    | ListEnvVarsEnvironmentVariableListResponse$Outbound;

/** @internal */
export const ListEnvVarsResponse$outboundSchema: z.ZodType<
    ListEnvVarsResponse$Outbound,
    z.ZodTypeDef,
    ListEnvVarsResponse
> = z.union([
    z.lazy(() => ListEnvVarsResponseBody$outboundSchema),
    z.lazy(() => ListEnvVarsEnvironmentVariableListResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEnvVarsResponse$ {
    /** @deprecated use `ListEnvVarsResponse$inboundSchema` instead. */
    export const inboundSchema = ListEnvVarsResponse$inboundSchema;
    /** @deprecated use `ListEnvVarsResponse$outboundSchema` instead. */
    export const outboundSchema = ListEnvVarsResponse$outboundSchema;
    /** @deprecated use `ListEnvVarsResponse$Outbound` instead. */
    export type Outbound = ListEnvVarsResponse$Outbound;
}
