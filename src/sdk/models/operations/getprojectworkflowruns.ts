/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetProjectWorkflowRunsRequest = {
    /**
     * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
     */
    allBranches?: boolean | undefined;
    /**
     * The name of a vcs branch. If not passed we will scope the API call to the default branch.
     */
    branch?: string | undefined;
    /**
     * Include only executions that started before this date. This date can be at most 90 days after the start-date.
     */
    endDate?: Date | undefined;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * Include only executions that started at or after this date. This must be specified if an end-date is provided.
     */
    startDate?: Date | undefined;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Error response.
 */
export type GetProjectWorkflowRunsInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Workflow status.
 */
export const GetProjectWorkflowRunsStatus = {
    Success: "success",
    Failed: "failed",
    Error: "error",
    Canceled: "canceled",
    Unauthorized: "unauthorized",
} as const;
/**
 * Workflow status.
 */
export type GetProjectWorkflowRunsStatus = ClosedEnum<typeof GetProjectWorkflowRunsStatus>;

export type GetProjectWorkflowRunsItems = {
    /**
     * The VCS branch of a Workflow's trigger.
     */
    branch: string;
    /**
     * The date and time the workflow was created.
     */
    createdAt: Date;
    /**
     * The number of credits used during execution. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
     */
    creditsUsed: number;
    /**
     * The duration in seconds of a run.
     */
    duration: number;
    /**
     * The unique ID of the workflow.
     */
    id: string;
    /**
     * Describes if the job is an approval job or not. Approval jobs are intermediary jobs that are created to pause the workflow until approved.
     */
    isApproval: boolean;
    /**
     * Workflow status.
     */
    status: GetProjectWorkflowRunsStatus;
    /**
     * The date and time the workflow stopped.
     */
    stoppedAt: Date;
};

/**
 * Paginated recent workflow runs.
 */
export type GetProjectWorkflowRunsResponseBody = {
    /**
     * Recent workflow runs.
     */
    items: Array<GetProjectWorkflowRunsItems>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type GetProjectWorkflowRunsResponse =
    | GetProjectWorkflowRunsInsightsResponseBody
    | GetProjectWorkflowRunsResponseBody;

/** @internal */
export const GetProjectWorkflowRunsRequest$inboundSchema: z.ZodType<
    GetProjectWorkflowRunsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "all-branches": z.boolean().optional(),
        branch: z.string().optional(),
        "end-date": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        "page-token": z.string().optional(),
        "project-slug": z.string(),
        "start-date": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        "workflow-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "all-branches": "allBranches",
            "end-date": "endDate",
            "page-token": "pageToken",
            "project-slug": "projectSlug",
            "start-date": "startDate",
            "workflow-name": "workflowName",
        });
    });

/** @internal */
export type GetProjectWorkflowRunsRequest$Outbound = {
    "all-branches"?: boolean | undefined;
    branch?: string | undefined;
    "end-date"?: string | undefined;
    "page-token"?: string | undefined;
    "project-slug": string;
    "start-date"?: string | undefined;
    "workflow-name": string;
};

/** @internal */
export const GetProjectWorkflowRunsRequest$outboundSchema: z.ZodType<
    GetProjectWorkflowRunsRequest$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowRunsRequest
> = z
    .object({
        allBranches: z.boolean().optional(),
        branch: z.string().optional(),
        endDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        pageToken: z.string().optional(),
        projectSlug: z.string(),
        startDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            allBranches: "all-branches",
            endDate: "end-date",
            pageToken: "page-token",
            projectSlug: "project-slug",
            startDate: "start-date",
            workflowName: "workflow-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowRunsRequest$ {
    /** @deprecated use `GetProjectWorkflowRunsRequest$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowRunsRequest$inboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsRequest$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowRunsRequest$outboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsRequest$Outbound` instead. */
    export type Outbound = GetProjectWorkflowRunsRequest$Outbound;
}

/** @internal */
export const GetProjectWorkflowRunsInsightsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowRunsInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetProjectWorkflowRunsInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetProjectWorkflowRunsInsightsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowRunsInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowRunsInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowRunsInsightsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowRunsInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowRunsInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowRunsInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowRunsInsightsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowRunsStatus$inboundSchema: z.ZodNativeEnum<
    typeof GetProjectWorkflowRunsStatus
> = z.nativeEnum(GetProjectWorkflowRunsStatus);

/** @internal */
export const GetProjectWorkflowRunsStatus$outboundSchema: z.ZodNativeEnum<
    typeof GetProjectWorkflowRunsStatus
> = GetProjectWorkflowRunsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowRunsStatus$ {
    /** @deprecated use `GetProjectWorkflowRunsStatus$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowRunsStatus$inboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsStatus$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowRunsStatus$outboundSchema;
}

/** @internal */
export const GetProjectWorkflowRunsItems$inboundSchema: z.ZodType<
    GetProjectWorkflowRunsItems,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branch: z.string(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        credits_used: z.number().int(),
        duration: z.number().int(),
        id: z.string(),
        is_approval: z.boolean(),
        status: GetProjectWorkflowRunsStatus$inboundSchema,
        stopped_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            credits_used: "creditsUsed",
            is_approval: "isApproval",
            stopped_at: "stoppedAt",
        });
    });

/** @internal */
export type GetProjectWorkflowRunsItems$Outbound = {
    branch: string;
    created_at: string;
    credits_used: number;
    duration: number;
    id: string;
    is_approval: boolean;
    status: string;
    stopped_at: string;
};

/** @internal */
export const GetProjectWorkflowRunsItems$outboundSchema: z.ZodType<
    GetProjectWorkflowRunsItems$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowRunsItems
> = z
    .object({
        branch: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        creditsUsed: z.number().int(),
        duration: z.number().int(),
        id: z.string(),
        isApproval: z.boolean(),
        status: GetProjectWorkflowRunsStatus$outboundSchema,
        stoppedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            creditsUsed: "credits_used",
            isApproval: "is_approval",
            stoppedAt: "stopped_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowRunsItems$ {
    /** @deprecated use `GetProjectWorkflowRunsItems$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowRunsItems$inboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsItems$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowRunsItems$outboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsItems$Outbound` instead. */
    export type Outbound = GetProjectWorkflowRunsItems$Outbound;
}

/** @internal */
export const GetProjectWorkflowRunsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowRunsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => GetProjectWorkflowRunsItems$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type GetProjectWorkflowRunsResponseBody$Outbound = {
    items: Array<GetProjectWorkflowRunsItems$Outbound>;
    next_page_token: string;
};

/** @internal */
export const GetProjectWorkflowRunsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowRunsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowRunsResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => GetProjectWorkflowRunsItems$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowRunsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowRunsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowRunsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowRunsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowRunsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowRunsResponse$inboundSchema: z.ZodType<
    GetProjectWorkflowRunsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetProjectWorkflowRunsInsightsResponseBody$inboundSchema),
    z.lazy(() => GetProjectWorkflowRunsResponseBody$inboundSchema),
]);

/** @internal */
export type GetProjectWorkflowRunsResponse$Outbound =
    | GetProjectWorkflowRunsInsightsResponseBody$Outbound
    | GetProjectWorkflowRunsResponseBody$Outbound;

/** @internal */
export const GetProjectWorkflowRunsResponse$outboundSchema: z.ZodType<
    GetProjectWorkflowRunsResponse$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowRunsResponse
> = z.union([
    z.lazy(() => GetProjectWorkflowRunsInsightsResponseBody$outboundSchema),
    z.lazy(() => GetProjectWorkflowRunsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowRunsResponse$ {
    /** @deprecated use `GetProjectWorkflowRunsResponse$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowRunsResponse$inboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsResponse$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowRunsResponse$outboundSchema;
    /** @deprecated use `GetProjectWorkflowRunsResponse$Outbound` instead. */
    export type Outbound = GetProjectWorkflowRunsResponse$Outbound;
}
