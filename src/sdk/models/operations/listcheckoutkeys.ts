/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The fingerprint digest type to return. This may be either `md5` or `sha256`. If not passed, defaults to `md5`.
 */
export const Digest = {
    Sha256: "sha256",
    Md5: "md5",
} as const;
/**
 * The fingerprint digest type to return. This may be either `md5` or `sha256`. If not passed, defaults to `md5`.
 */
export type Digest = ClosedEnum<typeof Digest>;

export type ListCheckoutKeysRequest = {
    /**
     * The fingerprint digest type to return. This may be either `md5` or `sha256`. If not passed, defaults to `md5`.
     */
    digest?: Digest | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type ListCheckoutKeysResponseBody = {
    message?: string | undefined;
};

/**
 * The type of checkout key. This may be either `deploy-key` or `github-user-key`.
 */
export const ListCheckoutKeysCheckoutKeyType = {
    DeployKey: "deploy-key",
    GithubUserKey: "github-user-key",
} as const;
/**
 * The type of checkout key. This may be either `deploy-key` or `github-user-key`.
 */
export type ListCheckoutKeysCheckoutKeyType = ClosedEnum<typeof ListCheckoutKeysCheckoutKeyType>;

/**
 * A checkout key
 */
export type CheckoutKey = {
    /**
     * The date and time the checkout key was created.
     */
    createdAt: Date;
    /**
     * An SSH key fingerprint.
     */
    fingerprint: string;
    /**
     * A boolean value that indicates if this key is preferred.
     */
    preferred: boolean;
    /**
     * A public SSH key.
     */
    publicKey: string;
    /**
     * The type of checkout key. This may be either `deploy-key` or `github-user-key`.
     */
    type: ListCheckoutKeysCheckoutKeyType;
};

/**
 * A sequence of checkout keys.
 */
export type ListCheckoutKeysCheckoutKeyListResponse = {
    items: Array<CheckoutKey>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListCheckoutKeysResponse =
    | ListCheckoutKeysResponseBody
    | ListCheckoutKeysCheckoutKeyListResponse;

/** @internal */
export const Digest$inboundSchema: z.ZodNativeEnum<typeof Digest> = z.nativeEnum(Digest);

/** @internal */
export const Digest$outboundSchema: z.ZodNativeEnum<typeof Digest> = Digest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Digest$ {
    /** @deprecated use `Digest$inboundSchema` instead. */
    export const inboundSchema = Digest$inboundSchema;
    /** @deprecated use `Digest$outboundSchema` instead. */
    export const outboundSchema = Digest$outboundSchema;
}

/** @internal */
export const ListCheckoutKeysRequest$inboundSchema: z.ZodType<
    ListCheckoutKeysRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        digest: Digest$inboundSchema.optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type ListCheckoutKeysRequest$Outbound = {
    digest?: string | undefined;
    "project-slug": string;
};

/** @internal */
export const ListCheckoutKeysRequest$outboundSchema: z.ZodType<
    ListCheckoutKeysRequest$Outbound,
    z.ZodTypeDef,
    ListCheckoutKeysRequest
> = z
    .object({
        digest: Digest$outboundSchema.optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCheckoutKeysRequest$ {
    /** @deprecated use `ListCheckoutKeysRequest$inboundSchema` instead. */
    export const inboundSchema = ListCheckoutKeysRequest$inboundSchema;
    /** @deprecated use `ListCheckoutKeysRequest$outboundSchema` instead. */
    export const outboundSchema = ListCheckoutKeysRequest$outboundSchema;
    /** @deprecated use `ListCheckoutKeysRequest$Outbound` instead. */
    export type Outbound = ListCheckoutKeysRequest$Outbound;
}

/** @internal */
export const ListCheckoutKeysResponseBody$inboundSchema: z.ZodType<
    ListCheckoutKeysResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListCheckoutKeysResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListCheckoutKeysResponseBody$outboundSchema: z.ZodType<
    ListCheckoutKeysResponseBody$Outbound,
    z.ZodTypeDef,
    ListCheckoutKeysResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCheckoutKeysResponseBody$ {
    /** @deprecated use `ListCheckoutKeysResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListCheckoutKeysResponseBody$inboundSchema;
    /** @deprecated use `ListCheckoutKeysResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListCheckoutKeysResponseBody$outboundSchema;
    /** @deprecated use `ListCheckoutKeysResponseBody$Outbound` instead. */
    export type Outbound = ListCheckoutKeysResponseBody$Outbound;
}

/** @internal */
export const ListCheckoutKeysCheckoutKeyType$inboundSchema: z.ZodNativeEnum<
    typeof ListCheckoutKeysCheckoutKeyType
> = z.nativeEnum(ListCheckoutKeysCheckoutKeyType);

/** @internal */
export const ListCheckoutKeysCheckoutKeyType$outboundSchema: z.ZodNativeEnum<
    typeof ListCheckoutKeysCheckoutKeyType
> = ListCheckoutKeysCheckoutKeyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCheckoutKeysCheckoutKeyType$ {
    /** @deprecated use `ListCheckoutKeysCheckoutKeyType$inboundSchema` instead. */
    export const inboundSchema = ListCheckoutKeysCheckoutKeyType$inboundSchema;
    /** @deprecated use `ListCheckoutKeysCheckoutKeyType$outboundSchema` instead. */
    export const outboundSchema = ListCheckoutKeysCheckoutKeyType$outboundSchema;
}

/** @internal */
export const CheckoutKey$inboundSchema: z.ZodType<CheckoutKey, z.ZodTypeDef, unknown> = z
    .object({
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        fingerprint: z.string(),
        preferred: z.boolean(),
        "public-key": z.string(),
        type: ListCheckoutKeysCheckoutKeyType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "public-key": "publicKey",
        });
    });

/** @internal */
export type CheckoutKey$Outbound = {
    "created-at": string;
    fingerprint: string;
    preferred: boolean;
    "public-key": string;
    type: string;
};

/** @internal */
export const CheckoutKey$outboundSchema: z.ZodType<
    CheckoutKey$Outbound,
    z.ZodTypeDef,
    CheckoutKey
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        fingerprint: z.string(),
        preferred: z.boolean(),
        publicKey: z.string(),
        type: ListCheckoutKeysCheckoutKeyType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            publicKey: "public-key",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutKey$ {
    /** @deprecated use `CheckoutKey$inboundSchema` instead. */
    export const inboundSchema = CheckoutKey$inboundSchema;
    /** @deprecated use `CheckoutKey$outboundSchema` instead. */
    export const outboundSchema = CheckoutKey$outboundSchema;
    /** @deprecated use `CheckoutKey$Outbound` instead. */
    export type Outbound = CheckoutKey$Outbound;
}

/** @internal */
export const ListCheckoutKeysCheckoutKeyListResponse$inboundSchema: z.ZodType<
    ListCheckoutKeysCheckoutKeyListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => CheckoutKey$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListCheckoutKeysCheckoutKeyListResponse$Outbound = {
    items: Array<CheckoutKey$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListCheckoutKeysCheckoutKeyListResponse$outboundSchema: z.ZodType<
    ListCheckoutKeysCheckoutKeyListResponse$Outbound,
    z.ZodTypeDef,
    ListCheckoutKeysCheckoutKeyListResponse
> = z
    .object({
        items: z.array(z.lazy(() => CheckoutKey$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCheckoutKeysCheckoutKeyListResponse$ {
    /** @deprecated use `ListCheckoutKeysCheckoutKeyListResponse$inboundSchema` instead. */
    export const inboundSchema = ListCheckoutKeysCheckoutKeyListResponse$inboundSchema;
    /** @deprecated use `ListCheckoutKeysCheckoutKeyListResponse$outboundSchema` instead. */
    export const outboundSchema = ListCheckoutKeysCheckoutKeyListResponse$outboundSchema;
    /** @deprecated use `ListCheckoutKeysCheckoutKeyListResponse$Outbound` instead. */
    export type Outbound = ListCheckoutKeysCheckoutKeyListResponse$Outbound;
}

/** @internal */
export const ListCheckoutKeysResponse$inboundSchema: z.ZodType<
    ListCheckoutKeysResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListCheckoutKeysResponseBody$inboundSchema),
    z.lazy(() => ListCheckoutKeysCheckoutKeyListResponse$inboundSchema),
]);

/** @internal */
export type ListCheckoutKeysResponse$Outbound =
    | ListCheckoutKeysResponseBody$Outbound
    | ListCheckoutKeysCheckoutKeyListResponse$Outbound;

/** @internal */
export const ListCheckoutKeysResponse$outboundSchema: z.ZodType<
    ListCheckoutKeysResponse$Outbound,
    z.ZodTypeDef,
    ListCheckoutKeysResponse
> = z.union([
    z.lazy(() => ListCheckoutKeysResponseBody$outboundSchema),
    z.lazy(() => ListCheckoutKeysCheckoutKeyListResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCheckoutKeysResponse$ {
    /** @deprecated use `ListCheckoutKeysResponse$inboundSchema` instead. */
    export const inboundSchema = ListCheckoutKeysResponse$inboundSchema;
    /** @deprecated use `ListCheckoutKeysResponse$outboundSchema` instead. */
    export const outboundSchema = ListCheckoutKeysResponse$outboundSchema;
    /** @deprecated use `ListCheckoutKeysResponse$Outbound` instead. */
    export type Outbound = ListCheckoutKeysResponse$Outbound;
}
