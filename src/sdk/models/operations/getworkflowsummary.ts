/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetWorkflowSummaryRequest = {
    /**
     * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
     */
    allBranches?: boolean | undefined;
    /**
     * The name of a vcs branch. If not passed we will scope the API call to the default branch.
     */
    branch?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Error response.
 */
export type GetWorkflowSummaryInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Metrics relating to the duration of runs for a workflow.
 */
export type DurationMetrics = {
    /**
     * The max duration, in seconds, among a group of runs.
     */
    max: number;
    /**
     * The mean duration, in seconds, among a group of runs.
     */
    mean: number;
    /**
     * The median duration, in seconds, among a group of runs.
     */
    median: number;
    /**
     * The minimum duration, in seconds, among a group of runs.
     */
    min: number;
    /**
     * The 95th percentile duration, in seconds, among a group of runs.
     */
    p95: number;
    /**
     * The standard deviation, in seconds, among a group of runs.
     */
    standardDeviation: number;
};

/**
 * Metrics aggregated across a workflow for a given time window.
 */
export type Metrics = {
    /**
     * The number of runs that ran to completion within the aggregation window
     */
    completedRuns: number;
    /**
     * Metrics relating to the duration of runs for a workflow.
     */
    durationMetrics: DurationMetrics;
    /**
     * The number of failed runs.
     */
    failedRuns: number;
    /**
     * The mean time to recovery (mean time between failures and their next success) in seconds.
     */
    mttr: number;
    successRate: number;
    /**
     * The number of successful runs.
     */
    successfulRuns: number;
    /**
     * The average number of runs per day.
     */
    throughput: number;
    /**
     * The total credits consumed by the workflow in the aggregation window. Note that Insights is not a real time financial reporting tool and should not be used for credit reporting.
     */
    totalCreditsUsed: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
    /**
     * The timestamp of the last build within the requested reporting window.
     */
    windowEnd: Date;
    /**
     * The timestamp of the first build within the requested reporting window.
     */
    windowStart: Date;
};

/**
 * Trends for aggregated metrics across a workflow for a given time window.
 */
export type Trends = {
    /**
     * The trend value for number of failed runs.
     */
    failedRuns: number;
    /**
     * Trend value for the 50th percentile duration for a workflow for a given time window.
     */
    medianDurationSecs: number;
    /**
     * trend for mean time to recovery (mean time between failures and their next success).
     */
    mttr: number;
    /**
     * Trend value for the 95th percentile duration for a workflow for a given time window.
     */
    p95DurationSecs: number;
    /**
     * The trend value for the success rate.
     */
    successRate: number;
    /**
     * Trend value for the average number of runs per day.
     */
    throughput: number;
    /**
     * The trend value for total credits consumed.
     */
    totalCreditsUsed: number;
    /**
     * The trend value for total number of runs.
     */
    totalRuns: number;
};

/**
 * Workflow level aggregated metrics and trends response
 */
export type GetWorkflowSummaryResponseBody = {
    /**
     * Metrics aggregated across a workflow for a given time window.
     */
    metrics: Metrics;
    /**
     * Trends for aggregated metrics across a workflow for a given time window.
     */
    trends: Trends;
    /**
     * A list of all the workflow names for a given project.
     */
    workflowNames: Array<string>;
};

export type GetWorkflowSummaryResponse =
    | GetWorkflowSummaryInsightsResponseBody
    | GetWorkflowSummaryResponseBody;

/** @internal */
export const GetWorkflowSummaryRequest$inboundSchema: z.ZodType<
    GetWorkflowSummaryRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "all-branches": z.boolean().optional(),
        branch: z.string().optional(),
        "project-slug": z.string(),
        "workflow-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "all-branches": "allBranches",
            "project-slug": "projectSlug",
            "workflow-name": "workflowName",
        });
    });

/** @internal */
export type GetWorkflowSummaryRequest$Outbound = {
    "all-branches"?: boolean | undefined;
    branch?: string | undefined;
    "project-slug": string;
    "workflow-name": string;
};

/** @internal */
export const GetWorkflowSummaryRequest$outboundSchema: z.ZodType<
    GetWorkflowSummaryRequest$Outbound,
    z.ZodTypeDef,
    GetWorkflowSummaryRequest
> = z
    .object({
        allBranches: z.boolean().optional(),
        branch: z.string().optional(),
        projectSlug: z.string(),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            allBranches: "all-branches",
            projectSlug: "project-slug",
            workflowName: "workflow-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowSummaryRequest$ {
    /** @deprecated use `GetWorkflowSummaryRequest$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowSummaryRequest$inboundSchema;
    /** @deprecated use `GetWorkflowSummaryRequest$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowSummaryRequest$outboundSchema;
    /** @deprecated use `GetWorkflowSummaryRequest$Outbound` instead. */
    export type Outbound = GetWorkflowSummaryRequest$Outbound;
}

/** @internal */
export const GetWorkflowSummaryInsightsResponseBody$inboundSchema: z.ZodType<
    GetWorkflowSummaryInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetWorkflowSummaryInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetWorkflowSummaryInsightsResponseBody$outboundSchema: z.ZodType<
    GetWorkflowSummaryInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetWorkflowSummaryInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowSummaryInsightsResponseBody$ {
    /** @deprecated use `GetWorkflowSummaryInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowSummaryInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetWorkflowSummaryInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowSummaryInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetWorkflowSummaryInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetWorkflowSummaryInsightsResponseBody$Outbound;
}

/** @internal */
export const DurationMetrics$inboundSchema: z.ZodType<DurationMetrics, z.ZodTypeDef, unknown> = z
    .object({
        max: z.number().int(),
        mean: z.number().int(),
        median: z.number().int(),
        min: z.number().int(),
        p95: z.number().int(),
        standard_deviation: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            standard_deviation: "standardDeviation",
        });
    });

/** @internal */
export type DurationMetrics$Outbound = {
    max: number;
    mean: number;
    median: number;
    min: number;
    p95: number;
    standard_deviation: number;
};

/** @internal */
export const DurationMetrics$outboundSchema: z.ZodType<
    DurationMetrics$Outbound,
    z.ZodTypeDef,
    DurationMetrics
> = z
    .object({
        max: z.number().int(),
        mean: z.number().int(),
        median: z.number().int(),
        min: z.number().int(),
        p95: z.number().int(),
        standardDeviation: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            standardDeviation: "standard_deviation",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DurationMetrics$ {
    /** @deprecated use `DurationMetrics$inboundSchema` instead. */
    export const inboundSchema = DurationMetrics$inboundSchema;
    /** @deprecated use `DurationMetrics$outboundSchema` instead. */
    export const outboundSchema = DurationMetrics$outboundSchema;
    /** @deprecated use `DurationMetrics$Outbound` instead. */
    export type Outbound = DurationMetrics$Outbound;
}

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> = z
    .object({
        completed_runs: z.number().int(),
        duration_metrics: z.lazy(() => DurationMetrics$inboundSchema),
        failed_runs: z.number().int(),
        mttr: z.number().int(),
        success_rate: z.number(),
        successful_runs: z.number().int(),
        throughput: z.number(),
        total_credits_used: z.number().int(),
        total_runs: z.number().int(),
        window_end: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        window_start: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            completed_runs: "completedRuns",
            duration_metrics: "durationMetrics",
            failed_runs: "failedRuns",
            success_rate: "successRate",
            successful_runs: "successfulRuns",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
            window_end: "windowEnd",
            window_start: "windowStart",
        });
    });

/** @internal */
export type Metrics$Outbound = {
    completed_runs: number;
    duration_metrics: DurationMetrics$Outbound;
    failed_runs: number;
    mttr: number;
    success_rate: number;
    successful_runs: number;
    throughput: number;
    total_credits_used: number;
    total_runs: number;
    window_end: string;
    window_start: string;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<Metrics$Outbound, z.ZodTypeDef, Metrics> = z
    .object({
        completedRuns: z.number().int(),
        durationMetrics: z.lazy(() => DurationMetrics$outboundSchema),
        failedRuns: z.number().int(),
        mttr: z.number().int(),
        successRate: z.number(),
        successfulRuns: z.number().int(),
        throughput: z.number(),
        totalCreditsUsed: z.number().int(),
        totalRuns: z.number().int(),
        windowEnd: z.date().transform((v) => v.toISOString()),
        windowStart: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            completedRuns: "completed_runs",
            durationMetrics: "duration_metrics",
            failedRuns: "failed_runs",
            successRate: "success_rate",
            successfulRuns: "successful_runs",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
            windowEnd: "window_end",
            windowStart: "window_start",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
    /** @deprecated use `Metrics$inboundSchema` instead. */
    export const inboundSchema = Metrics$inboundSchema;
    /** @deprecated use `Metrics$outboundSchema` instead. */
    export const outboundSchema = Metrics$outboundSchema;
    /** @deprecated use `Metrics$Outbound` instead. */
    export type Outbound = Metrics$Outbound;
}

/** @internal */
export const Trends$inboundSchema: z.ZodType<Trends, z.ZodTypeDef, unknown> = z
    .object({
        failed_runs: z.number(),
        median_duration_secs: z.number(),
        mttr: z.number(),
        p95_duration_secs: z.number(),
        success_rate: z.number(),
        throughput: z.number(),
        total_credits_used: z.number(),
        total_runs: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            failed_runs: "failedRuns",
            median_duration_secs: "medianDurationSecs",
            p95_duration_secs: "p95DurationSecs",
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type Trends$Outbound = {
    failed_runs: number;
    median_duration_secs: number;
    mttr: number;
    p95_duration_secs: number;
    success_rate: number;
    throughput: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const Trends$outboundSchema: z.ZodType<Trends$Outbound, z.ZodTypeDef, Trends> = z
    .object({
        failedRuns: z.number(),
        medianDurationSecs: z.number(),
        mttr: z.number(),
        p95DurationSecs: z.number(),
        successRate: z.number(),
        throughput: z.number(),
        totalCreditsUsed: z.number(),
        totalRuns: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            failedRuns: "failed_runs",
            medianDurationSecs: "median_duration_secs",
            p95DurationSecs: "p95_duration_secs",
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trends$ {
    /** @deprecated use `Trends$inboundSchema` instead. */
    export const inboundSchema = Trends$inboundSchema;
    /** @deprecated use `Trends$outboundSchema` instead. */
    export const outboundSchema = Trends$outboundSchema;
    /** @deprecated use `Trends$Outbound` instead. */
    export type Outbound = Trends$Outbound;
}

/** @internal */
export const GetWorkflowSummaryResponseBody$inboundSchema: z.ZodType<
    GetWorkflowSummaryResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        metrics: z.lazy(() => Metrics$inboundSchema),
        trends: z.lazy(() => Trends$inboundSchema),
        workflow_names: z.array(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_names: "workflowNames",
        });
    });

/** @internal */
export type GetWorkflowSummaryResponseBody$Outbound = {
    metrics: Metrics$Outbound;
    trends: Trends$Outbound;
    workflow_names: Array<string>;
};

/** @internal */
export const GetWorkflowSummaryResponseBody$outboundSchema: z.ZodType<
    GetWorkflowSummaryResponseBody$Outbound,
    z.ZodTypeDef,
    GetWorkflowSummaryResponseBody
> = z
    .object({
        metrics: z.lazy(() => Metrics$outboundSchema),
        trends: z.lazy(() => Trends$outboundSchema),
        workflowNames: z.array(z.string()),
    })
    .transform((v) => {
        return remap$(v, {
            workflowNames: "workflow_names",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowSummaryResponseBody$ {
    /** @deprecated use `GetWorkflowSummaryResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowSummaryResponseBody$inboundSchema;
    /** @deprecated use `GetWorkflowSummaryResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowSummaryResponseBody$outboundSchema;
    /** @deprecated use `GetWorkflowSummaryResponseBody$Outbound` instead. */
    export type Outbound = GetWorkflowSummaryResponseBody$Outbound;
}

/** @internal */
export const GetWorkflowSummaryResponse$inboundSchema: z.ZodType<
    GetWorkflowSummaryResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetWorkflowSummaryInsightsResponseBody$inboundSchema),
    z.lazy(() => GetWorkflowSummaryResponseBody$inboundSchema),
]);

/** @internal */
export type GetWorkflowSummaryResponse$Outbound =
    | GetWorkflowSummaryInsightsResponseBody$Outbound
    | GetWorkflowSummaryResponseBody$Outbound;

/** @internal */
export const GetWorkflowSummaryResponse$outboundSchema: z.ZodType<
    GetWorkflowSummaryResponse$Outbound,
    z.ZodTypeDef,
    GetWorkflowSummaryResponse
> = z.union([
    z.lazy(() => GetWorkflowSummaryInsightsResponseBody$outboundSchema),
    z.lazy(() => GetWorkflowSummaryResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowSummaryResponse$ {
    /** @deprecated use `GetWorkflowSummaryResponse$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowSummaryResponse$inboundSchema;
    /** @deprecated use `GetWorkflowSummaryResponse$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowSummaryResponse$outboundSchema;
    /** @deprecated use `GetWorkflowSummaryResponse$Outbound` instead. */
    export type Outbound = GetWorkflowSummaryResponse$Outbound;
}
