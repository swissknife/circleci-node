/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The granularity for which to query timeseries data.
 */
export const Granularity = {
    Daily: "daily",
    Hourly: "hourly",
} as const;
/**
 * The granularity for which to query timeseries data.
 */
export type Granularity = ClosedEnum<typeof Granularity>;

export type GetJobTimeseriesRequest = {
    /**
     * The name of a vcs branch. If not passed we will scope the API call to the default branch.
     */
    branch?: string | undefined;
    /**
     * Include only executions that started before this date. This date can be at most 90 days after the start-date.
     */
    endDate?: Date | undefined;
    /**
     * The granularity for which to query timeseries data.
     */
    granularity?: Granularity | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * Include only executions that started at or after this date. This must be specified if an end-date is provided.
     */
    startDate?: Date | undefined;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Error response.
 */
export type GetJobTimeseriesInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Metrics relating to the duration of runs for a workflow.
 */
export type GetJobTimeseriesDurationMetrics = {
    /**
     * The max duration, in seconds, among a group of runs.
     */
    max: number;
    /**
     * The median duration, in seconds, among a group of runs.
     */
    median: number;
    /**
     * The minimum duration, in seconds, among a group of runs.
     */
    min: number;
    /**
     * The 95th percentile duration, in seconds, among a group of runs.
     */
    p95: number;
    /**
     * The total duration, in seconds, added across a group of runs.
     */
    total: number;
};

/**
 * Metrics relating to a workflow's runs.
 */
export type GetJobTimeseriesMetrics = {
    /**
     * Metrics relating to the duration of runs for a workflow.
     */
    durationMetrics: GetJobTimeseriesDurationMetrics;
    /**
     * The number of failed runs.
     */
    failedRuns: number;
    /**
     * The median credits consumed over the current timeseries interval.
     */
    medianCreditsUsed: number;
    /**
     * The number of successful runs.
     */
    successfulRuns: number;
    /**
     * The average number of runs per day.
     */
    throughput: number;
    /**
     * The total credits consumed over the current timeseries interval.
     */
    totalCreditsUsed: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

export type GetJobTimeseriesItems = {
    /**
     * The end time of the last execution included in the metrics.
     */
    maxEndedAt: Date;
    /**
     * Metrics relating to a workflow's runs.
     */
    metrics: GetJobTimeseriesMetrics;
    /**
     * The start time for the earliest execution included in the metrics.
     */
    minStartedAt: Date;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * The start of the interval for timeseries metrics.
     */
    timestamp: Date;
};

/**
 * Project level timeseries metrics response
 */
export type GetJobTimeseriesResponseBody = {
    /**
     * Aggregate metrics for a workflow at a time granularity
     */
    items: Array<GetJobTimeseriesItems>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type GetJobTimeseriesResponse =
    | GetJobTimeseriesInsightsResponseBody
    | GetJobTimeseriesResponseBody;

/** @internal */
export const Granularity$inboundSchema: z.ZodNativeEnum<typeof Granularity> =
    z.nativeEnum(Granularity);

/** @internal */
export const Granularity$outboundSchema: z.ZodNativeEnum<typeof Granularity> =
    Granularity$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Granularity$ {
    /** @deprecated use `Granularity$inboundSchema` instead. */
    export const inboundSchema = Granularity$inboundSchema;
    /** @deprecated use `Granularity$outboundSchema` instead. */
    export const outboundSchema = Granularity$outboundSchema;
}

/** @internal */
export const GetJobTimeseriesRequest$inboundSchema: z.ZodType<
    GetJobTimeseriesRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branch: z.string().optional(),
        "end-date": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        granularity: Granularity$inboundSchema.optional(),
        "project-slug": z.string(),
        "start-date": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        "workflow-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "end-date": "endDate",
            "project-slug": "projectSlug",
            "start-date": "startDate",
            "workflow-name": "workflowName",
        });
    });

/** @internal */
export type GetJobTimeseriesRequest$Outbound = {
    branch?: string | undefined;
    "end-date"?: string | undefined;
    granularity?: string | undefined;
    "project-slug": string;
    "start-date"?: string | undefined;
    "workflow-name": string;
};

/** @internal */
export const GetJobTimeseriesRequest$outboundSchema: z.ZodType<
    GetJobTimeseriesRequest$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesRequest
> = z
    .object({
        branch: z.string().optional(),
        endDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        granularity: Granularity$outboundSchema.optional(),
        projectSlug: z.string(),
        startDate: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            endDate: "end-date",
            projectSlug: "project-slug",
            startDate: "start-date",
            workflowName: "workflow-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesRequest$ {
    /** @deprecated use `GetJobTimeseriesRequest$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesRequest$inboundSchema;
    /** @deprecated use `GetJobTimeseriesRequest$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesRequest$outboundSchema;
    /** @deprecated use `GetJobTimeseriesRequest$Outbound` instead. */
    export type Outbound = GetJobTimeseriesRequest$Outbound;
}

/** @internal */
export const GetJobTimeseriesInsightsResponseBody$inboundSchema: z.ZodType<
    GetJobTimeseriesInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetJobTimeseriesInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetJobTimeseriesInsightsResponseBody$outboundSchema: z.ZodType<
    GetJobTimeseriesInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesInsightsResponseBody$ {
    /** @deprecated use `GetJobTimeseriesInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetJobTimeseriesInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetJobTimeseriesInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetJobTimeseriesInsightsResponseBody$Outbound;
}

/** @internal */
export const GetJobTimeseriesDurationMetrics$inboundSchema: z.ZodType<
    GetJobTimeseriesDurationMetrics,
    z.ZodTypeDef,
    unknown
> = z.object({
    max: z.number().int(),
    median: z.number().int(),
    min: z.number().int(),
    p95: z.number().int(),
    total: z.number().int(),
});

/** @internal */
export type GetJobTimeseriesDurationMetrics$Outbound = {
    max: number;
    median: number;
    min: number;
    p95: number;
    total: number;
};

/** @internal */
export const GetJobTimeseriesDurationMetrics$outboundSchema: z.ZodType<
    GetJobTimeseriesDurationMetrics$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesDurationMetrics
> = z.object({
    max: z.number().int(),
    median: z.number().int(),
    min: z.number().int(),
    p95: z.number().int(),
    total: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesDurationMetrics$ {
    /** @deprecated use `GetJobTimeseriesDurationMetrics$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesDurationMetrics$inboundSchema;
    /** @deprecated use `GetJobTimeseriesDurationMetrics$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesDurationMetrics$outboundSchema;
    /** @deprecated use `GetJobTimeseriesDurationMetrics$Outbound` instead. */
    export type Outbound = GetJobTimeseriesDurationMetrics$Outbound;
}

/** @internal */
export const GetJobTimeseriesMetrics$inboundSchema: z.ZodType<
    GetJobTimeseriesMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        duration_metrics: z.lazy(() => GetJobTimeseriesDurationMetrics$inboundSchema),
        failed_runs: z.number().int(),
        median_credits_used: z.number().int(),
        successful_runs: z.number().int(),
        throughput: z.number(),
        total_credits_used: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            duration_metrics: "durationMetrics",
            failed_runs: "failedRuns",
            median_credits_used: "medianCreditsUsed",
            successful_runs: "successfulRuns",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetJobTimeseriesMetrics$Outbound = {
    duration_metrics: GetJobTimeseriesDurationMetrics$Outbound;
    failed_runs: number;
    median_credits_used: number;
    successful_runs: number;
    throughput: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const GetJobTimeseriesMetrics$outboundSchema: z.ZodType<
    GetJobTimeseriesMetrics$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesMetrics
> = z
    .object({
        durationMetrics: z.lazy(() => GetJobTimeseriesDurationMetrics$outboundSchema),
        failedRuns: z.number().int(),
        medianCreditsUsed: z.number().int(),
        successfulRuns: z.number().int(),
        throughput: z.number(),
        totalCreditsUsed: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            durationMetrics: "duration_metrics",
            failedRuns: "failed_runs",
            medianCreditsUsed: "median_credits_used",
            successfulRuns: "successful_runs",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesMetrics$ {
    /** @deprecated use `GetJobTimeseriesMetrics$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesMetrics$inboundSchema;
    /** @deprecated use `GetJobTimeseriesMetrics$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesMetrics$outboundSchema;
    /** @deprecated use `GetJobTimeseriesMetrics$Outbound` instead. */
    export type Outbound = GetJobTimeseriesMetrics$Outbound;
}

/** @internal */
export const GetJobTimeseriesItems$inboundSchema: z.ZodType<
    GetJobTimeseriesItems,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        max_ended_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        metrics: z.lazy(() => GetJobTimeseriesMetrics$inboundSchema),
        min_started_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        name: z.string(),
        timestamp: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            max_ended_at: "maxEndedAt",
            min_started_at: "minStartedAt",
        });
    });

/** @internal */
export type GetJobTimeseriesItems$Outbound = {
    max_ended_at: string;
    metrics: GetJobTimeseriesMetrics$Outbound;
    min_started_at: string;
    name: string;
    timestamp: string;
};

/** @internal */
export const GetJobTimeseriesItems$outboundSchema: z.ZodType<
    GetJobTimeseriesItems$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesItems
> = z
    .object({
        maxEndedAt: z.date().transform((v) => v.toISOString()),
        metrics: z.lazy(() => GetJobTimeseriesMetrics$outboundSchema),
        minStartedAt: z.date().transform((v) => v.toISOString()),
        name: z.string(),
        timestamp: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            maxEndedAt: "max_ended_at",
            minStartedAt: "min_started_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesItems$ {
    /** @deprecated use `GetJobTimeseriesItems$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesItems$inboundSchema;
    /** @deprecated use `GetJobTimeseriesItems$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesItems$outboundSchema;
    /** @deprecated use `GetJobTimeseriesItems$Outbound` instead. */
    export type Outbound = GetJobTimeseriesItems$Outbound;
}

/** @internal */
export const GetJobTimeseriesResponseBody$inboundSchema: z.ZodType<
    GetJobTimeseriesResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => GetJobTimeseriesItems$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type GetJobTimeseriesResponseBody$Outbound = {
    items: Array<GetJobTimeseriesItems$Outbound>;
    next_page_token: string;
};

/** @internal */
export const GetJobTimeseriesResponseBody$outboundSchema: z.ZodType<
    GetJobTimeseriesResponseBody$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => GetJobTimeseriesItems$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesResponseBody$ {
    /** @deprecated use `GetJobTimeseriesResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesResponseBody$inboundSchema;
    /** @deprecated use `GetJobTimeseriesResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesResponseBody$outboundSchema;
    /** @deprecated use `GetJobTimeseriesResponseBody$Outbound` instead. */
    export type Outbound = GetJobTimeseriesResponseBody$Outbound;
}

/** @internal */
export const GetJobTimeseriesResponse$inboundSchema: z.ZodType<
    GetJobTimeseriesResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetJobTimeseriesInsightsResponseBody$inboundSchema),
    z.lazy(() => GetJobTimeseriesResponseBody$inboundSchema),
]);

/** @internal */
export type GetJobTimeseriesResponse$Outbound =
    | GetJobTimeseriesInsightsResponseBody$Outbound
    | GetJobTimeseriesResponseBody$Outbound;

/** @internal */
export const GetJobTimeseriesResponse$outboundSchema: z.ZodType<
    GetJobTimeseriesResponse$Outbound,
    z.ZodTypeDef,
    GetJobTimeseriesResponse
> = z.union([
    z.lazy(() => GetJobTimeseriesInsightsResponseBody$outboundSchema),
    z.lazy(() => GetJobTimeseriesResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetJobTimeseriesResponse$ {
    /** @deprecated use `GetJobTimeseriesResponse$inboundSchema` instead. */
    export const inboundSchema = GetJobTimeseriesResponse$inboundSchema;
    /** @deprecated use `GetJobTimeseriesResponse$outboundSchema` instead. */
    export const outboundSchema = GetJobTimeseriesResponse$outboundSchema;
    /** @deprecated use `GetJobTimeseriesResponse$Outbound` instead. */
    export type Outbound = GetJobTimeseriesResponse$Outbound;
}
