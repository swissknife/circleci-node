/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetProjectBySlugRequest = {
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetProjectBySlugResponseBody = {
    message?: string | undefined;
};

/**
 * The VCS provider
 */
export const Provider = {
    Bitbucket: "Bitbucket",
    CircleCI: "CircleCI",
    GitHub: "GitHub",
} as const;
/**
 * The VCS provider
 */
export type Provider = ClosedEnum<typeof Provider>;

/**
 * Information about the VCS that hosts the project source code.
 */
export type VcsInfo = {
    defaultBranch: string;
    /**
     * The VCS provider
     */
    provider: Provider;
    /**
     * URL to the repository hosting the project's code
     */
    vcsUrl: string;
};

/**
 * NOTE: The definition of Project is subject to change.
 */
export type GetProjectBySlugProject = {
    id: string;
    /**
     * The name of the project
     */
    name: string;
    /**
     * The id of the organization the project belongs to
     */
    organizationId: string;
    /**
     * The name of the organization the project belongs to
     */
    organizationName: string;
    /**
     * The slug of the organization the project belongs to
     */
    organizationSlug: string;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    slug: string;
    /**
     * Information about the VCS that hosts the project source code.
     */
    vcsInfo: VcsInfo;
};

export type GetProjectBySlugResponse = GetProjectBySlugResponseBody | GetProjectBySlugProject;

/** @internal */
export const GetProjectBySlugRequest$inboundSchema: z.ZodType<
    GetProjectBySlugRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetProjectBySlugRequest$Outbound = {
    "project-slug": string;
};

/** @internal */
export const GetProjectBySlugRequest$outboundSchema: z.ZodType<
    GetProjectBySlugRequest$Outbound,
    z.ZodTypeDef,
    GetProjectBySlugRequest
> = z
    .object({
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectBySlugRequest$ {
    /** @deprecated use `GetProjectBySlugRequest$inboundSchema` instead. */
    export const inboundSchema = GetProjectBySlugRequest$inboundSchema;
    /** @deprecated use `GetProjectBySlugRequest$outboundSchema` instead. */
    export const outboundSchema = GetProjectBySlugRequest$outboundSchema;
    /** @deprecated use `GetProjectBySlugRequest$Outbound` instead. */
    export type Outbound = GetProjectBySlugRequest$Outbound;
}

/** @internal */
export const GetProjectBySlugResponseBody$inboundSchema: z.ZodType<
    GetProjectBySlugResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetProjectBySlugResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetProjectBySlugResponseBody$outboundSchema: z.ZodType<
    GetProjectBySlugResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectBySlugResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectBySlugResponseBody$ {
    /** @deprecated use `GetProjectBySlugResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectBySlugResponseBody$inboundSchema;
    /** @deprecated use `GetProjectBySlugResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectBySlugResponseBody$outboundSchema;
    /** @deprecated use `GetProjectBySlugResponseBody$Outbound` instead. */
    export type Outbound = GetProjectBySlugResponseBody$Outbound;
}

/** @internal */
export const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider> = z.nativeEnum(Provider);

/** @internal */
export const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider> = Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Provider$ {
    /** @deprecated use `Provider$inboundSchema` instead. */
    export const inboundSchema = Provider$inboundSchema;
    /** @deprecated use `Provider$outboundSchema` instead. */
    export const outboundSchema = Provider$outboundSchema;
}

/** @internal */
export const VcsInfo$inboundSchema: z.ZodType<VcsInfo, z.ZodTypeDef, unknown> = z
    .object({
        default_branch: z.string(),
        provider: Provider$inboundSchema,
        vcs_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            default_branch: "defaultBranch",
            vcs_url: "vcsUrl",
        });
    });

/** @internal */
export type VcsInfo$Outbound = {
    default_branch: string;
    provider: string;
    vcs_url: string;
};

/** @internal */
export const VcsInfo$outboundSchema: z.ZodType<VcsInfo$Outbound, z.ZodTypeDef, VcsInfo> = z
    .object({
        defaultBranch: z.string(),
        provider: Provider$outboundSchema,
        vcsUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            defaultBranch: "default_branch",
            vcsUrl: "vcs_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VcsInfo$ {
    /** @deprecated use `VcsInfo$inboundSchema` instead. */
    export const inboundSchema = VcsInfo$inboundSchema;
    /** @deprecated use `VcsInfo$outboundSchema` instead. */
    export const outboundSchema = VcsInfo$outboundSchema;
    /** @deprecated use `VcsInfo$Outbound` instead. */
    export type Outbound = VcsInfo$Outbound;
}

/** @internal */
export const GetProjectBySlugProject$inboundSchema: z.ZodType<
    GetProjectBySlugProject,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        name: z.string(),
        organization_id: z.string(),
        organization_name: z.string(),
        organization_slug: z.string(),
        slug: z.string(),
        vcs_info: z.lazy(() => VcsInfo$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            organization_id: "organizationId",
            organization_name: "organizationName",
            organization_slug: "organizationSlug",
            vcs_info: "vcsInfo",
        });
    });

/** @internal */
export type GetProjectBySlugProject$Outbound = {
    id: string;
    name: string;
    organization_id: string;
    organization_name: string;
    organization_slug: string;
    slug: string;
    vcs_info: VcsInfo$Outbound;
};

/** @internal */
export const GetProjectBySlugProject$outboundSchema: z.ZodType<
    GetProjectBySlugProject$Outbound,
    z.ZodTypeDef,
    GetProjectBySlugProject
> = z
    .object({
        id: z.string(),
        name: z.string(),
        organizationId: z.string(),
        organizationName: z.string(),
        organizationSlug: z.string(),
        slug: z.string(),
        vcsInfo: z.lazy(() => VcsInfo$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            organizationId: "organization_id",
            organizationName: "organization_name",
            organizationSlug: "organization_slug",
            vcsInfo: "vcs_info",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectBySlugProject$ {
    /** @deprecated use `GetProjectBySlugProject$inboundSchema` instead. */
    export const inboundSchema = GetProjectBySlugProject$inboundSchema;
    /** @deprecated use `GetProjectBySlugProject$outboundSchema` instead. */
    export const outboundSchema = GetProjectBySlugProject$outboundSchema;
    /** @deprecated use `GetProjectBySlugProject$Outbound` instead. */
    export type Outbound = GetProjectBySlugProject$Outbound;
}

/** @internal */
export const GetProjectBySlugResponse$inboundSchema: z.ZodType<
    GetProjectBySlugResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetProjectBySlugResponseBody$inboundSchema),
    z.lazy(() => GetProjectBySlugProject$inboundSchema),
]);

/** @internal */
export type GetProjectBySlugResponse$Outbound =
    | GetProjectBySlugResponseBody$Outbound
    | GetProjectBySlugProject$Outbound;

/** @internal */
export const GetProjectBySlugResponse$outboundSchema: z.ZodType<
    GetProjectBySlugResponse$Outbound,
    z.ZodTypeDef,
    GetProjectBySlugResponse
> = z.union([
    z.lazy(() => GetProjectBySlugResponseBody$outboundSchema),
    z.lazy(() => GetProjectBySlugProject$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectBySlugResponse$ {
    /** @deprecated use `GetProjectBySlugResponse$inboundSchema` instead. */
    export const inboundSchema = GetProjectBySlugResponse$inboundSchema;
    /** @deprecated use `GetProjectBySlugResponse$outboundSchema` instead. */
    export const outboundSchema = GetProjectBySlugResponse$outboundSchema;
    /** @deprecated use `GetProjectBySlugResponse$Outbound` instead. */
    export type Outbound = GetProjectBySlugResponse$Outbound;
}
