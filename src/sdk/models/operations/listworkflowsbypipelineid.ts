/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type ListWorkflowsByPipelineIdRequest = {
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
    /**
     * The unique ID of the pipeline.
     */
    pipelineId: string;
};

/**
 * Error response.
 */
export type ListWorkflowsByPipelineIdResponseBody = {
    message?: string | undefined;
};

/**
 * The current status of the workflow.
 */
export const ListWorkflowsByPipelineIdStatus = {
    Success: "success",
    Running: "running",
    NotRun: "not_run",
    Failed: "failed",
    Error: "error",
    Failing: "failing",
    OnHold: "on_hold",
    Canceled: "canceled",
    Unauthorized: "unauthorized",
} as const;
/**
 * The current status of the workflow.
 */
export type ListWorkflowsByPipelineIdStatus = ClosedEnum<typeof ListWorkflowsByPipelineIdStatus>;

/**
 * Tag used for the workflow
 */
export const ListWorkflowsByPipelineIdTag = {
    Setup: "setup",
} as const;
/**
 * Tag used for the workflow
 */
export type ListWorkflowsByPipelineIdTag = ClosedEnum<typeof ListWorkflowsByPipelineIdTag>;

/**
 * A workflow
 */
export type Workflow = {
    canceledBy?: string | undefined;
    /**
     * The date and time the workflow was created.
     */
    createdAt: Date;
    erroredBy?: string | undefined;
    /**
     * The unique ID of the workflow.
     */
    id: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * The ID of the pipeline this workflow belongs to.
     */
    pipelineId: string;
    /**
     * The number of the pipeline this workflow belongs to.
     */
    pipelineNumber: number;
    /**
     * The project-slug for the pipeline this workflow belongs to.
     */
    projectSlug: string;
    startedBy: string;
    /**
     * The current status of the workflow.
     */
    status: ListWorkflowsByPipelineIdStatus;
    /**
     * The date and time the workflow stopped.
     */
    stoppedAt: Date;
    /**
     * Tag used for the workflow
     */
    tag?: ListWorkflowsByPipelineIdTag | undefined;
};

/**
 * A list of workflows and associated pagination token.
 */
export type ListWorkflowsByPipelineIdWorkflowListResponse = {
    /**
     * A list of workflows.
     */
    items: Array<Workflow>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListWorkflowsByPipelineIdResponse =
    | ListWorkflowsByPipelineIdResponseBody
    | ListWorkflowsByPipelineIdWorkflowListResponse;

/** @internal */
export const ListWorkflowsByPipelineIdRequest$inboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "page-token": z.string().optional(),
        "pipeline-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "page-token": "pageToken",
            "pipeline-id": "pipelineId",
        });
    });

/** @internal */
export type ListWorkflowsByPipelineIdRequest$Outbound = {
    "page-token"?: string | undefined;
    "pipeline-id": string;
};

/** @internal */
export const ListWorkflowsByPipelineIdRequest$outboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdRequest$Outbound,
    z.ZodTypeDef,
    ListWorkflowsByPipelineIdRequest
> = z
    .object({
        pageToken: z.string().optional(),
        pipelineId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pageToken: "page-token",
            pipelineId: "pipeline-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowsByPipelineIdRequest$ {
    /** @deprecated use `ListWorkflowsByPipelineIdRequest$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowsByPipelineIdRequest$inboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdRequest$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowsByPipelineIdRequest$outboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdRequest$Outbound` instead. */
    export type Outbound = ListWorkflowsByPipelineIdRequest$Outbound;
}

/** @internal */
export const ListWorkflowsByPipelineIdResponseBody$inboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListWorkflowsByPipelineIdResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListWorkflowsByPipelineIdResponseBody$outboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdResponseBody$Outbound,
    z.ZodTypeDef,
    ListWorkflowsByPipelineIdResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowsByPipelineIdResponseBody$ {
    /** @deprecated use `ListWorkflowsByPipelineIdResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowsByPipelineIdResponseBody$inboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowsByPipelineIdResponseBody$outboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdResponseBody$Outbound` instead. */
    export type Outbound = ListWorkflowsByPipelineIdResponseBody$Outbound;
}

/** @internal */
export const ListWorkflowsByPipelineIdStatus$inboundSchema: z.ZodNativeEnum<
    typeof ListWorkflowsByPipelineIdStatus
> = z.nativeEnum(ListWorkflowsByPipelineIdStatus);

/** @internal */
export const ListWorkflowsByPipelineIdStatus$outboundSchema: z.ZodNativeEnum<
    typeof ListWorkflowsByPipelineIdStatus
> = ListWorkflowsByPipelineIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowsByPipelineIdStatus$ {
    /** @deprecated use `ListWorkflowsByPipelineIdStatus$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowsByPipelineIdStatus$inboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdStatus$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowsByPipelineIdStatus$outboundSchema;
}

/** @internal */
export const ListWorkflowsByPipelineIdTag$inboundSchema: z.ZodNativeEnum<
    typeof ListWorkflowsByPipelineIdTag
> = z.nativeEnum(ListWorkflowsByPipelineIdTag);

/** @internal */
export const ListWorkflowsByPipelineIdTag$outboundSchema: z.ZodNativeEnum<
    typeof ListWorkflowsByPipelineIdTag
> = ListWorkflowsByPipelineIdTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowsByPipelineIdTag$ {
    /** @deprecated use `ListWorkflowsByPipelineIdTag$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowsByPipelineIdTag$inboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdTag$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowsByPipelineIdTag$outboundSchema;
}

/** @internal */
export const Workflow$inboundSchema: z.ZodType<Workflow, z.ZodTypeDef, unknown> = z
    .object({
        canceled_by: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        errored_by: z.string().optional(),
        id: z.string(),
        name: z.string(),
        pipeline_id: z.string(),
        pipeline_number: z.number().int(),
        project_slug: z.string(),
        started_by: z.string(),
        status: ListWorkflowsByPipelineIdStatus$inboundSchema,
        stopped_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        tag: ListWorkflowsByPipelineIdTag$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            canceled_by: "canceledBy",
            created_at: "createdAt",
            errored_by: "erroredBy",
            pipeline_id: "pipelineId",
            pipeline_number: "pipelineNumber",
            project_slug: "projectSlug",
            started_by: "startedBy",
            stopped_at: "stoppedAt",
        });
    });

/** @internal */
export type Workflow$Outbound = {
    canceled_by?: string | undefined;
    created_at: string;
    errored_by?: string | undefined;
    id: string;
    name: string;
    pipeline_id: string;
    pipeline_number: number;
    project_slug: string;
    started_by: string;
    status: string;
    stopped_at: string;
    tag?: string | undefined;
};

/** @internal */
export const Workflow$outboundSchema: z.ZodType<Workflow$Outbound, z.ZodTypeDef, Workflow> = z
    .object({
        canceledBy: z.string().optional(),
        createdAt: z.date().transform((v) => v.toISOString()),
        erroredBy: z.string().optional(),
        id: z.string(),
        name: z.string(),
        pipelineId: z.string(),
        pipelineNumber: z.number().int(),
        projectSlug: z.string(),
        startedBy: z.string(),
        status: ListWorkflowsByPipelineIdStatus$outboundSchema,
        stoppedAt: z.date().transform((v) => v.toISOString()),
        tag: ListWorkflowsByPipelineIdTag$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            canceledBy: "canceled_by",
            createdAt: "created_at",
            erroredBy: "errored_by",
            pipelineId: "pipeline_id",
            pipelineNumber: "pipeline_number",
            projectSlug: "project_slug",
            startedBy: "started_by",
            stoppedAt: "stopped_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Workflow$ {
    /** @deprecated use `Workflow$inboundSchema` instead. */
    export const inboundSchema = Workflow$inboundSchema;
    /** @deprecated use `Workflow$outboundSchema` instead. */
    export const outboundSchema = Workflow$outboundSchema;
    /** @deprecated use `Workflow$Outbound` instead. */
    export type Outbound = Workflow$Outbound;
}

/** @internal */
export const ListWorkflowsByPipelineIdWorkflowListResponse$inboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdWorkflowListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Workflow$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListWorkflowsByPipelineIdWorkflowListResponse$Outbound = {
    items: Array<Workflow$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListWorkflowsByPipelineIdWorkflowListResponse$outboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdWorkflowListResponse$Outbound,
    z.ZodTypeDef,
    ListWorkflowsByPipelineIdWorkflowListResponse
> = z
    .object({
        items: z.array(z.lazy(() => Workflow$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowsByPipelineIdWorkflowListResponse$ {
    /** @deprecated use `ListWorkflowsByPipelineIdWorkflowListResponse$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowsByPipelineIdWorkflowListResponse$inboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdWorkflowListResponse$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowsByPipelineIdWorkflowListResponse$outboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdWorkflowListResponse$Outbound` instead. */
    export type Outbound = ListWorkflowsByPipelineIdWorkflowListResponse$Outbound;
}

/** @internal */
export const ListWorkflowsByPipelineIdResponse$inboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListWorkflowsByPipelineIdResponseBody$inboundSchema),
    z.lazy(() => ListWorkflowsByPipelineIdWorkflowListResponse$inboundSchema),
]);

/** @internal */
export type ListWorkflowsByPipelineIdResponse$Outbound =
    | ListWorkflowsByPipelineIdResponseBody$Outbound
    | ListWorkflowsByPipelineIdWorkflowListResponse$Outbound;

/** @internal */
export const ListWorkflowsByPipelineIdResponse$outboundSchema: z.ZodType<
    ListWorkflowsByPipelineIdResponse$Outbound,
    z.ZodTypeDef,
    ListWorkflowsByPipelineIdResponse
> = z.union([
    z.lazy(() => ListWorkflowsByPipelineIdResponseBody$outboundSchema),
    z.lazy(() => ListWorkflowsByPipelineIdWorkflowListResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowsByPipelineIdResponse$ {
    /** @deprecated use `ListWorkflowsByPipelineIdResponse$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowsByPipelineIdResponse$inboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdResponse$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowsByPipelineIdResponse$outboundSchema;
    /** @deprecated use `ListWorkflowsByPipelineIdResponse$Outbound` instead. */
    export type Outbound = ListWorkflowsByPipelineIdResponse$Outbound;
}
