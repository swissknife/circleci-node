/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

/**
 * An environment variable request requires a name and a value
 */
export type CreateEnvVarEnvironmentVariable = {
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * The value of the environment variable.
     */
    value: string;
};

export type CreateEnvVarRequest = {
    requestBody?: CreateEnvVarEnvironmentVariable | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type CreateEnvVarResponseBody = {
    message?: string | undefined;
};

/**
 * An environment variable is a map containing a value and an optional timestamp.
 */
export type CreateEnvVarProjectEnvironmentVariable = {
    /**
     * The creation timestamp of the environment variable.
     */
    createdAt?: any | undefined;
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * The value of the environment variable.
     */
    value: string;
};

export type CreateEnvVarResponse =
    | CreateEnvVarResponseBody
    | CreateEnvVarProjectEnvironmentVariable;

/** @internal */
export const CreateEnvVarEnvironmentVariable$inboundSchema: z.ZodType<
    CreateEnvVarEnvironmentVariable,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string(),
    value: z.string(),
});

/** @internal */
export type CreateEnvVarEnvironmentVariable$Outbound = {
    name: string;
    value: string;
};

/** @internal */
export const CreateEnvVarEnvironmentVariable$outboundSchema: z.ZodType<
    CreateEnvVarEnvironmentVariable$Outbound,
    z.ZodTypeDef,
    CreateEnvVarEnvironmentVariable
> = z.object({
    name: z.string(),
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvVarEnvironmentVariable$ {
    /** @deprecated use `CreateEnvVarEnvironmentVariable$inboundSchema` instead. */
    export const inboundSchema = CreateEnvVarEnvironmentVariable$inboundSchema;
    /** @deprecated use `CreateEnvVarEnvironmentVariable$outboundSchema` instead. */
    export const outboundSchema = CreateEnvVarEnvironmentVariable$outboundSchema;
    /** @deprecated use `CreateEnvVarEnvironmentVariable$Outbound` instead. */
    export type Outbound = CreateEnvVarEnvironmentVariable$Outbound;
}

/** @internal */
export const CreateEnvVarRequest$inboundSchema: z.ZodType<
    CreateEnvVarRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => CreateEnvVarEnvironmentVariable$inboundSchema).optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type CreateEnvVarRequest$Outbound = {
    RequestBody?: CreateEnvVarEnvironmentVariable$Outbound | undefined;
    "project-slug": string;
};

/** @internal */
export const CreateEnvVarRequest$outboundSchema: z.ZodType<
    CreateEnvVarRequest$Outbound,
    z.ZodTypeDef,
    CreateEnvVarRequest
> = z
    .object({
        requestBody: z.lazy(() => CreateEnvVarEnvironmentVariable$outboundSchema).optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvVarRequest$ {
    /** @deprecated use `CreateEnvVarRequest$inboundSchema` instead. */
    export const inboundSchema = CreateEnvVarRequest$inboundSchema;
    /** @deprecated use `CreateEnvVarRequest$outboundSchema` instead. */
    export const outboundSchema = CreateEnvVarRequest$outboundSchema;
    /** @deprecated use `CreateEnvVarRequest$Outbound` instead. */
    export type Outbound = CreateEnvVarRequest$Outbound;
}

/** @internal */
export const CreateEnvVarResponseBody$inboundSchema: z.ZodType<
    CreateEnvVarResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type CreateEnvVarResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const CreateEnvVarResponseBody$outboundSchema: z.ZodType<
    CreateEnvVarResponseBody$Outbound,
    z.ZodTypeDef,
    CreateEnvVarResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvVarResponseBody$ {
    /** @deprecated use `CreateEnvVarResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateEnvVarResponseBody$inboundSchema;
    /** @deprecated use `CreateEnvVarResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateEnvVarResponseBody$outboundSchema;
    /** @deprecated use `CreateEnvVarResponseBody$Outbound` instead. */
    export type Outbound = CreateEnvVarResponseBody$Outbound;
}

/** @internal */
export const CreateEnvVarProjectEnvironmentVariable$inboundSchema: z.ZodType<
    CreateEnvVarProjectEnvironmentVariable,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "created-at": z.any().optional(),
        name: z.string(),
        value: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
        });
    });

/** @internal */
export type CreateEnvVarProjectEnvironmentVariable$Outbound = {
    "created-at"?: any | undefined;
    name: string;
    value: string;
};

/** @internal */
export const CreateEnvVarProjectEnvironmentVariable$outboundSchema: z.ZodType<
    CreateEnvVarProjectEnvironmentVariable$Outbound,
    z.ZodTypeDef,
    CreateEnvVarProjectEnvironmentVariable
> = z
    .object({
        createdAt: z.any().optional(),
        name: z.string(),
        value: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvVarProjectEnvironmentVariable$ {
    /** @deprecated use `CreateEnvVarProjectEnvironmentVariable$inboundSchema` instead. */
    export const inboundSchema = CreateEnvVarProjectEnvironmentVariable$inboundSchema;
    /** @deprecated use `CreateEnvVarProjectEnvironmentVariable$outboundSchema` instead. */
    export const outboundSchema = CreateEnvVarProjectEnvironmentVariable$outboundSchema;
    /** @deprecated use `CreateEnvVarProjectEnvironmentVariable$Outbound` instead. */
    export type Outbound = CreateEnvVarProjectEnvironmentVariable$Outbound;
}

/** @internal */
export const CreateEnvVarResponse$inboundSchema: z.ZodType<
    CreateEnvVarResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CreateEnvVarResponseBody$inboundSchema),
    z.lazy(() => CreateEnvVarProjectEnvironmentVariable$inboundSchema),
]);

/** @internal */
export type CreateEnvVarResponse$Outbound =
    | CreateEnvVarResponseBody$Outbound
    | CreateEnvVarProjectEnvironmentVariable$Outbound;

/** @internal */
export const CreateEnvVarResponse$outboundSchema: z.ZodType<
    CreateEnvVarResponse$Outbound,
    z.ZodTypeDef,
    CreateEnvVarResponse
> = z.union([
    z.lazy(() => CreateEnvVarResponseBody$outboundSchema),
    z.lazy(() => CreateEnvVarProjectEnvironmentVariable$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnvVarResponse$ {
    /** @deprecated use `CreateEnvVarResponse$inboundSchema` instead. */
    export const inboundSchema = CreateEnvVarResponse$inboundSchema;
    /** @deprecated use `CreateEnvVarResponse$outboundSchema` instead. */
    export const outboundSchema = CreateEnvVarResponse$outboundSchema;
    /** @deprecated use `CreateEnvVarResponse$Outbound` instead. */
    export type Outbound = CreateEnvVarResponse$Outbound;
}
