/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The names of VCS branches to include in branch-level workflow metrics.
 */
export type Branches = {};

/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export const GetProjectWorkflowsPageDataQueryParamReportingWindow = {
    Last7Days: "last-7-days",
    Last90Days: "last-90-days",
    Last24Hours: "last-24-hours",
    Last30Days: "last-30-days",
    Last60Days: "last-60-days",
} as const;
/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export type GetProjectWorkflowsPageDataQueryParamReportingWindow = ClosedEnum<
    typeof GetProjectWorkflowsPageDataQueryParamReportingWindow
>;

/**
 * The names of workflows to include in workflow-level metrics.
 */
export type WorkflowNames = {};

export type GetProjectWorkflowsPageDataRequest = {
    /**
     * The names of VCS branches to include in branch-level workflow metrics.
     */
    branches?: Branches | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
     */
    reportingWindow?: GetProjectWorkflowsPageDataQueryParamReportingWindow | undefined;
    /**
     * The names of workflows to include in workflow-level metrics.
     */
    workflowNames?: WorkflowNames | undefined;
};

/**
 * Error response.
 */
export type GetProjectWorkflowsPageDataInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Metrics aggregated across all workflows and branches for a project.
 */
export type GetProjectWorkflowsPageDataMetrics = {
    successRate: number;
    /**
     * The average number of runs per day.
     */
    throughput: number;
    /**
     * The total credits consumed over the current timeseries interval.
     */
    totalCreditsUsed: number;
    /**
     * Total duration, in seconds.
     */
    totalDurationSecs: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

/**
 * Metric trends aggregated across all workflows and branches for a project.
 */
export type GetProjectWorkflowsPageDataTrends = {
    /**
     * The trend value for the success rate.
     */
    successRate: number;
    /**
     * Trend value for the average number of runs per day.
     */
    throughput: number;
    /**
     * The trend value for total credits consumed.
     */
    totalCreditsUsed: number;
    /**
     * Trend value for total duration.
     */
    totalDurationSecs: number;
    /**
     * The trend value for total number of runs.
     */
    totalRuns: number;
};

/**
 * Metrics and trends data aggregated for a given project.
 */
export type ProjectData = {
    /**
     * Metrics aggregated across all workflows and branches for a project.
     */
    metrics: GetProjectWorkflowsPageDataMetrics;
    /**
     * Metric trends aggregated across all workflows and branches for a project.
     */
    trends: GetProjectWorkflowsPageDataTrends;
};

/**
 * Metrics aggregated across a workflow or branchfor a project.
 */
export type GetProjectWorkflowsPageDataInsightsMetrics = {
    /**
     * The 95th percentile duration among a group of workflow runs.
     */
    p95DurationSecs: number;
    successRate: number;
    /**
     * The total credits consumed over the current timeseries interval.
     */
    totalCreditsUsed: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

/**
 * Trends aggregated across a workflow or branch for a project.
 */
export type GetProjectWorkflowsPageDataInsightsTrends = {
    /**
     * The 95th percentile duration among a group of workflow runs.
     */
    p95DurationSecs: number;
    /**
     * The trend value for the success rate.
     */
    successRate: number;
    /**
     * The trend value for total credits consumed.
     */
    totalCreditsUsed: number;
    /**
     * The trend value for total number of runs.
     */
    totalRuns: number;
};

export type ProjectWorkflowBranchData = {
    /**
     * The VCS branch of a workflow's trigger.
     */
    branch: string;
    /**
     * Metrics aggregated across a workflow or branchfor a project.
     */
    metrics: GetProjectWorkflowsPageDataInsightsMetrics;
    /**
     * Trends aggregated across a workflow or branch for a project.
     */
    trends: GetProjectWorkflowsPageDataInsightsTrends;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Metrics aggregated across a workflow or branchfor a project.
 */
export type GetProjectWorkflowsPageDataInsightsResponseMetrics = {
    /**
     * The 95th percentile duration among a group of workflow runs.
     */
    p95DurationSecs: number;
    successRate: number;
    /**
     * The total credits consumed over the current timeseries interval.
     */
    totalCreditsUsed: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

/**
 * Trends aggregated across a workflow or branch for a project.
 */
export type GetProjectWorkflowsPageDataInsightsResponseTrends = {
    /**
     * The 95th percentile duration among a group of workflow runs.
     */
    p95DurationSecs: number;
    /**
     * The trend value for the success rate.
     */
    successRate: number;
    /**
     * The trend value for total credits consumed.
     */
    totalCreditsUsed: number;
    /**
     * The trend value for total number of runs.
     */
    totalRuns: number;
};

export type ProjectWorkflowData = {
    /**
     * Metrics aggregated across a workflow or branchfor a project.
     */
    metrics: GetProjectWorkflowsPageDataInsightsResponseMetrics;
    /**
     * Trends aggregated across a workflow or branch for a project.
     */
    trends: GetProjectWorkflowsPageDataInsightsResponseTrends;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Aggregated summary metrics and trends by workflow and branches
 */
export type GetProjectWorkflowsPageDataResponseBody = {
    /**
     * A list of all the branches for a given project.
     */
    allBranches?: Array<string> | undefined;
    /**
     * A list of all the workflows for a given project.
     */
    allWorkflows?: Array<string> | undefined;
    /**
     * The unique ID of the organization
     */
    orgId?: any | undefined;
    /**
     * Metrics and trends data aggregated for a given project.
     */
    projectData?: ProjectData | undefined;
    /**
     * The unique ID of the project
     */
    projectId?: any | undefined;
    /**
     * A list of metrics and trends data for branches for a given project.
     */
    projectWorkflowBranchData?: Array<ProjectWorkflowBranchData> | undefined;
    /**
     * A list of metrics and trends data for workflows for a given project.
     */
    projectWorkflowData?: Array<ProjectWorkflowData> | undefined;
};

export type GetProjectWorkflowsPageDataResponse =
    | GetProjectWorkflowsPageDataInsightsResponseBody
    | GetProjectWorkflowsPageDataResponseBody;

/** @internal */
export const Branches$inboundSchema: z.ZodType<Branches, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Branches$Outbound = {};

/** @internal */
export const Branches$outboundSchema: z.ZodType<Branches$Outbound, z.ZodTypeDef, Branches> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Branches$ {
    /** @deprecated use `Branches$inboundSchema` instead. */
    export const inboundSchema = Branches$inboundSchema;
    /** @deprecated use `Branches$outboundSchema` instead. */
    export const outboundSchema = Branches$outboundSchema;
    /** @deprecated use `Branches$Outbound` instead. */
    export type Outbound = Branches$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataQueryParamReportingWindow$inboundSchema: z.ZodNativeEnum<
    typeof GetProjectWorkflowsPageDataQueryParamReportingWindow
> = z.nativeEnum(GetProjectWorkflowsPageDataQueryParamReportingWindow);

/** @internal */
export const GetProjectWorkflowsPageDataQueryParamReportingWindow$outboundSchema: z.ZodNativeEnum<
    typeof GetProjectWorkflowsPageDataQueryParamReportingWindow
> = GetProjectWorkflowsPageDataQueryParamReportingWindow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataQueryParamReportingWindow$ {
    /** @deprecated use `GetProjectWorkflowsPageDataQueryParamReportingWindow$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataQueryParamReportingWindow$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataQueryParamReportingWindow$outboundSchema` instead. */
    export const outboundSchema =
        GetProjectWorkflowsPageDataQueryParamReportingWindow$outboundSchema;
}

/** @internal */
export const WorkflowNames$inboundSchema: z.ZodType<WorkflowNames, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type WorkflowNames$Outbound = {};

/** @internal */
export const WorkflowNames$outboundSchema: z.ZodType<
    WorkflowNames$Outbound,
    z.ZodTypeDef,
    WorkflowNames
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowNames$ {
    /** @deprecated use `WorkflowNames$inboundSchema` instead. */
    export const inboundSchema = WorkflowNames$inboundSchema;
    /** @deprecated use `WorkflowNames$outboundSchema` instead. */
    export const outboundSchema = WorkflowNames$outboundSchema;
    /** @deprecated use `WorkflowNames$Outbound` instead. */
    export type Outbound = WorkflowNames$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataRequest$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branches: z.lazy(() => Branches$inboundSchema).optional(),
        "project-slug": z.string(),
        "reporting-window":
            GetProjectWorkflowsPageDataQueryParamReportingWindow$inboundSchema.optional(),
        "workflow-names": z.lazy(() => WorkflowNames$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
            "reporting-window": "reportingWindow",
            "workflow-names": "workflowNames",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataRequest$Outbound = {
    branches?: Branches$Outbound | undefined;
    "project-slug": string;
    "reporting-window"?: string | undefined;
    "workflow-names"?: WorkflowNames$Outbound | undefined;
};

/** @internal */
export const GetProjectWorkflowsPageDataRequest$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataRequest$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataRequest
> = z
    .object({
        branches: z.lazy(() => Branches$outboundSchema).optional(),
        projectSlug: z.string(),
        reportingWindow:
            GetProjectWorkflowsPageDataQueryParamReportingWindow$outboundSchema.optional(),
        workflowNames: z.lazy(() => WorkflowNames$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
            reportingWindow: "reporting-window",
            workflowNames: "workflow-names",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataRequest$ {
    /** @deprecated use `GetProjectWorkflowsPageDataRequest$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataRequest$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataRequest$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataRequest$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataRequest$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataRequest$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataInsightsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetProjectWorkflowsPageDataInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetProjectWorkflowsPageDataInsightsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataInsightsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataInsightsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success_rate: z.number(),
        throughput: z.number(),
        total_credits_used: z.number().int(),
        total_duration_secs: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_duration_secs: "totalDurationSecs",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataMetrics$Outbound = {
    success_rate: number;
    throughput: number;
    total_credits_used: number;
    total_duration_secs: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowsPageDataMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataMetrics
> = z
    .object({
        successRate: z.number(),
        throughput: z.number(),
        totalCreditsUsed: z.number().int(),
        totalDurationSecs: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalDurationSecs: "total_duration_secs",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataMetrics$ {
    /** @deprecated use `GetProjectWorkflowsPageDataMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataTrends$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataTrends,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success_rate: z.number(),
        throughput: z.number(),
        total_credits_used: z.number(),
        total_duration_secs: z.number(),
        total_runs: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_duration_secs: "totalDurationSecs",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataTrends$Outbound = {
    success_rate: number;
    throughput: number;
    total_credits_used: number;
    total_duration_secs: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowsPageDataTrends$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataTrends$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataTrends
> = z
    .object({
        successRate: z.number(),
        throughput: z.number(),
        totalCreditsUsed: z.number(),
        totalDurationSecs: z.number(),
        totalRuns: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalDurationSecs: "total_duration_secs",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataTrends$ {
    /** @deprecated use `GetProjectWorkflowsPageDataTrends$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataTrends$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataTrends$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataTrends$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataTrends$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataTrends$Outbound;
}

/** @internal */
export const ProjectData$inboundSchema: z.ZodType<ProjectData, z.ZodTypeDef, unknown> = z.object({
    metrics: z.lazy(() => GetProjectWorkflowsPageDataMetrics$inboundSchema),
    trends: z.lazy(() => GetProjectWorkflowsPageDataTrends$inboundSchema),
});

/** @internal */
export type ProjectData$Outbound = {
    metrics: GetProjectWorkflowsPageDataMetrics$Outbound;
    trends: GetProjectWorkflowsPageDataTrends$Outbound;
};

/** @internal */
export const ProjectData$outboundSchema: z.ZodType<
    ProjectData$Outbound,
    z.ZodTypeDef,
    ProjectData
> = z.object({
    metrics: z.lazy(() => GetProjectWorkflowsPageDataMetrics$outboundSchema),
    trends: z.lazy(() => GetProjectWorkflowsPageDataTrends$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectData$ {
    /** @deprecated use `ProjectData$inboundSchema` instead. */
    export const inboundSchema = ProjectData$inboundSchema;
    /** @deprecated use `ProjectData$outboundSchema` instead. */
    export const outboundSchema = ProjectData$outboundSchema;
    /** @deprecated use `ProjectData$Outbound` instead. */
    export type Outbound = ProjectData$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataInsightsMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        p95_duration_secs: z.number(),
        success_rate: z.number(),
        total_credits_used: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            p95_duration_secs: "p95DurationSecs",
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataInsightsMetrics$Outbound = {
    p95_duration_secs: number;
    success_rate: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowsPageDataInsightsMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataInsightsMetrics
> = z
    .object({
        p95DurationSecs: z.number(),
        successRate: z.number(),
        totalCreditsUsed: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            p95DurationSecs: "p95_duration_secs",
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataInsightsMetrics$ {
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataInsightsMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataInsightsMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataInsightsMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataInsightsTrends$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsTrends,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        p95_duration_secs: z.number(),
        success_rate: z.number(),
        total_credits_used: z.number(),
        total_runs: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            p95_duration_secs: "p95DurationSecs",
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataInsightsTrends$Outbound = {
    p95_duration_secs: number;
    success_rate: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowsPageDataInsightsTrends$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsTrends$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataInsightsTrends
> = z
    .object({
        p95DurationSecs: z.number(),
        successRate: z.number(),
        totalCreditsUsed: z.number(),
        totalRuns: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            p95DurationSecs: "p95_duration_secs",
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataInsightsTrends$ {
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsTrends$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataInsightsTrends$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsTrends$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataInsightsTrends$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsTrends$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataInsightsTrends$Outbound;
}

/** @internal */
export const ProjectWorkflowBranchData$inboundSchema: z.ZodType<
    ProjectWorkflowBranchData,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branch: z.string(),
        metrics: z.lazy(() => GetProjectWorkflowsPageDataInsightsMetrics$inboundSchema),
        trends: z.lazy(() => GetProjectWorkflowsPageDataInsightsTrends$inboundSchema),
        workflow_name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_name: "workflowName",
        });
    });

/** @internal */
export type ProjectWorkflowBranchData$Outbound = {
    branch: string;
    metrics: GetProjectWorkflowsPageDataInsightsMetrics$Outbound;
    trends: GetProjectWorkflowsPageDataInsightsTrends$Outbound;
    workflow_name: string;
};

/** @internal */
export const ProjectWorkflowBranchData$outboundSchema: z.ZodType<
    ProjectWorkflowBranchData$Outbound,
    z.ZodTypeDef,
    ProjectWorkflowBranchData
> = z
    .object({
        branch: z.string(),
        metrics: z.lazy(() => GetProjectWorkflowsPageDataInsightsMetrics$outboundSchema),
        trends: z.lazy(() => GetProjectWorkflowsPageDataInsightsTrends$outboundSchema),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowName: "workflow_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectWorkflowBranchData$ {
    /** @deprecated use `ProjectWorkflowBranchData$inboundSchema` instead. */
    export const inboundSchema = ProjectWorkflowBranchData$inboundSchema;
    /** @deprecated use `ProjectWorkflowBranchData$outboundSchema` instead. */
    export const outboundSchema = ProjectWorkflowBranchData$outboundSchema;
    /** @deprecated use `ProjectWorkflowBranchData$Outbound` instead. */
    export type Outbound = ProjectWorkflowBranchData$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataInsightsResponseMetrics$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsResponseMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        p95_duration_secs: z.number(),
        success_rate: z.number(),
        total_credits_used: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            p95_duration_secs: "p95DurationSecs",
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataInsightsResponseMetrics$Outbound = {
    p95_duration_secs: number;
    success_rate: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowsPageDataInsightsResponseMetrics$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsResponseMetrics$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataInsightsResponseMetrics
> = z
    .object({
        p95DurationSecs: z.number(),
        successRate: z.number(),
        totalCreditsUsed: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            p95DurationSecs: "p95_duration_secs",
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataInsightsResponseMetrics$ {
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseMetrics$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataInsightsResponseMetrics$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseMetrics$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataInsightsResponseMetrics$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseMetrics$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataInsightsResponseMetrics$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataInsightsResponseTrends$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsResponseTrends,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        p95_duration_secs: z.number(),
        success_rate: z.number(),
        total_credits_used: z.number(),
        total_runs: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            p95_duration_secs: "p95DurationSecs",
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataInsightsResponseTrends$Outbound = {
    p95_duration_secs: number;
    success_rate: number;
    total_credits_used: number;
    total_runs: number;
};

/** @internal */
export const GetProjectWorkflowsPageDataInsightsResponseTrends$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataInsightsResponseTrends$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataInsightsResponseTrends
> = z
    .object({
        p95DurationSecs: z.number(),
        successRate: z.number(),
        totalCreditsUsed: z.number(),
        totalRuns: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            p95DurationSecs: "p95_duration_secs",
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataInsightsResponseTrends$ {
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseTrends$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataInsightsResponseTrends$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseTrends$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataInsightsResponseTrends$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataInsightsResponseTrends$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataInsightsResponseTrends$Outbound;
}

/** @internal */
export const ProjectWorkflowData$inboundSchema: z.ZodType<
    ProjectWorkflowData,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        metrics: z.lazy(() => GetProjectWorkflowsPageDataInsightsResponseMetrics$inboundSchema),
        trends: z.lazy(() => GetProjectWorkflowsPageDataInsightsResponseTrends$inboundSchema),
        workflow_name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflow_name: "workflowName",
        });
    });

/** @internal */
export type ProjectWorkflowData$Outbound = {
    metrics: GetProjectWorkflowsPageDataInsightsResponseMetrics$Outbound;
    trends: GetProjectWorkflowsPageDataInsightsResponseTrends$Outbound;
    workflow_name: string;
};

/** @internal */
export const ProjectWorkflowData$outboundSchema: z.ZodType<
    ProjectWorkflowData$Outbound,
    z.ZodTypeDef,
    ProjectWorkflowData
> = z
    .object({
        metrics: z.lazy(() => GetProjectWorkflowsPageDataInsightsResponseMetrics$outboundSchema),
        trends: z.lazy(() => GetProjectWorkflowsPageDataInsightsResponseTrends$outboundSchema),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            workflowName: "workflow_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectWorkflowData$ {
    /** @deprecated use `ProjectWorkflowData$inboundSchema` instead. */
    export const inboundSchema = ProjectWorkflowData$inboundSchema;
    /** @deprecated use `ProjectWorkflowData$outboundSchema` instead. */
    export const outboundSchema = ProjectWorkflowData$outboundSchema;
    /** @deprecated use `ProjectWorkflowData$Outbound` instead. */
    export type Outbound = ProjectWorkflowData$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        all_branches: z.array(z.string()).optional(),
        all_workflows: z.array(z.string()).optional(),
        org_id: z.any().optional(),
        project_data: z.lazy(() => ProjectData$inboundSchema).optional(),
        project_id: z.any().optional(),
        project_workflow_branch_data: z
            .array(z.lazy(() => ProjectWorkflowBranchData$inboundSchema))
            .optional(),
        project_workflow_data: z.array(z.lazy(() => ProjectWorkflowData$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            all_branches: "allBranches",
            all_workflows: "allWorkflows",
            org_id: "orgId",
            project_data: "projectData",
            project_id: "projectId",
            project_workflow_branch_data: "projectWorkflowBranchData",
            project_workflow_data: "projectWorkflowData",
        });
    });

/** @internal */
export type GetProjectWorkflowsPageDataResponseBody$Outbound = {
    all_branches?: Array<string> | undefined;
    all_workflows?: Array<string> | undefined;
    org_id?: any | undefined;
    project_data?: ProjectData$Outbound | undefined;
    project_id?: any | undefined;
    project_workflow_branch_data?: Array<ProjectWorkflowBranchData$Outbound> | undefined;
    project_workflow_data?: Array<ProjectWorkflowData$Outbound> | undefined;
};

/** @internal */
export const GetProjectWorkflowsPageDataResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataResponseBody
> = z
    .object({
        allBranches: z.array(z.string()).optional(),
        allWorkflows: z.array(z.string()).optional(),
        orgId: z.any().optional(),
        projectData: z.lazy(() => ProjectData$outboundSchema).optional(),
        projectId: z.any().optional(),
        projectWorkflowBranchData: z
            .array(z.lazy(() => ProjectWorkflowBranchData$outboundSchema))
            .optional(),
        projectWorkflowData: z.array(z.lazy(() => ProjectWorkflowData$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            allBranches: "all_branches",
            allWorkflows: "all_workflows",
            orgId: "org_id",
            projectData: "project_data",
            projectId: "project_id",
            projectWorkflowBranchData: "project_workflow_branch_data",
            projectWorkflowData: "project_workflow_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataResponseBody$ {
    /** @deprecated use `GetProjectWorkflowsPageDataResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowsPageDataResponse$inboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetProjectWorkflowsPageDataInsightsResponseBody$inboundSchema),
    z.lazy(() => GetProjectWorkflowsPageDataResponseBody$inboundSchema),
]);

/** @internal */
export type GetProjectWorkflowsPageDataResponse$Outbound =
    | GetProjectWorkflowsPageDataInsightsResponseBody$Outbound
    | GetProjectWorkflowsPageDataResponseBody$Outbound;

/** @internal */
export const GetProjectWorkflowsPageDataResponse$outboundSchema: z.ZodType<
    GetProjectWorkflowsPageDataResponse$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowsPageDataResponse
> = z.union([
    z.lazy(() => GetProjectWorkflowsPageDataInsightsResponseBody$outboundSchema),
    z.lazy(() => GetProjectWorkflowsPageDataResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowsPageDataResponse$ {
    /** @deprecated use `GetProjectWorkflowsPageDataResponse$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowsPageDataResponse$inboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataResponse$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowsPageDataResponse$outboundSchema;
    /** @deprecated use `GetProjectWorkflowsPageDataResponse$Outbound` instead. */
    export type Outbound = GetProjectWorkflowsPageDataResponse$Outbound;
}
