/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetDecisionLogsRequest = {
    /**
     * Return decisions made after this date.
     */
    after?: Date | undefined;
    /**
     * Return decisions made before this date.
     */
    before?: Date | undefined;
    /**
     * Return decisions made on this branch.
     */
    branch?: string | undefined;
    /**
     * Return decisions made for this build number.
     */
    buildNumber?: string | undefined;
    context: string;
    /**
     * Sets the offset when retrieving the decisions, for paging.
     */
    offset?: number | undefined;
    ownerID: string;
    /**
     * Return decisions made for this project.
     */
    projectId?: string | undefined;
    /**
     * Return decisions matching this decision status.
     */
    status?: string | undefined;
};

/**
 * The request is malformed (e.g, a given path parameter is invalid)
 *
 * @remarks
 *
 */
export type GetDecisionLogsResponseBody = {
    error: string;
};

export type GetDecisionLogsResponse = GetDecisionLogsResponseBody | Array<shared.DecisionLog>;

/** @internal */
export const GetDecisionLogsRequest$inboundSchema: z.ZodType<
    GetDecisionLogsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        after: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        before: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        branch: z.string().optional(),
        build_number: z.string().optional(),
        context: z.string(),
        offset: z.number().int().optional(),
        ownerID: z.string(),
        project_id: z.string().optional(),
        status: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            build_number: "buildNumber",
            project_id: "projectId",
        });
    });

/** @internal */
export type GetDecisionLogsRequest$Outbound = {
    after?: string | undefined;
    before?: string | undefined;
    branch?: string | undefined;
    build_number?: string | undefined;
    context: string;
    offset?: number | undefined;
    ownerID: string;
    project_id?: string | undefined;
    status?: string | undefined;
};

/** @internal */
export const GetDecisionLogsRequest$outboundSchema: z.ZodType<
    GetDecisionLogsRequest$Outbound,
    z.ZodTypeDef,
    GetDecisionLogsRequest
> = z
    .object({
        after: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        before: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        branch: z.string().optional(),
        buildNumber: z.string().optional(),
        context: z.string(),
        offset: z.number().int().optional(),
        ownerID: z.string(),
        projectId: z.string().optional(),
        status: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buildNumber: "build_number",
            projectId: "project_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDecisionLogsRequest$ {
    /** @deprecated use `GetDecisionLogsRequest$inboundSchema` instead. */
    export const inboundSchema = GetDecisionLogsRequest$inboundSchema;
    /** @deprecated use `GetDecisionLogsRequest$outboundSchema` instead. */
    export const outboundSchema = GetDecisionLogsRequest$outboundSchema;
    /** @deprecated use `GetDecisionLogsRequest$Outbound` instead. */
    export type Outbound = GetDecisionLogsRequest$Outbound;
}

/** @internal */
export const GetDecisionLogsResponseBody$inboundSchema: z.ZodType<
    GetDecisionLogsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.string(),
});

/** @internal */
export type GetDecisionLogsResponseBody$Outbound = {
    error: string;
};

/** @internal */
export const GetDecisionLogsResponseBody$outboundSchema: z.ZodType<
    GetDecisionLogsResponseBody$Outbound,
    z.ZodTypeDef,
    GetDecisionLogsResponseBody
> = z.object({
    error: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDecisionLogsResponseBody$ {
    /** @deprecated use `GetDecisionLogsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetDecisionLogsResponseBody$inboundSchema;
    /** @deprecated use `GetDecisionLogsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetDecisionLogsResponseBody$outboundSchema;
    /** @deprecated use `GetDecisionLogsResponseBody$Outbound` instead. */
    export type Outbound = GetDecisionLogsResponseBody$Outbound;
}

/** @internal */
export const GetDecisionLogsResponse$inboundSchema: z.ZodType<
    GetDecisionLogsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetDecisionLogsResponseBody$inboundSchema),
    z.array(shared.DecisionLog$inboundSchema),
]);

/** @internal */
export type GetDecisionLogsResponse$Outbound =
    | GetDecisionLogsResponseBody$Outbound
    | Array<shared.DecisionLog$Outbound>;

/** @internal */
export const GetDecisionLogsResponse$outboundSchema: z.ZodType<
    GetDecisionLogsResponse$Outbound,
    z.ZodTypeDef,
    GetDecisionLogsResponse
> = z.union([
    z.lazy(() => GetDecisionLogsResponseBody$outboundSchema),
    z.array(shared.DecisionLog$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDecisionLogsResponse$ {
    /** @deprecated use `GetDecisionLogsResponse$inboundSchema` instead. */
    export const inboundSchema = GetDecisionLogsResponse$inboundSchema;
    /** @deprecated use `GetDecisionLogsResponse$outboundSchema` instead. */
    export const outboundSchema = GetDecisionLogsResponse$outboundSchema;
    /** @deprecated use `GetDecisionLogsResponse$Outbound` instead. */
    export type Outbound = GetDecisionLogsResponse$Outbound;
}
