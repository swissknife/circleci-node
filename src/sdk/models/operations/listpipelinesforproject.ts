/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type ListPipelinesForProjectRequest = {
    /**
     * The name of a vcs branch.
     */
    branch?: string | undefined;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type ListPipelinesForProjectResponseBody = {
    message?: string | undefined;
};

/**
 * The type of error.
 */
export const ListPipelinesForProjectType = {
    Config: "config",
    ConfigFetch: "config-fetch",
    Timeout: "timeout",
    Permission: "permission",
    Other: "other",
    TriggerRule: "trigger-rule",
    Plan: "plan",
} as const;
/**
 * The type of error.
 */
export type ListPipelinesForProjectType = ClosedEnum<typeof ListPipelinesForProjectType>;

/**
 * An error with a type and message.
 */
export type ListPipelinesForProjectErrors = {
    /**
     * A human-readable error message.
     */
    message: string;
    /**
     * The type of error.
     */
    type: ListPipelinesForProjectType;
};

/**
 * The current state of the pipeline.
 */
export const ListPipelinesForProjectState = {
    Created: "created",
    Errored: "errored",
    SetupPending: "setup-pending",
    Setup: "setup",
    Pending: "pending",
} as const;
/**
 * The current state of the pipeline.
 */
export type ListPipelinesForProjectState = ClosedEnum<typeof ListPipelinesForProjectState>;

/**
 * The user who triggered the Pipeline.
 */
export type ListPipelinesForProjectActor = {
    /**
     * URL to the user's avatar on the VCS
     */
    avatarUrl: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
};

/**
 * The type of trigger.
 */
export const ListPipelinesForProjectPipelineType = {
    ScheduledPipeline: "scheduled_pipeline",
    Explicit: "explicit",
    Api: "api",
    Webhook: "webhook",
} as const;
/**
 * The type of trigger.
 */
export type ListPipelinesForProjectPipelineType = ClosedEnum<
    typeof ListPipelinesForProjectPipelineType
>;

/**
 * A summary of the trigger.
 */
export type ListPipelinesForProjectTrigger = {
    /**
     * The user who triggered the Pipeline.
     */
    actor: ListPipelinesForProjectActor;
    /**
     * The date and time the trigger was received.
     */
    receivedAt: Date;
    /**
     * The type of trigger.
     */
    type: ListPipelinesForProjectPipelineType;
};

export type ListPipelinesForProject4 = {};

export type ListPipelinesForProjectTriggerParameters =
    | ListPipelinesForProject4
    | string
    | number
    | boolean;

/**
 * The latest commit in the pipeline.
 */
export type ListPipelinesForProjectCommit = {
    /**
     * The body of the commit message.
     */
    body: string;
    /**
     * The subject of the commit message.
     */
    subject: string;
};

/**
 * VCS information for the pipeline.
 */
export type ListPipelinesForProjectVcs = {
    /**
     * The branch where the pipeline ran. The HEAD commit on this branch was used for the pipeline. Note that `branch` and `tag` are mutually exclusive. To trigger a pipeline for a PR by number use `pull/<number>/head` for the PR ref or `pull/<number>/merge` for the merge ref (GitHub only).
     */
    branch?: string | undefined;
    /**
     * The latest commit in the pipeline.
     */
    commit?: ListPipelinesForProjectCommit | undefined;
    /**
     * URL for the repository where the trigger originated. For fork-PR pipelines, this is the URL to the fork. For other pipelines the `origin_` and `target_repository_url`s will be the same.
     */
    originRepositoryUrl: string;
    /**
     * Name of the VCS provider (e.g. GitHub, Bitbucket).
     */
    providerName: string;
    /**
     * The code review id.
     */
    reviewId?: string | undefined;
    /**
     * The code review URL.
     */
    reviewUrl?: string | undefined;
    /**
     * The code revision the pipeline ran.
     */
    revision: string;
    /**
     * The tag used by the pipeline. The commit that this tag points to was used for the pipeline. Note that `branch` and `tag` are mutually exclusive.
     */
    tag?: string | undefined;
    /**
     * URL for the repository the trigger targets (i.e. the repository where the PR will be merged). For fork-PR pipelines, this is the URL to the parent repo. For other pipelines, the `origin_` and `target_repository_url`s will be the same.
     */
    targetRepositoryUrl: string;
};

/**
 * A pipeline response.
 */
export type ListPipelinesForProjectPipeline = {
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * A sequence of errors that have occurred within the pipeline.
     */
    errors: Array<ListPipelinesForProjectErrors>;
    /**
     * The unique ID of the pipeline.
     */
    id: string;
    /**
     * The number of the pipeline.
     */
    number: number;
    /**
     * The project-slug for the pipeline.
     */
    projectSlug: string;
    /**
     * The current state of the pipeline.
     */
    state: ListPipelinesForProjectState;
    /**
     * A summary of the trigger.
     */
    trigger: ListPipelinesForProjectTrigger;
    triggerParameters?:
        | { [k: string]: ListPipelinesForProject4 | string | number | boolean }
        | undefined;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt?: Date | undefined;
    /**
     * VCS information for the pipeline.
     */
    vcs?: ListPipelinesForProjectVcs | undefined;
};

/**
 * List of pipelines
 */
export type ListPipelinesForProjectPipelineListResponse = {
    items: Array<ListPipelinesForProjectPipeline>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListPipelinesForProjectResponse =
    | ListPipelinesForProjectResponseBody
    | ListPipelinesForProjectPipelineListResponse;

/** @internal */
export const ListPipelinesForProjectRequest$inboundSchema: z.ZodType<
    ListPipelinesForProjectRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branch: z.string().optional(),
        "page-token": z.string().optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "page-token": "pageToken",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type ListPipelinesForProjectRequest$Outbound = {
    branch?: string | undefined;
    "page-token"?: string | undefined;
    "project-slug": string;
};

/** @internal */
export const ListPipelinesForProjectRequest$outboundSchema: z.ZodType<
    ListPipelinesForProjectRequest$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectRequest
> = z
    .object({
        branch: z.string().optional(),
        pageToken: z.string().optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pageToken: "page-token",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectRequest$ {
    /** @deprecated use `ListPipelinesForProjectRequest$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectRequest$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectRequest$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectRequest$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectRequest$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectRequest$Outbound;
}

/** @internal */
export const ListPipelinesForProjectResponseBody$inboundSchema: z.ZodType<
    ListPipelinesForProjectResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListPipelinesForProjectResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListPipelinesForProjectResponseBody$outboundSchema: z.ZodType<
    ListPipelinesForProjectResponseBody$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectResponseBody$ {
    /** @deprecated use `ListPipelinesForProjectResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectResponseBody$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectResponseBody$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectResponseBody$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectResponseBody$Outbound;
}

/** @internal */
export const ListPipelinesForProjectType$inboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesForProjectType
> = z.nativeEnum(ListPipelinesForProjectType);

/** @internal */
export const ListPipelinesForProjectType$outboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesForProjectType
> = ListPipelinesForProjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectType$ {
    /** @deprecated use `ListPipelinesForProjectType$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectType$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectType$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectType$outboundSchema;
}

/** @internal */
export const ListPipelinesForProjectErrors$inboundSchema: z.ZodType<
    ListPipelinesForProjectErrors,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
    type: ListPipelinesForProjectType$inboundSchema,
});

/** @internal */
export type ListPipelinesForProjectErrors$Outbound = {
    message: string;
    type: string;
};

/** @internal */
export const ListPipelinesForProjectErrors$outboundSchema: z.ZodType<
    ListPipelinesForProjectErrors$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectErrors
> = z.object({
    message: z.string(),
    type: ListPipelinesForProjectType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectErrors$ {
    /** @deprecated use `ListPipelinesForProjectErrors$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectErrors$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectErrors$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectErrors$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectErrors$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectErrors$Outbound;
}

/** @internal */
export const ListPipelinesForProjectState$inboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesForProjectState
> = z.nativeEnum(ListPipelinesForProjectState);

/** @internal */
export const ListPipelinesForProjectState$outboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesForProjectState
> = ListPipelinesForProjectState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectState$ {
    /** @deprecated use `ListPipelinesForProjectState$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectState$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectState$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectState$outboundSchema;
}

/** @internal */
export const ListPipelinesForProjectActor$inboundSchema: z.ZodType<
    ListPipelinesForProjectActor,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        avatar_url: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatar_url: "avatarUrl",
        });
    });

/** @internal */
export type ListPipelinesForProjectActor$Outbound = {
    avatar_url: string;
    login: string;
};

/** @internal */
export const ListPipelinesForProjectActor$outboundSchema: z.ZodType<
    ListPipelinesForProjectActor$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectActor
> = z
    .object({
        avatarUrl: z.string(),
        login: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            avatarUrl: "avatar_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectActor$ {
    /** @deprecated use `ListPipelinesForProjectActor$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectActor$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectActor$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectActor$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectActor$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectActor$Outbound;
}

/** @internal */
export const ListPipelinesForProjectPipelineType$inboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesForProjectPipelineType
> = z.nativeEnum(ListPipelinesForProjectPipelineType);

/** @internal */
export const ListPipelinesForProjectPipelineType$outboundSchema: z.ZodNativeEnum<
    typeof ListPipelinesForProjectPipelineType
> = ListPipelinesForProjectPipelineType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectPipelineType$ {
    /** @deprecated use `ListPipelinesForProjectPipelineType$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectPipelineType$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectPipelineType$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectPipelineType$outboundSchema;
}

/** @internal */
export const ListPipelinesForProjectTrigger$inboundSchema: z.ZodType<
    ListPipelinesForProjectTrigger,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        actor: z.lazy(() => ListPipelinesForProjectActor$inboundSchema),
        received_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        type: ListPipelinesForProjectPipelineType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            received_at: "receivedAt",
        });
    });

/** @internal */
export type ListPipelinesForProjectTrigger$Outbound = {
    actor: ListPipelinesForProjectActor$Outbound;
    received_at: string;
    type: string;
};

/** @internal */
export const ListPipelinesForProjectTrigger$outboundSchema: z.ZodType<
    ListPipelinesForProjectTrigger$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectTrigger
> = z
    .object({
        actor: z.lazy(() => ListPipelinesForProjectActor$outboundSchema),
        receivedAt: z.date().transform((v) => v.toISOString()),
        type: ListPipelinesForProjectPipelineType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            receivedAt: "received_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectTrigger$ {
    /** @deprecated use `ListPipelinesForProjectTrigger$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectTrigger$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectTrigger$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectTrigger$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectTrigger$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectTrigger$Outbound;
}

/** @internal */
export const ListPipelinesForProject4$inboundSchema: z.ZodType<
    ListPipelinesForProject4,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type ListPipelinesForProject4$Outbound = {};

/** @internal */
export const ListPipelinesForProject4$outboundSchema: z.ZodType<
    ListPipelinesForProject4$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProject4
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProject4$ {
    /** @deprecated use `ListPipelinesForProject4$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProject4$inboundSchema;
    /** @deprecated use `ListPipelinesForProject4$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProject4$outboundSchema;
    /** @deprecated use `ListPipelinesForProject4$Outbound` instead. */
    export type Outbound = ListPipelinesForProject4$Outbound;
}

/** @internal */
export const ListPipelinesForProjectTriggerParameters$inboundSchema: z.ZodType<
    ListPipelinesForProjectTriggerParameters,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListPipelinesForProject4$inboundSchema),
    z.string(),
    z.number().int(),
    z.boolean(),
]);

/** @internal */
export type ListPipelinesForProjectTriggerParameters$Outbound =
    | ListPipelinesForProject4$Outbound
    | string
    | number
    | boolean;

/** @internal */
export const ListPipelinesForProjectTriggerParameters$outboundSchema: z.ZodType<
    ListPipelinesForProjectTriggerParameters$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectTriggerParameters
> = z.union([
    z.lazy(() => ListPipelinesForProject4$outboundSchema),
    z.string(),
    z.number().int(),
    z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectTriggerParameters$ {
    /** @deprecated use `ListPipelinesForProjectTriggerParameters$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectTriggerParameters$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectTriggerParameters$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectTriggerParameters$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectTriggerParameters$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectTriggerParameters$Outbound;
}

/** @internal */
export const ListPipelinesForProjectCommit$inboundSchema: z.ZodType<
    ListPipelinesForProjectCommit,
    z.ZodTypeDef,
    unknown
> = z.object({
    body: z.string(),
    subject: z.string(),
});

/** @internal */
export type ListPipelinesForProjectCommit$Outbound = {
    body: string;
    subject: string;
};

/** @internal */
export const ListPipelinesForProjectCommit$outboundSchema: z.ZodType<
    ListPipelinesForProjectCommit$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectCommit
> = z.object({
    body: z.string(),
    subject: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectCommit$ {
    /** @deprecated use `ListPipelinesForProjectCommit$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectCommit$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectCommit$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectCommit$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectCommit$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectCommit$Outbound;
}

/** @internal */
export const ListPipelinesForProjectVcs$inboundSchema: z.ZodType<
    ListPipelinesForProjectVcs,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => ListPipelinesForProjectCommit$inboundSchema).optional(),
        origin_repository_url: z.string(),
        provider_name: z.string(),
        review_id: z.string().optional(),
        review_url: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        target_repository_url: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            origin_repository_url: "originRepositoryUrl",
            provider_name: "providerName",
            review_id: "reviewId",
            review_url: "reviewUrl",
            target_repository_url: "targetRepositoryUrl",
        });
    });

/** @internal */
export type ListPipelinesForProjectVcs$Outbound = {
    branch?: string | undefined;
    commit?: ListPipelinesForProjectCommit$Outbound | undefined;
    origin_repository_url: string;
    provider_name: string;
    review_id?: string | undefined;
    review_url?: string | undefined;
    revision: string;
    tag?: string | undefined;
    target_repository_url: string;
};

/** @internal */
export const ListPipelinesForProjectVcs$outboundSchema: z.ZodType<
    ListPipelinesForProjectVcs$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectVcs
> = z
    .object({
        branch: z.string().optional(),
        commit: z.lazy(() => ListPipelinesForProjectCommit$outboundSchema).optional(),
        originRepositoryUrl: z.string(),
        providerName: z.string(),
        reviewId: z.string().optional(),
        reviewUrl: z.string().optional(),
        revision: z.string(),
        tag: z.string().optional(),
        targetRepositoryUrl: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            originRepositoryUrl: "origin_repository_url",
            providerName: "provider_name",
            reviewId: "review_id",
            reviewUrl: "review_url",
            targetRepositoryUrl: "target_repository_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectVcs$ {
    /** @deprecated use `ListPipelinesForProjectVcs$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectVcs$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectVcs$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectVcs$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectVcs$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectVcs$Outbound;
}

/** @internal */
export const ListPipelinesForProjectPipeline$inboundSchema: z.ZodType<
    ListPipelinesForProjectPipeline,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        errors: z.array(z.lazy(() => ListPipelinesForProjectErrors$inboundSchema)),
        id: z.string(),
        number: z.number().int(),
        project_slug: z.string(),
        state: ListPipelinesForProjectState$inboundSchema,
        trigger: z.lazy(() => ListPipelinesForProjectTrigger$inboundSchema),
        trigger_parameters: z
            .record(
                z.union([
                    z.lazy(() => ListPipelinesForProject4$inboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        vcs: z.lazy(() => ListPipelinesForProjectVcs$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            project_slug: "projectSlug",
            trigger_parameters: "triggerParameters",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type ListPipelinesForProjectPipeline$Outbound = {
    created_at: string;
    errors: Array<ListPipelinesForProjectErrors$Outbound>;
    id: string;
    number: number;
    project_slug: string;
    state: string;
    trigger: ListPipelinesForProjectTrigger$Outbound;
    trigger_parameters?:
        | { [k: string]: ListPipelinesForProject4$Outbound | string | number | boolean }
        | undefined;
    updated_at?: string | undefined;
    vcs?: ListPipelinesForProjectVcs$Outbound | undefined;
};

/** @internal */
export const ListPipelinesForProjectPipeline$outboundSchema: z.ZodType<
    ListPipelinesForProjectPipeline$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectPipeline
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        errors: z.array(z.lazy(() => ListPipelinesForProjectErrors$outboundSchema)),
        id: z.string(),
        number: z.number().int(),
        projectSlug: z.string(),
        state: ListPipelinesForProjectState$outboundSchema,
        trigger: z.lazy(() => ListPipelinesForProjectTrigger$outboundSchema),
        triggerParameters: z
            .record(
                z.union([
                    z.lazy(() => ListPipelinesForProject4$outboundSchema),
                    z.string(),
                    z.number().int(),
                    z.boolean(),
                ])
            )
            .optional(),
        updatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        vcs: z.lazy(() => ListPipelinesForProjectVcs$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            projectSlug: "project_slug",
            triggerParameters: "trigger_parameters",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectPipeline$ {
    /** @deprecated use `ListPipelinesForProjectPipeline$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectPipeline$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectPipeline$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectPipeline$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectPipeline$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectPipeline$Outbound;
}

/** @internal */
export const ListPipelinesForProjectPipelineListResponse$inboundSchema: z.ZodType<
    ListPipelinesForProjectPipelineListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => ListPipelinesForProjectPipeline$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListPipelinesForProjectPipelineListResponse$Outbound = {
    items: Array<ListPipelinesForProjectPipeline$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListPipelinesForProjectPipelineListResponse$outboundSchema: z.ZodType<
    ListPipelinesForProjectPipelineListResponse$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectPipelineListResponse
> = z
    .object({
        items: z.array(z.lazy(() => ListPipelinesForProjectPipeline$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectPipelineListResponse$ {
    /** @deprecated use `ListPipelinesForProjectPipelineListResponse$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectPipelineListResponse$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectPipelineListResponse$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectPipelineListResponse$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectPipelineListResponse$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectPipelineListResponse$Outbound;
}

/** @internal */
export const ListPipelinesForProjectResponse$inboundSchema: z.ZodType<
    ListPipelinesForProjectResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListPipelinesForProjectResponseBody$inboundSchema),
    z.lazy(() => ListPipelinesForProjectPipelineListResponse$inboundSchema),
]);

/** @internal */
export type ListPipelinesForProjectResponse$Outbound =
    | ListPipelinesForProjectResponseBody$Outbound
    | ListPipelinesForProjectPipelineListResponse$Outbound;

/** @internal */
export const ListPipelinesForProjectResponse$outboundSchema: z.ZodType<
    ListPipelinesForProjectResponse$Outbound,
    z.ZodTypeDef,
    ListPipelinesForProjectResponse
> = z.union([
    z.lazy(() => ListPipelinesForProjectResponseBody$outboundSchema),
    z.lazy(() => ListPipelinesForProjectPipelineListResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPipelinesForProjectResponse$ {
    /** @deprecated use `ListPipelinesForProjectResponse$inboundSchema` instead. */
    export const inboundSchema = ListPipelinesForProjectResponse$inboundSchema;
    /** @deprecated use `ListPipelinesForProjectResponse$outboundSchema` instead. */
    export const outboundSchema = ListPipelinesForProjectResponse$outboundSchema;
    /** @deprecated use `ListPipelinesForProjectResponse$Outbound` instead. */
    export type Outbound = ListPipelinesForProjectResponse$Outbound;
}
