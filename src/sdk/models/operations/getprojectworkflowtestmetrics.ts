/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetProjectWorkflowTestMetricsRequest = {
    /**
     * Whether to retrieve data for all branches combined. Use either this parameter OR the branch name parameter.
     */
    allBranches?: boolean | undefined;
    /**
     * The name of a vcs branch. If not passed we will scope the API call to the default branch.
     */
    branch?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
    /**
     * The name of the workflow.
     */
    workflowName: string;
};

/**
 * Error response.
 */
export type GetProjectWorkflowTestMetricsInsightsResponseBody = {
    message?: string | undefined;
};

export type MostFailedTests = {
    /**
     * The class the test belongs to.
     */
    classname: string;
    /**
     * The number of times the test failed
     */
    failedRuns: number;
    /**
     * The file the test belongs to.
     */
    file: string;
    /**
     * Whether the test is flaky.
     */
    flaky: boolean;
    /**
     * The name of the job.
     */
    jobName: string;
    /**
     * The 95th percentile duration, in seconds, among a group of test runs.
     */
    p95Duration: number;
    /**
     * The source of the test.
     */
    source: string;
    /**
     * The name of the test.
     */
    testName: string;
    /**
     * The total number of times the test was run.
     */
    totalRuns: number;
};

export type SlowestTests = {
    /**
     * The class the test belongs to.
     */
    classname: string;
    /**
     * The number of times the test failed
     */
    failedRuns: number;
    /**
     * The file the test belongs to.
     */
    file: string;
    /**
     * Whether the test is flaky.
     */
    flaky: boolean;
    /**
     * The name of the job.
     */
    jobName: string;
    /**
     * The 95th percentile duration, in seconds, among a group of test runs.
     */
    p95Duration: number;
    /**
     * The source of the test.
     */
    source: string;
    /**
     * The name of the test.
     */
    testName: string;
    /**
     * The total number of times the test was run.
     */
    totalRuns: number;
};

/**
 * Test counts for a given pipeline number
 */
export type TestCounts = {
    /**
     * The number of tests with the error status
     */
    error: number;
    /**
     * The number of tests with the failure status
     */
    failure: number;
    /**
     * The number of tests with the skipped status
     */
    skipped: number;
    /**
     * The number of tests with the success status
     */
    success: number;
    /**
     * The total number of tests
     */
    total: number;
};

export type TestRuns = {
    /**
     * The number of the pipeline associated with the provided test counts
     */
    pipelineNumber: number;
    /**
     * The success rate calculated from test counts
     */
    successRate: number;
    /**
     * Test counts for a given pipeline number
     */
    testCounts: TestCounts;
    /**
     * The ID of the workflow associated with the provided test counts
     */
    workflowId?: any | undefined;
};

/**
 * Project level test metrics response
 */
export type GetProjectWorkflowTestMetricsResponseBody = {
    /**
     * The average number of tests executed per run
     */
    averageTestCount: number;
    /**
     * Metrics for the most frequently failing tests
     */
    mostFailedTests: Array<MostFailedTests>;
    /**
     * The number of tests with the same success rate being omitted from most_failed_tests
     */
    mostFailedTestsExtra: number;
    /**
     * Metrics for the slowest running tests
     */
    slowestTests: Array<SlowestTests>;
    /**
     * The number of tests with the same duration rate being omitted from slowest_tests
     */
    slowestTestsExtra: number;
    /**
     * Test counts grouped by pipeline number and workflow id
     */
    testRuns: Array<TestRuns>;
    /**
     * The total number of test runs
     */
    totalTestRuns: number;
};

export type GetProjectWorkflowTestMetricsResponse =
    | GetProjectWorkflowTestMetricsInsightsResponseBody
    | GetProjectWorkflowTestMetricsResponseBody;

/** @internal */
export const GetProjectWorkflowTestMetricsRequest$inboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "all-branches": z.boolean().optional(),
        branch: z.string().optional(),
        "project-slug": z.string(),
        "workflow-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "all-branches": "allBranches",
            "project-slug": "projectSlug",
            "workflow-name": "workflowName",
        });
    });

/** @internal */
export type GetProjectWorkflowTestMetricsRequest$Outbound = {
    "all-branches"?: boolean | undefined;
    branch?: string | undefined;
    "project-slug": string;
    "workflow-name": string;
};

/** @internal */
export const GetProjectWorkflowTestMetricsRequest$outboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsRequest$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowTestMetricsRequest
> = z
    .object({
        allBranches: z.boolean().optional(),
        branch: z.string().optional(),
        projectSlug: z.string(),
        workflowName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            allBranches: "all-branches",
            projectSlug: "project-slug",
            workflowName: "workflow-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowTestMetricsRequest$ {
    /** @deprecated use `GetProjectWorkflowTestMetricsRequest$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowTestMetricsRequest$inboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsRequest$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowTestMetricsRequest$outboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsRequest$Outbound` instead. */
    export type Outbound = GetProjectWorkflowTestMetricsRequest$Outbound;
}

/** @internal */
export const GetProjectWorkflowTestMetricsInsightsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetProjectWorkflowTestMetricsInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetProjectWorkflowTestMetricsInsightsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowTestMetricsInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowTestMetricsInsightsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowTestMetricsInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowTestMetricsInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowTestMetricsInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowTestMetricsInsightsResponseBody$Outbound;
}

/** @internal */
export const MostFailedTests$inboundSchema: z.ZodType<MostFailedTests, z.ZodTypeDef, unknown> = z
    .object({
        classname: z.string(),
        failed_runs: z.number().int(),
        file: z.string(),
        flaky: z.boolean(),
        job_name: z.string(),
        p95_duration: z.number(),
        source: z.string(),
        test_name: z.string(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            failed_runs: "failedRuns",
            job_name: "jobName",
            p95_duration: "p95Duration",
            test_name: "testName",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type MostFailedTests$Outbound = {
    classname: string;
    failed_runs: number;
    file: string;
    flaky: boolean;
    job_name: string;
    p95_duration: number;
    source: string;
    test_name: string;
    total_runs: number;
};

/** @internal */
export const MostFailedTests$outboundSchema: z.ZodType<
    MostFailedTests$Outbound,
    z.ZodTypeDef,
    MostFailedTests
> = z
    .object({
        classname: z.string(),
        failedRuns: z.number().int(),
        file: z.string(),
        flaky: z.boolean(),
        jobName: z.string(),
        p95Duration: z.number(),
        source: z.string(),
        testName: z.string(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            failedRuns: "failed_runs",
            jobName: "job_name",
            p95Duration: "p95_duration",
            testName: "test_name",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MostFailedTests$ {
    /** @deprecated use `MostFailedTests$inboundSchema` instead. */
    export const inboundSchema = MostFailedTests$inboundSchema;
    /** @deprecated use `MostFailedTests$outboundSchema` instead. */
    export const outboundSchema = MostFailedTests$outboundSchema;
    /** @deprecated use `MostFailedTests$Outbound` instead. */
    export type Outbound = MostFailedTests$Outbound;
}

/** @internal */
export const SlowestTests$inboundSchema: z.ZodType<SlowestTests, z.ZodTypeDef, unknown> = z
    .object({
        classname: z.string(),
        failed_runs: z.number().int(),
        file: z.string(),
        flaky: z.boolean(),
        job_name: z.string(),
        p95_duration: z.number(),
        source: z.string(),
        test_name: z.string(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            failed_runs: "failedRuns",
            job_name: "jobName",
            p95_duration: "p95Duration",
            test_name: "testName",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type SlowestTests$Outbound = {
    classname: string;
    failed_runs: number;
    file: string;
    flaky: boolean;
    job_name: string;
    p95_duration: number;
    source: string;
    test_name: string;
    total_runs: number;
};

/** @internal */
export const SlowestTests$outboundSchema: z.ZodType<
    SlowestTests$Outbound,
    z.ZodTypeDef,
    SlowestTests
> = z
    .object({
        classname: z.string(),
        failedRuns: z.number().int(),
        file: z.string(),
        flaky: z.boolean(),
        jobName: z.string(),
        p95Duration: z.number(),
        source: z.string(),
        testName: z.string(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            failedRuns: "failed_runs",
            jobName: "job_name",
            p95Duration: "p95_duration",
            testName: "test_name",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SlowestTests$ {
    /** @deprecated use `SlowestTests$inboundSchema` instead. */
    export const inboundSchema = SlowestTests$inboundSchema;
    /** @deprecated use `SlowestTests$outboundSchema` instead. */
    export const outboundSchema = SlowestTests$outboundSchema;
    /** @deprecated use `SlowestTests$Outbound` instead. */
    export type Outbound = SlowestTests$Outbound;
}

/** @internal */
export const TestCounts$inboundSchema: z.ZodType<TestCounts, z.ZodTypeDef, unknown> = z.object({
    error: z.number().int(),
    failure: z.number().int(),
    skipped: z.number().int(),
    success: z.number().int(),
    total: z.number().int(),
});

/** @internal */
export type TestCounts$Outbound = {
    error: number;
    failure: number;
    skipped: number;
    success: number;
    total: number;
};

/** @internal */
export const TestCounts$outboundSchema: z.ZodType<TestCounts$Outbound, z.ZodTypeDef, TestCounts> =
    z.object({
        error: z.number().int(),
        failure: z.number().int(),
        skipped: z.number().int(),
        success: z.number().int(),
        total: z.number().int(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestCounts$ {
    /** @deprecated use `TestCounts$inboundSchema` instead. */
    export const inboundSchema = TestCounts$inboundSchema;
    /** @deprecated use `TestCounts$outboundSchema` instead. */
    export const outboundSchema = TestCounts$outboundSchema;
    /** @deprecated use `TestCounts$Outbound` instead. */
    export type Outbound = TestCounts$Outbound;
}

/** @internal */
export const TestRuns$inboundSchema: z.ZodType<TestRuns, z.ZodTypeDef, unknown> = z
    .object({
        pipeline_number: z.number().int(),
        success_rate: z.number(),
        test_counts: z.lazy(() => TestCounts$inboundSchema),
        workflow_id: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            pipeline_number: "pipelineNumber",
            success_rate: "successRate",
            test_counts: "testCounts",
            workflow_id: "workflowId",
        });
    });

/** @internal */
export type TestRuns$Outbound = {
    pipeline_number: number;
    success_rate: number;
    test_counts: TestCounts$Outbound;
    workflow_id?: any | undefined;
};

/** @internal */
export const TestRuns$outboundSchema: z.ZodType<TestRuns$Outbound, z.ZodTypeDef, TestRuns> = z
    .object({
        pipelineNumber: z.number().int(),
        successRate: z.number(),
        testCounts: z.lazy(() => TestCounts$outboundSchema),
        workflowId: z.any().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            pipelineNumber: "pipeline_number",
            successRate: "success_rate",
            testCounts: "test_counts",
            workflowId: "workflow_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestRuns$ {
    /** @deprecated use `TestRuns$inboundSchema` instead. */
    export const inboundSchema = TestRuns$inboundSchema;
    /** @deprecated use `TestRuns$outboundSchema` instead. */
    export const outboundSchema = TestRuns$outboundSchema;
    /** @deprecated use `TestRuns$Outbound` instead. */
    export type Outbound = TestRuns$Outbound;
}

/** @internal */
export const GetProjectWorkflowTestMetricsResponseBody$inboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        average_test_count: z.number().int(),
        most_failed_tests: z.array(z.lazy(() => MostFailedTests$inboundSchema)),
        most_failed_tests_extra: z.number().int(),
        slowest_tests: z.array(z.lazy(() => SlowestTests$inboundSchema)),
        slowest_tests_extra: z.number().int(),
        test_runs: z.array(z.lazy(() => TestRuns$inboundSchema)),
        total_test_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            average_test_count: "averageTestCount",
            most_failed_tests: "mostFailedTests",
            most_failed_tests_extra: "mostFailedTestsExtra",
            slowest_tests: "slowestTests",
            slowest_tests_extra: "slowestTestsExtra",
            test_runs: "testRuns",
            total_test_runs: "totalTestRuns",
        });
    });

/** @internal */
export type GetProjectWorkflowTestMetricsResponseBody$Outbound = {
    average_test_count: number;
    most_failed_tests: Array<MostFailedTests$Outbound>;
    most_failed_tests_extra: number;
    slowest_tests: Array<SlowestTests$Outbound>;
    slowest_tests_extra: number;
    test_runs: Array<TestRuns$Outbound>;
    total_test_runs: number;
};

/** @internal */
export const GetProjectWorkflowTestMetricsResponseBody$outboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsResponseBody$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowTestMetricsResponseBody
> = z
    .object({
        averageTestCount: z.number().int(),
        mostFailedTests: z.array(z.lazy(() => MostFailedTests$outboundSchema)),
        mostFailedTestsExtra: z.number().int(),
        slowestTests: z.array(z.lazy(() => SlowestTests$outboundSchema)),
        slowestTestsExtra: z.number().int(),
        testRuns: z.array(z.lazy(() => TestRuns$outboundSchema)),
        totalTestRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            averageTestCount: "average_test_count",
            mostFailedTests: "most_failed_tests",
            mostFailedTestsExtra: "most_failed_tests_extra",
            slowestTests: "slowest_tests",
            slowestTestsExtra: "slowest_tests_extra",
            testRuns: "test_runs",
            totalTestRuns: "total_test_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowTestMetricsResponseBody$ {
    /** @deprecated use `GetProjectWorkflowTestMetricsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowTestMetricsResponseBody$inboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowTestMetricsResponseBody$outboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsResponseBody$Outbound` instead. */
    export type Outbound = GetProjectWorkflowTestMetricsResponseBody$Outbound;
}

/** @internal */
export const GetProjectWorkflowTestMetricsResponse$inboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetProjectWorkflowTestMetricsInsightsResponseBody$inboundSchema),
    z.lazy(() => GetProjectWorkflowTestMetricsResponseBody$inboundSchema),
]);

/** @internal */
export type GetProjectWorkflowTestMetricsResponse$Outbound =
    | GetProjectWorkflowTestMetricsInsightsResponseBody$Outbound
    | GetProjectWorkflowTestMetricsResponseBody$Outbound;

/** @internal */
export const GetProjectWorkflowTestMetricsResponse$outboundSchema: z.ZodType<
    GetProjectWorkflowTestMetricsResponse$Outbound,
    z.ZodTypeDef,
    GetProjectWorkflowTestMetricsResponse
> = z.union([
    z.lazy(() => GetProjectWorkflowTestMetricsInsightsResponseBody$outboundSchema),
    z.lazy(() => GetProjectWorkflowTestMetricsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectWorkflowTestMetricsResponse$ {
    /** @deprecated use `GetProjectWorkflowTestMetricsResponse$inboundSchema` instead. */
    export const inboundSchema = GetProjectWorkflowTestMetricsResponse$inboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsResponse$outboundSchema` instead. */
    export const outboundSchema = GetProjectWorkflowTestMetricsResponse$outboundSchema;
    /** @deprecated use `GetProjectWorkflowTestMetricsResponse$Outbound` instead. */
    export type Outbound = GetProjectWorkflowTestMetricsResponse$Outbound;
}
