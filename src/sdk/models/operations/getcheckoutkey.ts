/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetCheckoutKeyRequest = {
    /**
     * An SSH key fingerprint.
     */
    fingerprint: string;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type GetCheckoutKeyResponseBody = {
    message?: string | undefined;
};

/**
 * The type of checkout key. This may be either `deploy-key` or `github-user-key`.
 */
export const GetCheckoutKeyCheckoutKeyType = {
    DeployKey: "deploy-key",
    GithubUserKey: "github-user-key",
} as const;
/**
 * The type of checkout key. This may be either `deploy-key` or `github-user-key`.
 */
export type GetCheckoutKeyCheckoutKeyType = ClosedEnum<typeof GetCheckoutKeyCheckoutKeyType>;

/**
 * A checkout key
 */
export type GetCheckoutKeyCheckoutKey = {
    /**
     * The date and time the checkout key was created.
     */
    createdAt: Date;
    /**
     * An SSH key fingerprint.
     */
    fingerprint: string;
    /**
     * A boolean value that indicates if this key is preferred.
     */
    preferred: boolean;
    /**
     * A public SSH key.
     */
    publicKey: string;
    /**
     * The type of checkout key. This may be either `deploy-key` or `github-user-key`.
     */
    type: GetCheckoutKeyCheckoutKeyType;
};

export type GetCheckoutKeyResponse = GetCheckoutKeyResponseBody | GetCheckoutKeyCheckoutKey;

/** @internal */
export const GetCheckoutKeyRequest$inboundSchema: z.ZodType<
    GetCheckoutKeyRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        fingerprint: z.string(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type GetCheckoutKeyRequest$Outbound = {
    fingerprint: string;
    "project-slug": string;
};

/** @internal */
export const GetCheckoutKeyRequest$outboundSchema: z.ZodType<
    GetCheckoutKeyRequest$Outbound,
    z.ZodTypeDef,
    GetCheckoutKeyRequest
> = z
    .object({
        fingerprint: z.string(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCheckoutKeyRequest$ {
    /** @deprecated use `GetCheckoutKeyRequest$inboundSchema` instead. */
    export const inboundSchema = GetCheckoutKeyRequest$inboundSchema;
    /** @deprecated use `GetCheckoutKeyRequest$outboundSchema` instead. */
    export const outboundSchema = GetCheckoutKeyRequest$outboundSchema;
    /** @deprecated use `GetCheckoutKeyRequest$Outbound` instead. */
    export type Outbound = GetCheckoutKeyRequest$Outbound;
}

/** @internal */
export const GetCheckoutKeyResponseBody$inboundSchema: z.ZodType<
    GetCheckoutKeyResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetCheckoutKeyResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetCheckoutKeyResponseBody$outboundSchema: z.ZodType<
    GetCheckoutKeyResponseBody$Outbound,
    z.ZodTypeDef,
    GetCheckoutKeyResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCheckoutKeyResponseBody$ {
    /** @deprecated use `GetCheckoutKeyResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetCheckoutKeyResponseBody$inboundSchema;
    /** @deprecated use `GetCheckoutKeyResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetCheckoutKeyResponseBody$outboundSchema;
    /** @deprecated use `GetCheckoutKeyResponseBody$Outbound` instead. */
    export type Outbound = GetCheckoutKeyResponseBody$Outbound;
}

/** @internal */
export const GetCheckoutKeyCheckoutKeyType$inboundSchema: z.ZodNativeEnum<
    typeof GetCheckoutKeyCheckoutKeyType
> = z.nativeEnum(GetCheckoutKeyCheckoutKeyType);

/** @internal */
export const GetCheckoutKeyCheckoutKeyType$outboundSchema: z.ZodNativeEnum<
    typeof GetCheckoutKeyCheckoutKeyType
> = GetCheckoutKeyCheckoutKeyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCheckoutKeyCheckoutKeyType$ {
    /** @deprecated use `GetCheckoutKeyCheckoutKeyType$inboundSchema` instead. */
    export const inboundSchema = GetCheckoutKeyCheckoutKeyType$inboundSchema;
    /** @deprecated use `GetCheckoutKeyCheckoutKeyType$outboundSchema` instead. */
    export const outboundSchema = GetCheckoutKeyCheckoutKeyType$outboundSchema;
}

/** @internal */
export const GetCheckoutKeyCheckoutKey$inboundSchema: z.ZodType<
    GetCheckoutKeyCheckoutKey,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        fingerprint: z.string(),
        preferred: z.boolean(),
        "public-key": z.string(),
        type: GetCheckoutKeyCheckoutKeyType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "public-key": "publicKey",
        });
    });

/** @internal */
export type GetCheckoutKeyCheckoutKey$Outbound = {
    "created-at": string;
    fingerprint: string;
    preferred: boolean;
    "public-key": string;
    type: string;
};

/** @internal */
export const GetCheckoutKeyCheckoutKey$outboundSchema: z.ZodType<
    GetCheckoutKeyCheckoutKey$Outbound,
    z.ZodTypeDef,
    GetCheckoutKeyCheckoutKey
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        fingerprint: z.string(),
        preferred: z.boolean(),
        publicKey: z.string(),
        type: GetCheckoutKeyCheckoutKeyType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            publicKey: "public-key",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCheckoutKeyCheckoutKey$ {
    /** @deprecated use `GetCheckoutKeyCheckoutKey$inboundSchema` instead. */
    export const inboundSchema = GetCheckoutKeyCheckoutKey$inboundSchema;
    /** @deprecated use `GetCheckoutKeyCheckoutKey$outboundSchema` instead. */
    export const outboundSchema = GetCheckoutKeyCheckoutKey$outboundSchema;
    /** @deprecated use `GetCheckoutKeyCheckoutKey$Outbound` instead. */
    export type Outbound = GetCheckoutKeyCheckoutKey$Outbound;
}

/** @internal */
export const GetCheckoutKeyResponse$inboundSchema: z.ZodType<
    GetCheckoutKeyResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetCheckoutKeyResponseBody$inboundSchema),
    z.lazy(() => GetCheckoutKeyCheckoutKey$inboundSchema),
]);

/** @internal */
export type GetCheckoutKeyResponse$Outbound =
    | GetCheckoutKeyResponseBody$Outbound
    | GetCheckoutKeyCheckoutKey$Outbound;

/** @internal */
export const GetCheckoutKeyResponse$outboundSchema: z.ZodType<
    GetCheckoutKeyResponse$Outbound,
    z.ZodTypeDef,
    GetCheckoutKeyResponse
> = z.union([
    z.lazy(() => GetCheckoutKeyResponseBody$outboundSchema),
    z.lazy(() => GetCheckoutKeyCheckoutKey$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCheckoutKeyResponse$ {
    /** @deprecated use `GetCheckoutKeyResponse$inboundSchema` instead. */
    export const inboundSchema = GetCheckoutKeyResponse$inboundSchema;
    /** @deprecated use `GetCheckoutKeyResponse$outboundSchema` instead. */
    export const outboundSchema = GetCheckoutKeyResponse$outboundSchema;
    /** @deprecated use `GetCheckoutKeyResponse$Outbound` instead. */
    export type Outbound = GetCheckoutKeyResponse$Outbound;
}
