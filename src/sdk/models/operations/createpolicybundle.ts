/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CreatePolicyBundleRequest = {
    bundlePayload?: shared.BundlePayload | undefined;
    context: string;
    dry?: boolean | undefined;
    ownerID: string;
};

/**
 * The request exceeds the maximum payload size for policy bundles ~2.5Mib
 *
 * @remarks
 *
 */
export type CreatePolicyBundlePolicyManagementResponse413ResponseBody = {
    error: string;
};

/**
 * The request is malformed (e.g, a given path parameter is invalid)
 *
 * @remarks
 *
 */
export type CreatePolicyBundleResponseBody = {
    error: string;
};

export type CreatePolicyBundleResponse =
    | CreatePolicyBundleResponseBody
    | CreatePolicyBundlePolicyManagementResponse413ResponseBody
    | shared.BundleDiff;

/** @internal */
export const CreatePolicyBundleRequest$inboundSchema: z.ZodType<
    CreatePolicyBundleRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        BundlePayload: shared.BundlePayload$inboundSchema.optional(),
        context: z.string(),
        dry: z.boolean().optional(),
        ownerID: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            BundlePayload: "bundlePayload",
        });
    });

/** @internal */
export type CreatePolicyBundleRequest$Outbound = {
    BundlePayload?: shared.BundlePayload$Outbound | undefined;
    context: string;
    dry?: boolean | undefined;
    ownerID: string;
};

/** @internal */
export const CreatePolicyBundleRequest$outboundSchema: z.ZodType<
    CreatePolicyBundleRequest$Outbound,
    z.ZodTypeDef,
    CreatePolicyBundleRequest
> = z
    .object({
        bundlePayload: shared.BundlePayload$outboundSchema.optional(),
        context: z.string(),
        dry: z.boolean().optional(),
        ownerID: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            bundlePayload: "BundlePayload",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyBundleRequest$ {
    /** @deprecated use `CreatePolicyBundleRequest$inboundSchema` instead. */
    export const inboundSchema = CreatePolicyBundleRequest$inboundSchema;
    /** @deprecated use `CreatePolicyBundleRequest$outboundSchema` instead. */
    export const outboundSchema = CreatePolicyBundleRequest$outboundSchema;
    /** @deprecated use `CreatePolicyBundleRequest$Outbound` instead. */
    export type Outbound = CreatePolicyBundleRequest$Outbound;
}

/** @internal */
export const CreatePolicyBundlePolicyManagementResponse413ResponseBody$inboundSchema: z.ZodType<
    CreatePolicyBundlePolicyManagementResponse413ResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.string(),
});

/** @internal */
export type CreatePolicyBundlePolicyManagementResponse413ResponseBody$Outbound = {
    error: string;
};

/** @internal */
export const CreatePolicyBundlePolicyManagementResponse413ResponseBody$outboundSchema: z.ZodType<
    CreatePolicyBundlePolicyManagementResponse413ResponseBody$Outbound,
    z.ZodTypeDef,
    CreatePolicyBundlePolicyManagementResponse413ResponseBody
> = z.object({
    error: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyBundlePolicyManagementResponse413ResponseBody$ {
    /** @deprecated use `CreatePolicyBundlePolicyManagementResponse413ResponseBody$inboundSchema` instead. */
    export const inboundSchema =
        CreatePolicyBundlePolicyManagementResponse413ResponseBody$inboundSchema;
    /** @deprecated use `CreatePolicyBundlePolicyManagementResponse413ResponseBody$outboundSchema` instead. */
    export const outboundSchema =
        CreatePolicyBundlePolicyManagementResponse413ResponseBody$outboundSchema;
    /** @deprecated use `CreatePolicyBundlePolicyManagementResponse413ResponseBody$Outbound` instead. */
    export type Outbound = CreatePolicyBundlePolicyManagementResponse413ResponseBody$Outbound;
}

/** @internal */
export const CreatePolicyBundleResponseBody$inboundSchema: z.ZodType<
    CreatePolicyBundleResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    error: z.string(),
});

/** @internal */
export type CreatePolicyBundleResponseBody$Outbound = {
    error: string;
};

/** @internal */
export const CreatePolicyBundleResponseBody$outboundSchema: z.ZodType<
    CreatePolicyBundleResponseBody$Outbound,
    z.ZodTypeDef,
    CreatePolicyBundleResponseBody
> = z.object({
    error: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyBundleResponseBody$ {
    /** @deprecated use `CreatePolicyBundleResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreatePolicyBundleResponseBody$inboundSchema;
    /** @deprecated use `CreatePolicyBundleResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreatePolicyBundleResponseBody$outboundSchema;
    /** @deprecated use `CreatePolicyBundleResponseBody$Outbound` instead. */
    export type Outbound = CreatePolicyBundleResponseBody$Outbound;
}

/** @internal */
export const CreatePolicyBundleResponse$inboundSchema: z.ZodType<
    CreatePolicyBundleResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CreatePolicyBundleResponseBody$inboundSchema),
    z.lazy(() => CreatePolicyBundlePolicyManagementResponse413ResponseBody$inboundSchema),
    shared.BundleDiff$inboundSchema,
]);

/** @internal */
export type CreatePolicyBundleResponse$Outbound =
    | CreatePolicyBundleResponseBody$Outbound
    | CreatePolicyBundlePolicyManagementResponse413ResponseBody$Outbound
    | shared.BundleDiff$Outbound;

/** @internal */
export const CreatePolicyBundleResponse$outboundSchema: z.ZodType<
    CreatePolicyBundleResponse$Outbound,
    z.ZodTypeDef,
    CreatePolicyBundleResponse
> = z.union([
    z.lazy(() => CreatePolicyBundleResponseBody$outboundSchema),
    z.lazy(() => CreatePolicyBundlePolicyManagementResponse413ResponseBody$outboundSchema),
    shared.BundleDiff$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePolicyBundleResponse$ {
    /** @deprecated use `CreatePolicyBundleResponse$inboundSchema` instead. */
    export const inboundSchema = CreatePolicyBundleResponse$inboundSchema;
    /** @deprecated use `CreatePolicyBundleResponse$outboundSchema` instead. */
    export const outboundSchema = CreatePolicyBundleResponse$outboundSchema;
    /** @deprecated use `CreatePolicyBundleResponse$Outbound` instead. */
    export type Outbound = CreatePolicyBundleResponse$Outbound;
}
