/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * List of project names.
 */
export type ProjectNames = {};

/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export const ReportingWindow = {
    Last7Days: "last-7-days",
    Last90Days: "last-90-days",
    Last24Hours: "last-24-hours",
    Last30Days: "last-30-days",
    Last60Days: "last-60-days",
} as const;
/**
 * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
 */
export type ReportingWindow = ClosedEnum<typeof ReportingWindow>;

export type GetOrgSummaryDataRequest = {
    /**
     * Org slug in the form `vcs-slug/org-name`. The `/` characters may be URL-escaped.
     */
    orgSlug: string;
    /**
     * List of project names.
     */
    projectNames?: ProjectNames | undefined;
    /**
     * The time window used to calculate summary metrics. If not provided, defaults to last-90-days
     */
    reportingWindow?: ReportingWindow | undefined;
};

/**
 * Error response.
 */
export type GetOrgSummaryDataInsightsResponseBody = {
    message?: string | undefined;
};

/**
 * Metrics for a single org metrics.
 */
export type GetOrgSummaryDataMetrics = {
    successRate: number;
    /**
     * The average number of runs per day.
     */
    throughput: number;
    /**
     * The total credits consumed over the current timeseries interval.
     */
    totalCreditsUsed: number;
    /**
     * Total duration, in seconds.
     */
    totalDurationSecs: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

/**
 * Trends for a single org.
 */
export type GetOrgSummaryDataInsightsTrends = {
    /**
     * The trend value for the success rate.
     */
    successRate: number;
    /**
     * Trend value for the average number of runs per day.
     */
    throughput: number;
    /**
     * The trend value for total credits consumed.
     */
    totalCreditsUsed: number;
    /**
     * Trend value for total duration.
     */
    totalDurationSecs: number;
    /**
     * The trend value for total number of runs.
     */
    totalRuns: number;
};

/**
 * Aggregated metrics for an org, with trends.
 */
export type OrgData = {
    /**
     * Metrics for a single org metrics.
     */
    metrics: GetOrgSummaryDataMetrics;
    /**
     * Trends for a single org.
     */
    trends: GetOrgSummaryDataInsightsTrends;
};

/**
 * Metrics for a single project, across all branches.
 */
export type GetOrgSummaryDataInsightsMetrics = {
    successRate: number;
    /**
     * The total credits consumed over the current timeseries interval.
     */
    totalCreditsUsed: number;
    /**
     * Total duration, in seconds.
     */
    totalDurationSecs: number;
    /**
     * The total number of runs, including runs that are still on-hold or running.
     */
    totalRuns: number;
};

/**
 * Trends for a single project, across all branches.
 */
export type GetOrgSummaryDataTrends = {
    /**
     * The trend value for the success rate.
     */
    successRate: number;
    /**
     * The trend value for total credits consumed.
     */
    totalCreditsUsed: number;
    /**
     * Trend value for total duration.
     */
    totalDurationSecs: number;
    /**
     * The trend value for total number of runs.
     */
    totalRuns: number;
};

export type OrgProjectData = {
    /**
     * Metrics for a single project, across all branches.
     */
    metrics: GetOrgSummaryDataInsightsMetrics;
    /**
     * The name of the project.
     */
    projectName: string;
    /**
     * Trends for a single project, across all branches.
     */
    trends: GetOrgSummaryDataTrends;
};

/**
 * Summary metrics with trends for the entire org, and for each project.
 */
export type GetOrgSummaryDataResponseBody = {
    /**
     * A list of all the project names in the organization.
     */
    allProjects: Array<string>;
    /**
     * Aggregated metrics for an org, with trends.
     */
    orgData: OrgData;
    /**
     * Metrics for a single project, across all branches
     */
    orgProjectData: Array<OrgProjectData>;
};

export type GetOrgSummaryDataResponse =
    | GetOrgSummaryDataInsightsResponseBody
    | GetOrgSummaryDataResponseBody;

/** @internal */
export const ProjectNames$inboundSchema: z.ZodType<ProjectNames, z.ZodTypeDef, unknown> = z.object(
    {}
);

/** @internal */
export type ProjectNames$Outbound = {};

/** @internal */
export const ProjectNames$outboundSchema: z.ZodType<
    ProjectNames$Outbound,
    z.ZodTypeDef,
    ProjectNames
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectNames$ {
    /** @deprecated use `ProjectNames$inboundSchema` instead. */
    export const inboundSchema = ProjectNames$inboundSchema;
    /** @deprecated use `ProjectNames$outboundSchema` instead. */
    export const outboundSchema = ProjectNames$outboundSchema;
    /** @deprecated use `ProjectNames$Outbound` instead. */
    export type Outbound = ProjectNames$Outbound;
}

/** @internal */
export const ReportingWindow$inboundSchema: z.ZodNativeEnum<typeof ReportingWindow> =
    z.nativeEnum(ReportingWindow);

/** @internal */
export const ReportingWindow$outboundSchema: z.ZodNativeEnum<typeof ReportingWindow> =
    ReportingWindow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportingWindow$ {
    /** @deprecated use `ReportingWindow$inboundSchema` instead. */
    export const inboundSchema = ReportingWindow$inboundSchema;
    /** @deprecated use `ReportingWindow$outboundSchema` instead. */
    export const outboundSchema = ReportingWindow$outboundSchema;
}

/** @internal */
export const GetOrgSummaryDataRequest$inboundSchema: z.ZodType<
    GetOrgSummaryDataRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "org-slug": z.string(),
        "project-names": z.lazy(() => ProjectNames$inboundSchema).optional(),
        "reporting-window": ReportingWindow$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "org-slug": "orgSlug",
            "project-names": "projectNames",
            "reporting-window": "reportingWindow",
        });
    });

/** @internal */
export type GetOrgSummaryDataRequest$Outbound = {
    "org-slug": string;
    "project-names"?: ProjectNames$Outbound | undefined;
    "reporting-window"?: string | undefined;
};

/** @internal */
export const GetOrgSummaryDataRequest$outboundSchema: z.ZodType<
    GetOrgSummaryDataRequest$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataRequest
> = z
    .object({
        orgSlug: z.string(),
        projectNames: z.lazy(() => ProjectNames$outboundSchema).optional(),
        reportingWindow: ReportingWindow$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            orgSlug: "org-slug",
            projectNames: "project-names",
            reportingWindow: "reporting-window",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataRequest$ {
    /** @deprecated use `GetOrgSummaryDataRequest$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataRequest$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataRequest$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataRequest$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataRequest$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataRequest$Outbound;
}

/** @internal */
export const GetOrgSummaryDataInsightsResponseBody$inboundSchema: z.ZodType<
    GetOrgSummaryDataInsightsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetOrgSummaryDataInsightsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetOrgSummaryDataInsightsResponseBody$outboundSchema: z.ZodType<
    GetOrgSummaryDataInsightsResponseBody$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataInsightsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataInsightsResponseBody$ {
    /** @deprecated use `GetOrgSummaryDataInsightsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataInsightsResponseBody$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataInsightsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataInsightsResponseBody$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataInsightsResponseBody$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataInsightsResponseBody$Outbound;
}

/** @internal */
export const GetOrgSummaryDataMetrics$inboundSchema: z.ZodType<
    GetOrgSummaryDataMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success_rate: z.number(),
        throughput: z.number(),
        total_credits_used: z.number().int(),
        total_duration_secs: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_duration_secs: "totalDurationSecs",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetOrgSummaryDataMetrics$Outbound = {
    success_rate: number;
    throughput: number;
    total_credits_used: number;
    total_duration_secs: number;
    total_runs: number;
};

/** @internal */
export const GetOrgSummaryDataMetrics$outboundSchema: z.ZodType<
    GetOrgSummaryDataMetrics$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataMetrics
> = z
    .object({
        successRate: z.number(),
        throughput: z.number(),
        totalCreditsUsed: z.number().int(),
        totalDurationSecs: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalDurationSecs: "total_duration_secs",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataMetrics$ {
    /** @deprecated use `GetOrgSummaryDataMetrics$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataMetrics$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataMetrics$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataMetrics$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataMetrics$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataMetrics$Outbound;
}

/** @internal */
export const GetOrgSummaryDataInsightsTrends$inboundSchema: z.ZodType<
    GetOrgSummaryDataInsightsTrends,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success_rate: z.number(),
        throughput: z.number(),
        total_credits_used: z.number(),
        total_duration_secs: z.number(),
        total_runs: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_duration_secs: "totalDurationSecs",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetOrgSummaryDataInsightsTrends$Outbound = {
    success_rate: number;
    throughput: number;
    total_credits_used: number;
    total_duration_secs: number;
    total_runs: number;
};

/** @internal */
export const GetOrgSummaryDataInsightsTrends$outboundSchema: z.ZodType<
    GetOrgSummaryDataInsightsTrends$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataInsightsTrends
> = z
    .object({
        successRate: z.number(),
        throughput: z.number(),
        totalCreditsUsed: z.number(),
        totalDurationSecs: z.number(),
        totalRuns: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalDurationSecs: "total_duration_secs",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataInsightsTrends$ {
    /** @deprecated use `GetOrgSummaryDataInsightsTrends$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataInsightsTrends$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataInsightsTrends$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataInsightsTrends$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataInsightsTrends$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataInsightsTrends$Outbound;
}

/** @internal */
export const OrgData$inboundSchema: z.ZodType<OrgData, z.ZodTypeDef, unknown> = z.object({
    metrics: z.lazy(() => GetOrgSummaryDataMetrics$inboundSchema),
    trends: z.lazy(() => GetOrgSummaryDataInsightsTrends$inboundSchema),
});

/** @internal */
export type OrgData$Outbound = {
    metrics: GetOrgSummaryDataMetrics$Outbound;
    trends: GetOrgSummaryDataInsightsTrends$Outbound;
};

/** @internal */
export const OrgData$outboundSchema: z.ZodType<OrgData$Outbound, z.ZodTypeDef, OrgData> = z.object({
    metrics: z.lazy(() => GetOrgSummaryDataMetrics$outboundSchema),
    trends: z.lazy(() => GetOrgSummaryDataInsightsTrends$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgData$ {
    /** @deprecated use `OrgData$inboundSchema` instead. */
    export const inboundSchema = OrgData$inboundSchema;
    /** @deprecated use `OrgData$outboundSchema` instead. */
    export const outboundSchema = OrgData$outboundSchema;
    /** @deprecated use `OrgData$Outbound` instead. */
    export type Outbound = OrgData$Outbound;
}

/** @internal */
export const GetOrgSummaryDataInsightsMetrics$inboundSchema: z.ZodType<
    GetOrgSummaryDataInsightsMetrics,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success_rate: z.number(),
        total_credits_used: z.number().int(),
        total_duration_secs: z.number().int(),
        total_runs: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_duration_secs: "totalDurationSecs",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetOrgSummaryDataInsightsMetrics$Outbound = {
    success_rate: number;
    total_credits_used: number;
    total_duration_secs: number;
    total_runs: number;
};

/** @internal */
export const GetOrgSummaryDataInsightsMetrics$outboundSchema: z.ZodType<
    GetOrgSummaryDataInsightsMetrics$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataInsightsMetrics
> = z
    .object({
        successRate: z.number(),
        totalCreditsUsed: z.number().int(),
        totalDurationSecs: z.number().int(),
        totalRuns: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalDurationSecs: "total_duration_secs",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataInsightsMetrics$ {
    /** @deprecated use `GetOrgSummaryDataInsightsMetrics$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataInsightsMetrics$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataInsightsMetrics$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataInsightsMetrics$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataInsightsMetrics$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataInsightsMetrics$Outbound;
}

/** @internal */
export const GetOrgSummaryDataTrends$inboundSchema: z.ZodType<
    GetOrgSummaryDataTrends,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        success_rate: z.number(),
        total_credits_used: z.number(),
        total_duration_secs: z.number(),
        total_runs: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            success_rate: "successRate",
            total_credits_used: "totalCreditsUsed",
            total_duration_secs: "totalDurationSecs",
            total_runs: "totalRuns",
        });
    });

/** @internal */
export type GetOrgSummaryDataTrends$Outbound = {
    success_rate: number;
    total_credits_used: number;
    total_duration_secs: number;
    total_runs: number;
};

/** @internal */
export const GetOrgSummaryDataTrends$outboundSchema: z.ZodType<
    GetOrgSummaryDataTrends$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataTrends
> = z
    .object({
        successRate: z.number(),
        totalCreditsUsed: z.number(),
        totalDurationSecs: z.number(),
        totalRuns: z.number(),
    })
    .transform((v) => {
        return remap$(v, {
            successRate: "success_rate",
            totalCreditsUsed: "total_credits_used",
            totalDurationSecs: "total_duration_secs",
            totalRuns: "total_runs",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataTrends$ {
    /** @deprecated use `GetOrgSummaryDataTrends$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataTrends$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataTrends$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataTrends$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataTrends$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataTrends$Outbound;
}

/** @internal */
export const OrgProjectData$inboundSchema: z.ZodType<OrgProjectData, z.ZodTypeDef, unknown> = z
    .object({
        metrics: z.lazy(() => GetOrgSummaryDataInsightsMetrics$inboundSchema),
        project_name: z.string(),
        trends: z.lazy(() => GetOrgSummaryDataTrends$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            project_name: "projectName",
        });
    });

/** @internal */
export type OrgProjectData$Outbound = {
    metrics: GetOrgSummaryDataInsightsMetrics$Outbound;
    project_name: string;
    trends: GetOrgSummaryDataTrends$Outbound;
};

/** @internal */
export const OrgProjectData$outboundSchema: z.ZodType<
    OrgProjectData$Outbound,
    z.ZodTypeDef,
    OrgProjectData
> = z
    .object({
        metrics: z.lazy(() => GetOrgSummaryDataInsightsMetrics$outboundSchema),
        projectName: z.string(),
        trends: z.lazy(() => GetOrgSummaryDataTrends$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            projectName: "project_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgProjectData$ {
    /** @deprecated use `OrgProjectData$inboundSchema` instead. */
    export const inboundSchema = OrgProjectData$inboundSchema;
    /** @deprecated use `OrgProjectData$outboundSchema` instead. */
    export const outboundSchema = OrgProjectData$outboundSchema;
    /** @deprecated use `OrgProjectData$Outbound` instead. */
    export type Outbound = OrgProjectData$Outbound;
}

/** @internal */
export const GetOrgSummaryDataResponseBody$inboundSchema: z.ZodType<
    GetOrgSummaryDataResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        all_projects: z.array(z.string()),
        org_data: z.lazy(() => OrgData$inboundSchema),
        org_project_data: z.array(z.lazy(() => OrgProjectData$inboundSchema)),
    })
    .transform((v) => {
        return remap$(v, {
            all_projects: "allProjects",
            org_data: "orgData",
            org_project_data: "orgProjectData",
        });
    });

/** @internal */
export type GetOrgSummaryDataResponseBody$Outbound = {
    all_projects: Array<string>;
    org_data: OrgData$Outbound;
    org_project_data: Array<OrgProjectData$Outbound>;
};

/** @internal */
export const GetOrgSummaryDataResponseBody$outboundSchema: z.ZodType<
    GetOrgSummaryDataResponseBody$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataResponseBody
> = z
    .object({
        allProjects: z.array(z.string()),
        orgData: z.lazy(() => OrgData$outboundSchema),
        orgProjectData: z.array(z.lazy(() => OrgProjectData$outboundSchema)),
    })
    .transform((v) => {
        return remap$(v, {
            allProjects: "all_projects",
            orgData: "org_data",
            orgProjectData: "org_project_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataResponseBody$ {
    /** @deprecated use `GetOrgSummaryDataResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataResponseBody$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataResponseBody$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataResponseBody$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataResponseBody$Outbound;
}

/** @internal */
export const GetOrgSummaryDataResponse$inboundSchema: z.ZodType<
    GetOrgSummaryDataResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetOrgSummaryDataInsightsResponseBody$inboundSchema),
    z.lazy(() => GetOrgSummaryDataResponseBody$inboundSchema),
]);

/** @internal */
export type GetOrgSummaryDataResponse$Outbound =
    | GetOrgSummaryDataInsightsResponseBody$Outbound
    | GetOrgSummaryDataResponseBody$Outbound;

/** @internal */
export const GetOrgSummaryDataResponse$outboundSchema: z.ZodType<
    GetOrgSummaryDataResponse$Outbound,
    z.ZodTypeDef,
    GetOrgSummaryDataResponse
> = z.union([
    z.lazy(() => GetOrgSummaryDataInsightsResponseBody$outboundSchema),
    z.lazy(() => GetOrgSummaryDataResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgSummaryDataResponse$ {
    /** @deprecated use `GetOrgSummaryDataResponse$inboundSchema` instead. */
    export const inboundSchema = GetOrgSummaryDataResponse$inboundSchema;
    /** @deprecated use `GetOrgSummaryDataResponse$outboundSchema` instead. */
    export const outboundSchema = GetOrgSummaryDataResponse$outboundSchema;
    /** @deprecated use `GetOrgSummaryDataResponse$Outbound` instead. */
    export type Outbound = GetOrgSummaryDataResponse$Outbound;
}
