/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const UpdateWebhookEvents = {
    WorkflowCompleted: "workflow-completed",
    JobCompleted: "job-completed",
} as const;
export type UpdateWebhookEvents = ClosedEnum<typeof UpdateWebhookEvents>;

/**
 * The parameters for an update webhook request
 */
export type UpdateWebhookRequestBody = {
    /**
     * Events that will trigger the webhook
     */
    events?: Array<UpdateWebhookEvents> | undefined;
    /**
     * Name of the webhook
     */
    name?: string | undefined;
    /**
     * Secret used to build an HMAC hash of the payload and passed as a header in the webhook request
     */
    signingSecret?: string | undefined;
    /**
     * URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
     */
    url?: string | undefined;
    /**
     * Whether to enforce TLS certificate verification when delivering the webhook
     */
    verifyTls?: boolean | undefined;
};

export type UpdateWebhookRequest = {
    requestBody?: UpdateWebhookRequestBody | undefined;
    /**
     * ID of the webhook (UUID)
     */
    webhookId: string;
};

/**
 * Error response.
 */
export type UpdateWebhookResponseBody = {
    message?: string | undefined;
};

export const UpdateWebhookWebhookEvents = {
    WorkflowCompleted: "workflow-completed",
    JobCompleted: "job-completed",
} as const;
export type UpdateWebhookWebhookEvents = ClosedEnum<typeof UpdateWebhookWebhookEvents>;

/**
 * The scope in which the relevant events that will trigger webhooks
 */
export type UpdateWebhookScope = {
    /**
     * ID of the scope being used (at the moment, only project ID is supported)
     */
    id: string;
    /**
     * Type of the scope being used
     */
    type: string;
};

/**
 * A webhook
 */
export type UpdateWebhookWebhook = {
    /**
     * The date and time the webhook was created.
     */
    createdAt: Date;
    /**
     * Events that will trigger the webhook
     */
    events: Array<UpdateWebhookWebhookEvents>;
    /**
     * The unique ID of the webhook
     */
    id: string;
    /**
     * Name of the webhook
     */
    name: string;
    /**
     * The scope in which the relevant events that will trigger webhooks
     */
    scope: UpdateWebhookScope;
    /**
     * Masked value of the secret used to build an HMAC hash of the payload and passed as a header in the webhook request
     */
    signingSecret: string;
    /**
     * The date and time the webhook was last updated.
     */
    updatedAt: Date;
    /**
     * URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)
     */
    url: string;
    /**
     * Whether to enforce TLS certificate verification when delivering the webhook
     */
    verifyTls: boolean;
};

export type UpdateWebhookResponse = UpdateWebhookResponseBody | UpdateWebhookWebhook;

/** @internal */
export const UpdateWebhookEvents$inboundSchema: z.ZodNativeEnum<typeof UpdateWebhookEvents> =
    z.nativeEnum(UpdateWebhookEvents);

/** @internal */
export const UpdateWebhookEvents$outboundSchema: z.ZodNativeEnum<typeof UpdateWebhookEvents> =
    UpdateWebhookEvents$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookEvents$ {
    /** @deprecated use `UpdateWebhookEvents$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookEvents$inboundSchema;
    /** @deprecated use `UpdateWebhookEvents$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookEvents$outboundSchema;
}

/** @internal */
export const UpdateWebhookRequestBody$inboundSchema: z.ZodType<
    UpdateWebhookRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        events: z.array(UpdateWebhookEvents$inboundSchema).optional(),
        name: z.string().optional(),
        "signing-secret": z.string().optional(),
        url: z.string().optional(),
        "verify-tls": z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "signing-secret": "signingSecret",
            "verify-tls": "verifyTls",
        });
    });

/** @internal */
export type UpdateWebhookRequestBody$Outbound = {
    events?: Array<string> | undefined;
    name?: string | undefined;
    "signing-secret"?: string | undefined;
    url?: string | undefined;
    "verify-tls"?: boolean | undefined;
};

/** @internal */
export const UpdateWebhookRequestBody$outboundSchema: z.ZodType<
    UpdateWebhookRequestBody$Outbound,
    z.ZodTypeDef,
    UpdateWebhookRequestBody
> = z
    .object({
        events: z.array(UpdateWebhookEvents$outboundSchema).optional(),
        name: z.string().optional(),
        signingSecret: z.string().optional(),
        url: z.string().optional(),
        verifyTls: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            signingSecret: "signing-secret",
            verifyTls: "verify-tls",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequestBody$ {
    /** @deprecated use `UpdateWebhookRequestBody$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookRequestBody$inboundSchema;
    /** @deprecated use `UpdateWebhookRequestBody$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookRequestBody$outboundSchema;
    /** @deprecated use `UpdateWebhookRequestBody$Outbound` instead. */
    export type Outbound = UpdateWebhookRequestBody$Outbound;
}

/** @internal */
export const UpdateWebhookRequest$inboundSchema: z.ZodType<
    UpdateWebhookRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => UpdateWebhookRequestBody$inboundSchema).optional(),
        "webhook-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            "webhook-id": "webhookId",
        });
    });

/** @internal */
export type UpdateWebhookRequest$Outbound = {
    RequestBody?: UpdateWebhookRequestBody$Outbound | undefined;
    "webhook-id": string;
};

/** @internal */
export const UpdateWebhookRequest$outboundSchema: z.ZodType<
    UpdateWebhookRequest$Outbound,
    z.ZodTypeDef,
    UpdateWebhookRequest
> = z
    .object({
        requestBody: z.lazy(() => UpdateWebhookRequestBody$outboundSchema).optional(),
        webhookId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            webhookId: "webhook-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookRequest$ {
    /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookRequest$inboundSchema;
    /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookRequest$outboundSchema;
    /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
    export type Outbound = UpdateWebhookRequest$Outbound;
}

/** @internal */
export const UpdateWebhookResponseBody$inboundSchema: z.ZodType<
    UpdateWebhookResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type UpdateWebhookResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const UpdateWebhookResponseBody$outboundSchema: z.ZodType<
    UpdateWebhookResponseBody$Outbound,
    z.ZodTypeDef,
    UpdateWebhookResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookResponseBody$ {
    /** @deprecated use `UpdateWebhookResponseBody$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookResponseBody$inboundSchema;
    /** @deprecated use `UpdateWebhookResponseBody$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookResponseBody$outboundSchema;
    /** @deprecated use `UpdateWebhookResponseBody$Outbound` instead. */
    export type Outbound = UpdateWebhookResponseBody$Outbound;
}

/** @internal */
export const UpdateWebhookWebhookEvents$inboundSchema: z.ZodNativeEnum<
    typeof UpdateWebhookWebhookEvents
> = z.nativeEnum(UpdateWebhookWebhookEvents);

/** @internal */
export const UpdateWebhookWebhookEvents$outboundSchema: z.ZodNativeEnum<
    typeof UpdateWebhookWebhookEvents
> = UpdateWebhookWebhookEvents$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookWebhookEvents$ {
    /** @deprecated use `UpdateWebhookWebhookEvents$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookWebhookEvents$inboundSchema;
    /** @deprecated use `UpdateWebhookWebhookEvents$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookWebhookEvents$outboundSchema;
}

/** @internal */
export const UpdateWebhookScope$inboundSchema: z.ZodType<
    UpdateWebhookScope,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    type: z.string(),
});

/** @internal */
export type UpdateWebhookScope$Outbound = {
    id: string;
    type: string;
};

/** @internal */
export const UpdateWebhookScope$outboundSchema: z.ZodType<
    UpdateWebhookScope$Outbound,
    z.ZodTypeDef,
    UpdateWebhookScope
> = z.object({
    id: z.string(),
    type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookScope$ {
    /** @deprecated use `UpdateWebhookScope$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookScope$inboundSchema;
    /** @deprecated use `UpdateWebhookScope$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookScope$outboundSchema;
    /** @deprecated use `UpdateWebhookScope$Outbound` instead. */
    export type Outbound = UpdateWebhookScope$Outbound;
}

/** @internal */
export const UpdateWebhookWebhook$inboundSchema: z.ZodType<
    UpdateWebhookWebhook,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        events: z.array(UpdateWebhookWebhookEvents$inboundSchema),
        id: z.string(),
        name: z.string(),
        scope: z.lazy(() => UpdateWebhookScope$inboundSchema),
        "signing-secret": z.string(),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        url: z.string(),
        "verify-tls": z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "signing-secret": "signingSecret",
            "updated-at": "updatedAt",
            "verify-tls": "verifyTls",
        });
    });

/** @internal */
export type UpdateWebhookWebhook$Outbound = {
    "created-at": string;
    events: Array<string>;
    id: string;
    name: string;
    scope: UpdateWebhookScope$Outbound;
    "signing-secret": string;
    "updated-at": string;
    url: string;
    "verify-tls": boolean;
};

/** @internal */
export const UpdateWebhookWebhook$outboundSchema: z.ZodType<
    UpdateWebhookWebhook$Outbound,
    z.ZodTypeDef,
    UpdateWebhookWebhook
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        events: z.array(UpdateWebhookWebhookEvents$outboundSchema),
        id: z.string(),
        name: z.string(),
        scope: z.lazy(() => UpdateWebhookScope$outboundSchema),
        signingSecret: z.string(),
        updatedAt: z.date().transform((v) => v.toISOString()),
        url: z.string(),
        verifyTls: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            signingSecret: "signing-secret",
            updatedAt: "updated-at",
            verifyTls: "verify-tls",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookWebhook$ {
    /** @deprecated use `UpdateWebhookWebhook$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookWebhook$inboundSchema;
    /** @deprecated use `UpdateWebhookWebhook$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookWebhook$outboundSchema;
    /** @deprecated use `UpdateWebhookWebhook$Outbound` instead. */
    export type Outbound = UpdateWebhookWebhook$Outbound;
}

/** @internal */
export const UpdateWebhookResponse$inboundSchema: z.ZodType<
    UpdateWebhookResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => UpdateWebhookResponseBody$inboundSchema),
    z.lazy(() => UpdateWebhookWebhook$inboundSchema),
]);

/** @internal */
export type UpdateWebhookResponse$Outbound =
    | UpdateWebhookResponseBody$Outbound
    | UpdateWebhookWebhook$Outbound;

/** @internal */
export const UpdateWebhookResponse$outboundSchema: z.ZodType<
    UpdateWebhookResponse$Outbound,
    z.ZodTypeDef,
    UpdateWebhookResponse
> = z.union([
    z.lazy(() => UpdateWebhookResponseBody$outboundSchema),
    z.lazy(() => UpdateWebhookWebhook$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookResponse$ {
    /** @deprecated use `UpdateWebhookResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateWebhookResponse$inboundSchema;
    /** @deprecated use `UpdateWebhookResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateWebhookResponse$outboundSchema;
    /** @deprecated use `UpdateWebhookResponse$Outbound` instead. */
    export type Outbound = UpdateWebhookResponse$Outbound;
}
