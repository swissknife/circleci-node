/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type ListWorkflowJobsRequest = {
    /**
     * The unique ID of the workflow.
     */
    id: string;
};

/**
 * Error response.
 */
export type ListWorkflowJobsResponseBody = {
    message?: string | undefined;
};

/**
 * The current status of the job.
 */
export const ListWorkflowJobsStatus = {
    Success: "success",
    Running: "running",
    NotRun: "not_run",
    Failed: "failed",
    Retried: "retried",
    Queued: "queued",
    NotRunning: "not_running",
    InfrastructureFail: "infrastructure_fail",
    Timedout: "timedout",
    OnHold: "on_hold",
    TerminatedUnknown: "terminated-unknown",
    Blocked: "blocked",
    Canceled: "canceled",
    Unauthorized: "unauthorized",
} as const;
/**
 * The current status of the job.
 */
export type ListWorkflowJobsStatus = ClosedEnum<typeof ListWorkflowJobsStatus>;

/**
 * The type of job.
 */
export const ListWorkflowJobsType = {
    Build: "build",
    Approval: "approval",
} as const;
/**
 * The type of job.
 */
export type ListWorkflowJobsType = ClosedEnum<typeof ListWorkflowJobsType>;

/**
 * Job
 */
export type Job = {
    /**
     * The unique ID of the job.
     */
    approvalRequestId?: string | undefined;
    /**
     * The unique ID of the user.
     */
    approvedBy?: string | undefined;
    /**
     * The unique ID of the user.
     */
    canceledBy?: string | undefined;
    /**
     * A sequence of the unique job IDs for the jobs that this job depends upon in the workflow.
     */
    dependencies: Array<string>;
    /**
     * The unique ID of the job.
     */
    id: string;
    /**
     * The number of the job.
     */
    jobNumber?: number | undefined;
    /**
     * The name of the job.
     */
    name: string;
    /**
     * The project-slug for the job.
     */
    projectSlug: string;
    /**
     * The date and time the job started.
     */
    startedAt: Date;
    /**
     * The current status of the job.
     */
    status: ListWorkflowJobsStatus;
    /**
     * The time when the job stopped.
     */
    stoppedAt?: Date | undefined;
    /**
     * The type of job.
     */
    type: ListWorkflowJobsType;
};

/**
 * A paginated sequence of jobs.
 */
export type ListWorkflowJobsWorkflowJobListResponse = {
    items: Array<Job>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListWorkflowJobsResponse =
    | ListWorkflowJobsResponseBody
    | ListWorkflowJobsWorkflowJobListResponse;

/** @internal */
export const ListWorkflowJobsRequest$inboundSchema: z.ZodType<
    ListWorkflowJobsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
});

/** @internal */
export type ListWorkflowJobsRequest$Outbound = {
    id: string;
};

/** @internal */
export const ListWorkflowJobsRequest$outboundSchema: z.ZodType<
    ListWorkflowJobsRequest$Outbound,
    z.ZodTypeDef,
    ListWorkflowJobsRequest
> = z.object({
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowJobsRequest$ {
    /** @deprecated use `ListWorkflowJobsRequest$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowJobsRequest$inboundSchema;
    /** @deprecated use `ListWorkflowJobsRequest$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowJobsRequest$outboundSchema;
    /** @deprecated use `ListWorkflowJobsRequest$Outbound` instead. */
    export type Outbound = ListWorkflowJobsRequest$Outbound;
}

/** @internal */
export const ListWorkflowJobsResponseBody$inboundSchema: z.ZodType<
    ListWorkflowJobsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListWorkflowJobsResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListWorkflowJobsResponseBody$outboundSchema: z.ZodType<
    ListWorkflowJobsResponseBody$Outbound,
    z.ZodTypeDef,
    ListWorkflowJobsResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowJobsResponseBody$ {
    /** @deprecated use `ListWorkflowJobsResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowJobsResponseBody$inboundSchema;
    /** @deprecated use `ListWorkflowJobsResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowJobsResponseBody$outboundSchema;
    /** @deprecated use `ListWorkflowJobsResponseBody$Outbound` instead. */
    export type Outbound = ListWorkflowJobsResponseBody$Outbound;
}

/** @internal */
export const ListWorkflowJobsStatus$inboundSchema: z.ZodNativeEnum<typeof ListWorkflowJobsStatus> =
    z.nativeEnum(ListWorkflowJobsStatus);

/** @internal */
export const ListWorkflowJobsStatus$outboundSchema: z.ZodNativeEnum<typeof ListWorkflowJobsStatus> =
    ListWorkflowJobsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowJobsStatus$ {
    /** @deprecated use `ListWorkflowJobsStatus$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowJobsStatus$inboundSchema;
    /** @deprecated use `ListWorkflowJobsStatus$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowJobsStatus$outboundSchema;
}

/** @internal */
export const ListWorkflowJobsType$inboundSchema: z.ZodNativeEnum<typeof ListWorkflowJobsType> =
    z.nativeEnum(ListWorkflowJobsType);

/** @internal */
export const ListWorkflowJobsType$outboundSchema: z.ZodNativeEnum<typeof ListWorkflowJobsType> =
    ListWorkflowJobsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowJobsType$ {
    /** @deprecated use `ListWorkflowJobsType$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowJobsType$inboundSchema;
    /** @deprecated use `ListWorkflowJobsType$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowJobsType$outboundSchema;
}

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
    .object({
        approval_request_id: z.string().optional(),
        approved_by: z.string().optional(),
        canceled_by: z.string().optional(),
        dependencies: z.array(z.string()),
        id: z.string(),
        job_number: z.number().int().optional(),
        name: z.string(),
        project_slug: z.string(),
        started_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        status: ListWorkflowJobsStatus$inboundSchema,
        stopped_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        type: ListWorkflowJobsType$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            approval_request_id: "approvalRequestId",
            approved_by: "approvedBy",
            canceled_by: "canceledBy",
            job_number: "jobNumber",
            project_slug: "projectSlug",
            started_at: "startedAt",
            stopped_at: "stoppedAt",
        });
    });

/** @internal */
export type Job$Outbound = {
    approval_request_id?: string | undefined;
    approved_by?: string | undefined;
    canceled_by?: string | undefined;
    dependencies: Array<string>;
    id: string;
    job_number?: number | undefined;
    name: string;
    project_slug: string;
    started_at: string;
    status: string;
    stopped_at?: string | undefined;
    type: string;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
    .object({
        approvalRequestId: z.string().optional(),
        approvedBy: z.string().optional(),
        canceledBy: z.string().optional(),
        dependencies: z.array(z.string()),
        id: z.string(),
        jobNumber: z.number().int().optional(),
        name: z.string(),
        projectSlug: z.string(),
        startedAt: z.date().transform((v) => v.toISOString()),
        status: ListWorkflowJobsStatus$outboundSchema,
        stoppedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        type: ListWorkflowJobsType$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            approvalRequestId: "approval_request_id",
            approvedBy: "approved_by",
            canceledBy: "canceled_by",
            jobNumber: "job_number",
            projectSlug: "project_slug",
            startedAt: "started_at",
            stoppedAt: "stopped_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
    /** @deprecated use `Job$inboundSchema` instead. */
    export const inboundSchema = Job$inboundSchema;
    /** @deprecated use `Job$outboundSchema` instead. */
    export const outboundSchema = Job$outboundSchema;
    /** @deprecated use `Job$Outbound` instead. */
    export type Outbound = Job$Outbound;
}

/** @internal */
export const ListWorkflowJobsWorkflowJobListResponse$inboundSchema: z.ZodType<
    ListWorkflowJobsWorkflowJobListResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Job$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListWorkflowJobsWorkflowJobListResponse$Outbound = {
    items: Array<Job$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListWorkflowJobsWorkflowJobListResponse$outboundSchema: z.ZodType<
    ListWorkflowJobsWorkflowJobListResponse$Outbound,
    z.ZodTypeDef,
    ListWorkflowJobsWorkflowJobListResponse
> = z
    .object({
        items: z.array(z.lazy(() => Job$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowJobsWorkflowJobListResponse$ {
    /** @deprecated use `ListWorkflowJobsWorkflowJobListResponse$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowJobsWorkflowJobListResponse$inboundSchema;
    /** @deprecated use `ListWorkflowJobsWorkflowJobListResponse$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowJobsWorkflowJobListResponse$outboundSchema;
    /** @deprecated use `ListWorkflowJobsWorkflowJobListResponse$Outbound` instead. */
    export type Outbound = ListWorkflowJobsWorkflowJobListResponse$Outbound;
}

/** @internal */
export const ListWorkflowJobsResponse$inboundSchema: z.ZodType<
    ListWorkflowJobsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListWorkflowJobsResponseBody$inboundSchema),
    z.lazy(() => ListWorkflowJobsWorkflowJobListResponse$inboundSchema),
]);

/** @internal */
export type ListWorkflowJobsResponse$Outbound =
    | ListWorkflowJobsResponseBody$Outbound
    | ListWorkflowJobsWorkflowJobListResponse$Outbound;

/** @internal */
export const ListWorkflowJobsResponse$outboundSchema: z.ZodType<
    ListWorkflowJobsResponse$Outbound,
    z.ZodTypeDef,
    ListWorkflowJobsResponse
> = z.union([
    z.lazy(() => ListWorkflowJobsResponseBody$outboundSchema),
    z.lazy(() => ListWorkflowJobsWorkflowJobListResponse$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWorkflowJobsResponse$ {
    /** @deprecated use `ListWorkflowJobsResponse$inboundSchema` instead. */
    export const inboundSchema = ListWorkflowJobsResponse$inboundSchema;
    /** @deprecated use `ListWorkflowJobsResponse$outboundSchema` instead. */
    export const outboundSchema = ListWorkflowJobsResponse$outboundSchema;
    /** @deprecated use `ListWorkflowJobsResponse$Outbound` instead. */
    export type Outbound = ListWorkflowJobsResponse$Outbound;
}
