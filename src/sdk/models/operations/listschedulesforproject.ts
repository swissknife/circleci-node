/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type ListSchedulesForProjectRequest = {
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type ListSchedulesForProjectScheduleResponseBody = {
    message?: string | undefined;
};

/**
 * The attribution actor who will run the scheduled pipeline.
 */
export type ListSchedulesForProjectUser = {
    /**
     * The unique ID of the user.
     */
    id: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
    /**
     * The name of the user.
     */
    name: string;
};

export type ListSchedulesForProjectParameters = number | string | boolean;

/**
 * Day in a week, in three letters format
 */
export const ListSchedulesForProjectScheduleDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type ListSchedulesForProjectScheduleDaysOfWeek = ClosedEnum<
    typeof ListSchedulesForProjectScheduleDaysOfWeek
>;

/**
 * Month, in three letters format.
 */
export const ListSchedulesForProjectScheduleMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type ListSchedulesForProjectScheduleMonths = ClosedEnum<
    typeof ListSchedulesForProjectScheduleMonths
>;

export type ListSchedulesForProject2 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth: Array<number>;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek?: Array<ListSchedulesForProjectScheduleDaysOfWeek> | undefined;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<ListSchedulesForProjectScheduleMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Day in a week, in three letters format
 */
export const ListSchedulesForProjectDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type ListSchedulesForProjectDaysOfWeek = ClosedEnum<
    typeof ListSchedulesForProjectDaysOfWeek
>;

/**
 * Month, in three letters format.
 */
export const ListSchedulesForProjectMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type ListSchedulesForProjectMonths = ClosedEnum<typeof ListSchedulesForProjectMonths>;

export type ListSchedulesForProject1 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth?: Array<number> | undefined;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek: Array<ListSchedulesForProjectDaysOfWeek>;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<ListSchedulesForProjectMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Timetable that specifies when a schedule triggers.
 */
export type ListSchedulesForProjectTimetable = ListSchedulesForProject1 | ListSchedulesForProject2;

/**
 * A schedule response
 */
export type Schedule = {
    /**
     * The attribution actor who will run the scheduled pipeline.
     */
    actor: ListSchedulesForProjectUser;
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * Description of the schedule.
     */
    description: string;
    /**
     * The unique ID of the schedule.
     */
    id: string;
    /**
     * Name of the schedule.
     */
    name: string;
    /**
     * Pipeline parameters represented as key-value pairs. Must contain branch or tag.
     */
    parameters: { [k: string]: number | string | boolean };
    /**
     * The project-slug for the schedule
     */
    projectSlug: string;
    /**
     * Timetable that specifies when a schedule triggers.
     */
    timetable: ListSchedulesForProject1 | ListSchedulesForProject2;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt: Date;
};

/**
 * A sequence of schedules
 */
export type ListSchedulesForProjectResponseBody = {
    items: Array<Schedule>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListSchedulesForProjectResponse =
    | ListSchedulesForProjectScheduleResponseBody
    | ListSchedulesForProjectResponseBody;

/** @internal */
export const ListSchedulesForProjectRequest$inboundSchema: z.ZodType<
    ListSchedulesForProjectRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "page-token": z.string().optional(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "page-token": "pageToken",
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type ListSchedulesForProjectRequest$Outbound = {
    "page-token"?: string | undefined;
    "project-slug": string;
};

/** @internal */
export const ListSchedulesForProjectRequest$outboundSchema: z.ZodType<
    ListSchedulesForProjectRequest$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectRequest
> = z
    .object({
        pageToken: z.string().optional(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            pageToken: "page-token",
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectRequest$ {
    /** @deprecated use `ListSchedulesForProjectRequest$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectRequest$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectRequest$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectRequest$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectRequest$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectRequest$Outbound;
}

/** @internal */
export const ListSchedulesForProjectScheduleResponseBody$inboundSchema: z.ZodType<
    ListSchedulesForProjectScheduleResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListSchedulesForProjectScheduleResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListSchedulesForProjectScheduleResponseBody$outboundSchema: z.ZodType<
    ListSchedulesForProjectScheduleResponseBody$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectScheduleResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectScheduleResponseBody$ {
    /** @deprecated use `ListSchedulesForProjectScheduleResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectScheduleResponseBody$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectScheduleResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectScheduleResponseBody$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectScheduleResponseBody$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectScheduleResponseBody$Outbound;
}

/** @internal */
export const ListSchedulesForProjectUser$inboundSchema: z.ZodType<
    ListSchedulesForProjectUser,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/** @internal */
export type ListSchedulesForProjectUser$Outbound = {
    id: string;
    login: string;
    name: string;
};

/** @internal */
export const ListSchedulesForProjectUser$outboundSchema: z.ZodType<
    ListSchedulesForProjectUser$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectUser
> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectUser$ {
    /** @deprecated use `ListSchedulesForProjectUser$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectUser$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectUser$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectUser$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectUser$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectUser$Outbound;
}

/** @internal */
export const ListSchedulesForProjectParameters$inboundSchema: z.ZodType<
    ListSchedulesForProjectParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type ListSchedulesForProjectParameters$Outbound = number | string | boolean;

/** @internal */
export const ListSchedulesForProjectParameters$outboundSchema: z.ZodType<
    ListSchedulesForProjectParameters$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectParameters$ {
    /** @deprecated use `ListSchedulesForProjectParameters$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectParameters$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectParameters$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectParameters$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectParameters$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectParameters$Outbound;
}

/** @internal */
export const ListSchedulesForProjectScheduleDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectScheduleDaysOfWeek
> = z.nativeEnum(ListSchedulesForProjectScheduleDaysOfWeek);

/** @internal */
export const ListSchedulesForProjectScheduleDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectScheduleDaysOfWeek
> = ListSchedulesForProjectScheduleDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectScheduleDaysOfWeek$ {
    /** @deprecated use `ListSchedulesForProjectScheduleDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectScheduleDaysOfWeek$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectScheduleDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectScheduleDaysOfWeek$outboundSchema;
}

/** @internal */
export const ListSchedulesForProjectScheduleMonths$inboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectScheduleMonths
> = z.nativeEnum(ListSchedulesForProjectScheduleMonths);

/** @internal */
export const ListSchedulesForProjectScheduleMonths$outboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectScheduleMonths
> = ListSchedulesForProjectScheduleMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectScheduleMonths$ {
    /** @deprecated use `ListSchedulesForProjectScheduleMonths$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectScheduleMonths$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectScheduleMonths$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectScheduleMonths$outboundSchema;
}

/** @internal */
export const ListSchedulesForProject2$inboundSchema: z.ZodType<
    ListSchedulesForProject2,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "days-of-month": z.array(z.number().int()),
        "days-of-week": z.array(ListSchedulesForProjectScheduleDaysOfWeek$inboundSchema).optional(),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(ListSchedulesForProjectScheduleMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type ListSchedulesForProject2$Outbound = {
    "days-of-month": Array<number>;
    "days-of-week"?: Array<string> | undefined;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const ListSchedulesForProject2$outboundSchema: z.ZodType<
    ListSchedulesForProject2$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProject2
> = z
    .object({
        daysOfMonth: z.array(z.number().int()),
        daysOfWeek: z.array(ListSchedulesForProjectScheduleDaysOfWeek$outboundSchema).optional(),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(ListSchedulesForProjectScheduleMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProject2$ {
    /** @deprecated use `ListSchedulesForProject2$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProject2$inboundSchema;
    /** @deprecated use `ListSchedulesForProject2$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProject2$outboundSchema;
    /** @deprecated use `ListSchedulesForProject2$Outbound` instead. */
    export type Outbound = ListSchedulesForProject2$Outbound;
}

/** @internal */
export const ListSchedulesForProjectDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectDaysOfWeek
> = z.nativeEnum(ListSchedulesForProjectDaysOfWeek);

/** @internal */
export const ListSchedulesForProjectDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectDaysOfWeek
> = ListSchedulesForProjectDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectDaysOfWeek$ {
    /** @deprecated use `ListSchedulesForProjectDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectDaysOfWeek$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectDaysOfWeek$outboundSchema;
}

/** @internal */
export const ListSchedulesForProjectMonths$inboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectMonths
> = z.nativeEnum(ListSchedulesForProjectMonths);

/** @internal */
export const ListSchedulesForProjectMonths$outboundSchema: z.ZodNativeEnum<
    typeof ListSchedulesForProjectMonths
> = ListSchedulesForProjectMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectMonths$ {
    /** @deprecated use `ListSchedulesForProjectMonths$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectMonths$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectMonths$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectMonths$outboundSchema;
}

/** @internal */
export const ListSchedulesForProject1$inboundSchema: z.ZodType<
    ListSchedulesForProject1,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "days-of-month": z.array(z.number().int()).optional(),
        "days-of-week": z.array(ListSchedulesForProjectDaysOfWeek$inboundSchema),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(ListSchedulesForProjectMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type ListSchedulesForProject1$Outbound = {
    "days-of-month"?: Array<number> | undefined;
    "days-of-week": Array<string>;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const ListSchedulesForProject1$outboundSchema: z.ZodType<
    ListSchedulesForProject1$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProject1
> = z
    .object({
        daysOfMonth: z.array(z.number().int()).optional(),
        daysOfWeek: z.array(ListSchedulesForProjectDaysOfWeek$outboundSchema),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(ListSchedulesForProjectMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProject1$ {
    /** @deprecated use `ListSchedulesForProject1$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProject1$inboundSchema;
    /** @deprecated use `ListSchedulesForProject1$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProject1$outboundSchema;
    /** @deprecated use `ListSchedulesForProject1$Outbound` instead. */
    export type Outbound = ListSchedulesForProject1$Outbound;
}

/** @internal */
export const ListSchedulesForProjectTimetable$inboundSchema: z.ZodType<
    ListSchedulesForProjectTimetable,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListSchedulesForProject1$inboundSchema),
    z.lazy(() => ListSchedulesForProject2$inboundSchema),
]);

/** @internal */
export type ListSchedulesForProjectTimetable$Outbound =
    | ListSchedulesForProject1$Outbound
    | ListSchedulesForProject2$Outbound;

/** @internal */
export const ListSchedulesForProjectTimetable$outboundSchema: z.ZodType<
    ListSchedulesForProjectTimetable$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectTimetable
> = z.union([
    z.lazy(() => ListSchedulesForProject1$outboundSchema),
    z.lazy(() => ListSchedulesForProject2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectTimetable$ {
    /** @deprecated use `ListSchedulesForProjectTimetable$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectTimetable$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectTimetable$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectTimetable$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectTimetable$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectTimetable$Outbound;
}

/** @internal */
export const Schedule$inboundSchema: z.ZodType<Schedule, z.ZodTypeDef, unknown> = z
    .object({
        actor: z.lazy(() => ListSchedulesForProjectUser$inboundSchema),
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        "project-slug": z.string(),
        timetable: z.union([
            z.lazy(() => ListSchedulesForProject1$inboundSchema),
            z.lazy(() => ListSchedulesForProject2$inboundSchema),
        ]),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "project-slug": "projectSlug",
            "updated-at": "updatedAt",
        });
    });

/** @internal */
export type Schedule$Outbound = {
    actor: ListSchedulesForProjectUser$Outbound;
    "created-at": string;
    description: string;
    id: string;
    name: string;
    parameters: { [k: string]: number | string | boolean };
    "project-slug": string;
    timetable: ListSchedulesForProject1$Outbound | ListSchedulesForProject2$Outbound;
    "updated-at": string;
};

/** @internal */
export const Schedule$outboundSchema: z.ZodType<Schedule$Outbound, z.ZodTypeDef, Schedule> = z
    .object({
        actor: z.lazy(() => ListSchedulesForProjectUser$outboundSchema),
        createdAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        projectSlug: z.string(),
        timetable: z.union([
            z.lazy(() => ListSchedulesForProject1$outboundSchema),
            z.lazy(() => ListSchedulesForProject2$outboundSchema),
        ]),
        updatedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            projectSlug: "project-slug",
            updatedAt: "updated-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schedule$ {
    /** @deprecated use `Schedule$inboundSchema` instead. */
    export const inboundSchema = Schedule$inboundSchema;
    /** @deprecated use `Schedule$outboundSchema` instead. */
    export const outboundSchema = Schedule$outboundSchema;
    /** @deprecated use `Schedule$Outbound` instead. */
    export type Outbound = Schedule$Outbound;
}

/** @internal */
export const ListSchedulesForProjectResponseBody$inboundSchema: z.ZodType<
    ListSchedulesForProjectResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Schedule$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListSchedulesForProjectResponseBody$Outbound = {
    items: Array<Schedule$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListSchedulesForProjectResponseBody$outboundSchema: z.ZodType<
    ListSchedulesForProjectResponseBody$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => Schedule$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectResponseBody$ {
    /** @deprecated use `ListSchedulesForProjectResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectResponseBody$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectResponseBody$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectResponseBody$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectResponseBody$Outbound;
}

/** @internal */
export const ListSchedulesForProjectResponse$inboundSchema: z.ZodType<
    ListSchedulesForProjectResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListSchedulesForProjectScheduleResponseBody$inboundSchema),
    z.lazy(() => ListSchedulesForProjectResponseBody$inboundSchema),
]);

/** @internal */
export type ListSchedulesForProjectResponse$Outbound =
    | ListSchedulesForProjectScheduleResponseBody$Outbound
    | ListSchedulesForProjectResponseBody$Outbound;

/** @internal */
export const ListSchedulesForProjectResponse$outboundSchema: z.ZodType<
    ListSchedulesForProjectResponse$Outbound,
    z.ZodTypeDef,
    ListSchedulesForProjectResponse
> = z.union([
    z.lazy(() => ListSchedulesForProjectScheduleResponseBody$outboundSchema),
    z.lazy(() => ListSchedulesForProjectResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSchedulesForProjectResponse$ {
    /** @deprecated use `ListSchedulesForProjectResponse$inboundSchema` instead. */
    export const inboundSchema = ListSchedulesForProjectResponse$inboundSchema;
    /** @deprecated use `ListSchedulesForProjectResponse$outboundSchema` instead. */
    export const outboundSchema = ListSchedulesForProjectResponse$outboundSchema;
    /** @deprecated use `ListSchedulesForProjectResponse$Outbound` instead. */
    export type Outbound = ListSchedulesForProjectResponse$Outbound;
}
