/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type AddEnvironmentVariableToContextRequestBody = {
    /**
     * The value of the environment variable
     */
    value: string;
};

export type AddEnvironmentVariableToContextRequest = {
    requestBody?: AddEnvironmentVariableToContextRequestBody | undefined;
    /**
     * ID of the context (UUID)
     */
    contextId: string;
    /**
     * The name of the environment variable
     */
    envVarName: string;
};

/**
 * Error response.
 */
export type AddEnvironmentVariableToContextContextResponseBody = {
    message?: string | undefined;
};

/**
 * message response
 */
export type MessageResponse = {
    /**
     * A human-readable message
     */
    message: string;
};

export type AddEnvironmentVariableToContext1 = {
    /**
     * ID of the context (UUID)
     */
    contextId: string;
    /**
     * The date and time the environment variable was created.
     */
    createdAt: Date;
    /**
     * The date and time the environment variable was updated
     */
    updatedAt: Date;
    /**
     * The name of the environment variable
     */
    variable: string;
};

/**
 * The new environment variable
 */
export type AddEnvironmentVariableToContextResponseBody =
    | MessageResponse
    | AddEnvironmentVariableToContext1;

export type AddEnvironmentVariableToContextResponse =
    | AddEnvironmentVariableToContextContextResponseBody
    | MessageResponse
    | AddEnvironmentVariableToContext1;

/** @internal */
export const AddEnvironmentVariableToContextRequestBody$inboundSchema: z.ZodType<
    AddEnvironmentVariableToContextRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    value: z.string(),
});

/** @internal */
export type AddEnvironmentVariableToContextRequestBody$Outbound = {
    value: string;
};

/** @internal */
export const AddEnvironmentVariableToContextRequestBody$outboundSchema: z.ZodType<
    AddEnvironmentVariableToContextRequestBody$Outbound,
    z.ZodTypeDef,
    AddEnvironmentVariableToContextRequestBody
> = z.object({
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEnvironmentVariableToContextRequestBody$ {
    /** @deprecated use `AddEnvironmentVariableToContextRequestBody$inboundSchema` instead. */
    export const inboundSchema = AddEnvironmentVariableToContextRequestBody$inboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextRequestBody$outboundSchema` instead. */
    export const outboundSchema = AddEnvironmentVariableToContextRequestBody$outboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextRequestBody$Outbound` instead. */
    export type Outbound = AddEnvironmentVariableToContextRequestBody$Outbound;
}

/** @internal */
export const AddEnvironmentVariableToContextRequest$inboundSchema: z.ZodType<
    AddEnvironmentVariableToContextRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z
            .lazy(() => AddEnvironmentVariableToContextRequestBody$inboundSchema)
            .optional(),
        "context-id": z.string(),
        "env-var-name": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            "context-id": "contextId",
            "env-var-name": "envVarName",
        });
    });

/** @internal */
export type AddEnvironmentVariableToContextRequest$Outbound = {
    RequestBody?: AddEnvironmentVariableToContextRequestBody$Outbound | undefined;
    "context-id": string;
    "env-var-name": string;
};

/** @internal */
export const AddEnvironmentVariableToContextRequest$outboundSchema: z.ZodType<
    AddEnvironmentVariableToContextRequest$Outbound,
    z.ZodTypeDef,
    AddEnvironmentVariableToContextRequest
> = z
    .object({
        requestBody: z
            .lazy(() => AddEnvironmentVariableToContextRequestBody$outboundSchema)
            .optional(),
        contextId: z.string(),
        envVarName: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            contextId: "context-id",
            envVarName: "env-var-name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEnvironmentVariableToContextRequest$ {
    /** @deprecated use `AddEnvironmentVariableToContextRequest$inboundSchema` instead. */
    export const inboundSchema = AddEnvironmentVariableToContextRequest$inboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextRequest$outboundSchema` instead. */
    export const outboundSchema = AddEnvironmentVariableToContextRequest$outboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextRequest$Outbound` instead. */
    export type Outbound = AddEnvironmentVariableToContextRequest$Outbound;
}

/** @internal */
export const AddEnvironmentVariableToContextContextResponseBody$inboundSchema: z.ZodType<
    AddEnvironmentVariableToContextContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type AddEnvironmentVariableToContextContextResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const AddEnvironmentVariableToContextContextResponseBody$outboundSchema: z.ZodType<
    AddEnvironmentVariableToContextContextResponseBody$Outbound,
    z.ZodTypeDef,
    AddEnvironmentVariableToContextContextResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEnvironmentVariableToContextContextResponseBody$ {
    /** @deprecated use `AddEnvironmentVariableToContextContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddEnvironmentVariableToContextContextResponseBody$inboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddEnvironmentVariableToContextContextResponseBody$outboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextContextResponseBody$Outbound` instead. */
    export type Outbound = AddEnvironmentVariableToContextContextResponseBody$Outbound;
}

/** @internal */
export const MessageResponse$inboundSchema: z.ZodType<MessageResponse, z.ZodTypeDef, unknown> =
    z.object({
        message: z.string(),
    });

/** @internal */
export type MessageResponse$Outbound = {
    message: string;
};

/** @internal */
export const MessageResponse$outboundSchema: z.ZodType<
    MessageResponse$Outbound,
    z.ZodTypeDef,
    MessageResponse
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageResponse$ {
    /** @deprecated use `MessageResponse$inboundSchema` instead. */
    export const inboundSchema = MessageResponse$inboundSchema;
    /** @deprecated use `MessageResponse$outboundSchema` instead. */
    export const outboundSchema = MessageResponse$outboundSchema;
    /** @deprecated use `MessageResponse$Outbound` instead. */
    export type Outbound = MessageResponse$Outbound;
}

/** @internal */
export const AddEnvironmentVariableToContext1$inboundSchema: z.ZodType<
    AddEnvironmentVariableToContext1,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        context_id: z.string(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        variable: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            context_id: "contextId",
            created_at: "createdAt",
            updated_at: "updatedAt",
        });
    });

/** @internal */
export type AddEnvironmentVariableToContext1$Outbound = {
    context_id: string;
    created_at: string;
    updated_at: string;
    variable: string;
};

/** @internal */
export const AddEnvironmentVariableToContext1$outboundSchema: z.ZodType<
    AddEnvironmentVariableToContext1$Outbound,
    z.ZodTypeDef,
    AddEnvironmentVariableToContext1
> = z
    .object({
        contextId: z.string(),
        createdAt: z.date().transform((v) => v.toISOString()),
        updatedAt: z.date().transform((v) => v.toISOString()),
        variable: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            contextId: "context_id",
            createdAt: "created_at",
            updatedAt: "updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEnvironmentVariableToContext1$ {
    /** @deprecated use `AddEnvironmentVariableToContext1$inboundSchema` instead. */
    export const inboundSchema = AddEnvironmentVariableToContext1$inboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContext1$outboundSchema` instead. */
    export const outboundSchema = AddEnvironmentVariableToContext1$outboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContext1$Outbound` instead. */
    export type Outbound = AddEnvironmentVariableToContext1$Outbound;
}

/** @internal */
export const AddEnvironmentVariableToContextResponseBody$inboundSchema: z.ZodType<
    AddEnvironmentVariableToContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => MessageResponse$inboundSchema),
    z.lazy(() => AddEnvironmentVariableToContext1$inboundSchema),
]);

/** @internal */
export type AddEnvironmentVariableToContextResponseBody$Outbound =
    | MessageResponse$Outbound
    | AddEnvironmentVariableToContext1$Outbound;

/** @internal */
export const AddEnvironmentVariableToContextResponseBody$outboundSchema: z.ZodType<
    AddEnvironmentVariableToContextResponseBody$Outbound,
    z.ZodTypeDef,
    AddEnvironmentVariableToContextResponseBody
> = z.union([
    z.lazy(() => MessageResponse$outboundSchema),
    z.lazy(() => AddEnvironmentVariableToContext1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEnvironmentVariableToContextResponseBody$ {
    /** @deprecated use `AddEnvironmentVariableToContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = AddEnvironmentVariableToContextResponseBody$inboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = AddEnvironmentVariableToContextResponseBody$outboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextResponseBody$Outbound` instead. */
    export type Outbound = AddEnvironmentVariableToContextResponseBody$Outbound;
}

/** @internal */
export const AddEnvironmentVariableToContextResponse$inboundSchema: z.ZodType<
    AddEnvironmentVariableToContextResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => AddEnvironmentVariableToContextContextResponseBody$inboundSchema),
    z.union([
        z.lazy(() => MessageResponse$inboundSchema),
        z.lazy(() => AddEnvironmentVariableToContext1$inboundSchema),
    ]),
]);

/** @internal */
export type AddEnvironmentVariableToContextResponse$Outbound =
    | AddEnvironmentVariableToContextContextResponseBody$Outbound
    | MessageResponse$Outbound
    | AddEnvironmentVariableToContext1$Outbound;

/** @internal */
export const AddEnvironmentVariableToContextResponse$outboundSchema: z.ZodType<
    AddEnvironmentVariableToContextResponse$Outbound,
    z.ZodTypeDef,
    AddEnvironmentVariableToContextResponse
> = z.union([
    z.lazy(() => AddEnvironmentVariableToContextContextResponseBody$outboundSchema),
    z.union([
        z.lazy(() => MessageResponse$outboundSchema),
        z.lazy(() => AddEnvironmentVariableToContext1$outboundSchema),
    ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddEnvironmentVariableToContextResponse$ {
    /** @deprecated use `AddEnvironmentVariableToContextResponse$inboundSchema` instead. */
    export const inboundSchema = AddEnvironmentVariableToContextResponse$inboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextResponse$outboundSchema` instead. */
    export const outboundSchema = AddEnvironmentVariableToContextResponse$outboundSchema;
    /** @deprecated use `AddEnvironmentVariableToContextResponse$Outbound` instead. */
    export type Outbound = AddEnvironmentVariableToContextResponse$Outbound;
}
