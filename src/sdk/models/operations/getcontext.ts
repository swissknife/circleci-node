/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type GetContextRequest = {
    /**
     * ID of the context (UUID)
     */
    contextId: string;
};

/**
 * Error response.
 */
export type GetContextResponseBody = {
    message?: string | undefined;
};

/**
 * The context
 */
export type GetContextContext = {
    /**
     * The date and time the context was created.
     */
    createdAt: Date;
    /**
     * The unique ID of the context.
     */
    id: string;
    /**
     * The user defined name of the context.
     */
    name: string;
};

export type GetContextResponse = GetContextResponseBody | GetContextContext;

/** @internal */
export const GetContextRequest$inboundSchema: z.ZodType<GetContextRequest, z.ZodTypeDef, unknown> =
    z
        .object({
            "context-id": z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                "context-id": "contextId",
            });
        });

/** @internal */
export type GetContextRequest$Outbound = {
    "context-id": string;
};

/** @internal */
export const GetContextRequest$outboundSchema: z.ZodType<
    GetContextRequest$Outbound,
    z.ZodTypeDef,
    GetContextRequest
> = z
    .object({
        contextId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            contextId: "context-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContextRequest$ {
    /** @deprecated use `GetContextRequest$inboundSchema` instead. */
    export const inboundSchema = GetContextRequest$inboundSchema;
    /** @deprecated use `GetContextRequest$outboundSchema` instead. */
    export const outboundSchema = GetContextRequest$outboundSchema;
    /** @deprecated use `GetContextRequest$Outbound` instead. */
    export type Outbound = GetContextRequest$Outbound;
}

/** @internal */
export const GetContextResponseBody$inboundSchema: z.ZodType<
    GetContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetContextResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetContextResponseBody$outboundSchema: z.ZodType<
    GetContextResponseBody$Outbound,
    z.ZodTypeDef,
    GetContextResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContextResponseBody$ {
    /** @deprecated use `GetContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetContextResponseBody$inboundSchema;
    /** @deprecated use `GetContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetContextResponseBody$outboundSchema;
    /** @deprecated use `GetContextResponseBody$Outbound` instead. */
    export type Outbound = GetContextResponseBody$Outbound;
}

/** @internal */
export const GetContextContext$inboundSchema: z.ZodType<GetContextContext, z.ZodTypeDef, unknown> =
    z
        .object({
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            id: z.string(),
            name: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                created_at: "createdAt",
            });
        });

/** @internal */
export type GetContextContext$Outbound = {
    created_at: string;
    id: string;
    name: string;
};

/** @internal */
export const GetContextContext$outboundSchema: z.ZodType<
    GetContextContext$Outbound,
    z.ZodTypeDef,
    GetContextContext
> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContextContext$ {
    /** @deprecated use `GetContextContext$inboundSchema` instead. */
    export const inboundSchema = GetContextContext$inboundSchema;
    /** @deprecated use `GetContextContext$outboundSchema` instead. */
    export const outboundSchema = GetContextContext$outboundSchema;
    /** @deprecated use `GetContextContext$Outbound` instead. */
    export type Outbound = GetContextContext$Outbound;
}

/** @internal */
export const GetContextResponse$inboundSchema: z.ZodType<
    GetContextResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetContextResponseBody$inboundSchema),
    z.lazy(() => GetContextContext$inboundSchema),
]);

/** @internal */
export type GetContextResponse$Outbound =
    | GetContextResponseBody$Outbound
    | GetContextContext$Outbound;

/** @internal */
export const GetContextResponse$outboundSchema: z.ZodType<
    GetContextResponse$Outbound,
    z.ZodTypeDef,
    GetContextResponse
> = z.union([
    z.lazy(() => GetContextResponseBody$outboundSchema),
    z.lazy(() => GetContextContext$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContextResponse$ {
    /** @deprecated use `GetContextResponse$inboundSchema` instead. */
    export const inboundSchema = GetContextResponse$inboundSchema;
    /** @deprecated use `GetContextResponse$outboundSchema` instead. */
    export const outboundSchema = GetContextResponse$outboundSchema;
    /** @deprecated use `GetContextResponse$Outbound` instead. */
    export type Outbound = GetContextResponse$Outbound;
}
