/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The attribution-actor of the scheduled pipeline.
 */
export const UpdateScheduleAttributionActor = {
    Current: "current",
    System: "system",
} as const;
/**
 * The attribution-actor of the scheduled pipeline.
 */
export type UpdateScheduleAttributionActor = ClosedEnum<typeof UpdateScheduleAttributionActor>;

export type UpdateScheduleParameters = number | string | boolean;

/**
 * Day in a week, in three letters format
 */
export const UpdateScheduleDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type UpdateScheduleDaysOfWeek = ClosedEnum<typeof UpdateScheduleDaysOfWeek>;

/**
 * Month, in three letters format.
 */
export const UpdateScheduleMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type UpdateScheduleMonths = ClosedEnum<typeof UpdateScheduleMonths>;

/**
 * Timetable that specifies when a schedule triggers.
 */
export type UpdateScheduleTimetable = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth?: Array<number> | undefined;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek?: Array<UpdateScheduleDaysOfWeek> | undefined;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay?: Array<number> | undefined;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<UpdateScheduleMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour?: number | undefined;
};

/**
 * The parameters for an update schedule request
 */
export type UpdateScheduleUpdateScheduleParameters = {
    /**
     * The attribution-actor of the scheduled pipeline.
     */
    attributionActor?: UpdateScheduleAttributionActor | undefined;
    /**
     * Description of the schedule.
     */
    description?: string | undefined;
    /**
     * Name of the schedule.
     */
    name?: string | undefined;
    /**
     * Pipeline parameters represented as key-value pairs. Must contain branch or tag.
     */
    parameters?: { [k: string]: number | string | boolean } | undefined;
    /**
     * Timetable that specifies when a schedule triggers.
     */
    timetable?: UpdateScheduleTimetable | undefined;
};

export type UpdateScheduleRequest = {
    requestBody?: UpdateScheduleUpdateScheduleParameters | undefined;
    /**
     * The unique ID of the schedule.
     */
    scheduleId: string;
};

/**
 * Error response.
 */
export type UpdateScheduleResponseBody = {
    message?: string | undefined;
};

/**
 * The attribution actor who will run the scheduled pipeline.
 */
export type UpdateScheduleUser = {
    /**
     * The unique ID of the user.
     */
    id: string;
    /**
     * The login information for the user on the VCS.
     */
    login: string;
    /**
     * The name of the user.
     */
    name: string;
};

export type UpdateScheduleScheduleParameters = number | string | boolean;

/**
 * Day in a week, in three letters format
 */
export const UpdateScheduleScheduleResponseDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type UpdateScheduleScheduleResponseDaysOfWeek = ClosedEnum<
    typeof UpdateScheduleScheduleResponseDaysOfWeek
>;

/**
 * Month, in three letters format.
 */
export const UpdateScheduleScheduleResponseMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type UpdateScheduleScheduleResponseMonths = ClosedEnum<
    typeof UpdateScheduleScheduleResponseMonths
>;

export type UpdateSchedule2 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth: Array<number>;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek?: Array<UpdateScheduleScheduleResponseDaysOfWeek> | undefined;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<UpdateScheduleScheduleResponseMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Day in a week, in three letters format
 */
export const UpdateScheduleScheduleDaysOfWeek = {
    Tue: "TUE",
    Sat: "SAT",
    Sun: "SUN",
    Mon: "MON",
    Thu: "THU",
    Wed: "WED",
    Fri: "FRI",
} as const;
/**
 * Day in a week, in three letters format
 */
export type UpdateScheduleScheduleDaysOfWeek = ClosedEnum<typeof UpdateScheduleScheduleDaysOfWeek>;

/**
 * Month, in three letters format.
 */
export const UpdateScheduleScheduleMonths = {
    Mar: "MAR",
    Nov: "NOV",
    Dec: "DEC",
    Jun: "JUN",
    May: "MAY",
    Oct: "OCT",
    Feb: "FEB",
    Apr: "APR",
    Sep: "SEP",
    Aug: "AUG",
    Jan: "JAN",
    Jul: "JUL",
} as const;
/**
 * Month, in three letters format.
 */
export type UpdateScheduleScheduleMonths = ClosedEnum<typeof UpdateScheduleScheduleMonths>;

export type UpdateSchedule1 = {
    /**
     * Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
     */
    daysOfMonth?: Array<number> | undefined;
    /**
     * Days in a week in which the schedule triggers.
     */
    daysOfWeek: Array<UpdateScheduleScheduleDaysOfWeek>;
    /**
     * Hours in a day in which the schedule triggers.
     */
    hoursOfDay: Array<number>;
    /**
     * Months in which the schedule triggers.
     */
    months?: Array<UpdateScheduleScheduleMonths> | undefined;
    /**
     * Number of times a schedule triggers per hour, value must be between 1 and 60
     */
    perHour: number;
};

/**
 * Timetable that specifies when a schedule triggers.
 */
export type UpdateScheduleScheduleTimetable = UpdateSchedule1 | UpdateSchedule2;

/**
 * A schedule response
 */
export type UpdateScheduleSchedule = {
    /**
     * The attribution actor who will run the scheduled pipeline.
     */
    actor: UpdateScheduleUser;
    /**
     * The date and time the pipeline was created.
     */
    createdAt: Date;
    /**
     * Description of the schedule.
     */
    description: string;
    /**
     * The unique ID of the schedule.
     */
    id: string;
    /**
     * Name of the schedule.
     */
    name: string;
    /**
     * Pipeline parameters represented as key-value pairs. Must contain branch or tag.
     */
    parameters: { [k: string]: number | string | boolean };
    /**
     * The project-slug for the schedule
     */
    projectSlug: string;
    /**
     * Timetable that specifies when a schedule triggers.
     */
    timetable: UpdateSchedule1 | UpdateSchedule2;
    /**
     * The date and time the pipeline was last updated.
     */
    updatedAt: Date;
};

export type UpdateScheduleResponse = UpdateScheduleResponseBody | UpdateScheduleSchedule;

/** @internal */
export const UpdateScheduleAttributionActor$inboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleAttributionActor
> = z.nativeEnum(UpdateScheduleAttributionActor);

/** @internal */
export const UpdateScheduleAttributionActor$outboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleAttributionActor
> = UpdateScheduleAttributionActor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleAttributionActor$ {
    /** @deprecated use `UpdateScheduleAttributionActor$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleAttributionActor$inboundSchema;
    /** @deprecated use `UpdateScheduleAttributionActor$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleAttributionActor$outboundSchema;
}

/** @internal */
export const UpdateScheduleParameters$inboundSchema: z.ZodType<
    UpdateScheduleParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type UpdateScheduleParameters$Outbound = number | string | boolean;

/** @internal */
export const UpdateScheduleParameters$outboundSchema: z.ZodType<
    UpdateScheduleParameters$Outbound,
    z.ZodTypeDef,
    UpdateScheduleParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleParameters$ {
    /** @deprecated use `UpdateScheduleParameters$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleParameters$inboundSchema;
    /** @deprecated use `UpdateScheduleParameters$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleParameters$outboundSchema;
    /** @deprecated use `UpdateScheduleParameters$Outbound` instead. */
    export type Outbound = UpdateScheduleParameters$Outbound;
}

/** @internal */
export const UpdateScheduleDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleDaysOfWeek
> = z.nativeEnum(UpdateScheduleDaysOfWeek);

/** @internal */
export const UpdateScheduleDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleDaysOfWeek
> = UpdateScheduleDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleDaysOfWeek$ {
    /** @deprecated use `UpdateScheduleDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleDaysOfWeek$inboundSchema;
    /** @deprecated use `UpdateScheduleDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleDaysOfWeek$outboundSchema;
}

/** @internal */
export const UpdateScheduleMonths$inboundSchema: z.ZodNativeEnum<typeof UpdateScheduleMonths> =
    z.nativeEnum(UpdateScheduleMonths);

/** @internal */
export const UpdateScheduleMonths$outboundSchema: z.ZodNativeEnum<typeof UpdateScheduleMonths> =
    UpdateScheduleMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleMonths$ {
    /** @deprecated use `UpdateScheduleMonths$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleMonths$inboundSchema;
    /** @deprecated use `UpdateScheduleMonths$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleMonths$outboundSchema;
}

/** @internal */
export const UpdateScheduleTimetable$inboundSchema: z.ZodType<
    UpdateScheduleTimetable,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "days-of-month": z.array(z.number().int()).optional(),
        "days-of-week": z.array(UpdateScheduleDaysOfWeek$inboundSchema).optional(),
        "hours-of-day": z.array(z.number().int()).optional(),
        months: z.array(UpdateScheduleMonths$inboundSchema).optional(),
        "per-hour": z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type UpdateScheduleTimetable$Outbound = {
    "days-of-month"?: Array<number> | undefined;
    "days-of-week"?: Array<string> | undefined;
    "hours-of-day"?: Array<number> | undefined;
    months?: Array<string> | undefined;
    "per-hour"?: number | undefined;
};

/** @internal */
export const UpdateScheduleTimetable$outboundSchema: z.ZodType<
    UpdateScheduleTimetable$Outbound,
    z.ZodTypeDef,
    UpdateScheduleTimetable
> = z
    .object({
        daysOfMonth: z.array(z.number().int()).optional(),
        daysOfWeek: z.array(UpdateScheduleDaysOfWeek$outboundSchema).optional(),
        hoursOfDay: z.array(z.number().int()).optional(),
        months: z.array(UpdateScheduleMonths$outboundSchema).optional(),
        perHour: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleTimetable$ {
    /** @deprecated use `UpdateScheduleTimetable$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleTimetable$inboundSchema;
    /** @deprecated use `UpdateScheduleTimetable$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleTimetable$outboundSchema;
    /** @deprecated use `UpdateScheduleTimetable$Outbound` instead. */
    export type Outbound = UpdateScheduleTimetable$Outbound;
}

/** @internal */
export const UpdateScheduleUpdateScheduleParameters$inboundSchema: z.ZodType<
    UpdateScheduleUpdateScheduleParameters,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "attribution-actor": UpdateScheduleAttributionActor$inboundSchema.optional(),
        description: z.string().optional(),
        name: z.string().optional(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])).optional(),
        timetable: z.lazy(() => UpdateScheduleTimetable$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "attribution-actor": "attributionActor",
        });
    });

/** @internal */
export type UpdateScheduleUpdateScheduleParameters$Outbound = {
    "attribution-actor"?: string | undefined;
    description?: string | undefined;
    name?: string | undefined;
    parameters?: { [k: string]: number | string | boolean } | undefined;
    timetable?: UpdateScheduleTimetable$Outbound | undefined;
};

/** @internal */
export const UpdateScheduleUpdateScheduleParameters$outboundSchema: z.ZodType<
    UpdateScheduleUpdateScheduleParameters$Outbound,
    z.ZodTypeDef,
    UpdateScheduleUpdateScheduleParameters
> = z
    .object({
        attributionActor: UpdateScheduleAttributionActor$outboundSchema.optional(),
        description: z.string().optional(),
        name: z.string().optional(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])).optional(),
        timetable: z.lazy(() => UpdateScheduleTimetable$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            attributionActor: "attribution-actor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleUpdateScheduleParameters$ {
    /** @deprecated use `UpdateScheduleUpdateScheduleParameters$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleUpdateScheduleParameters$inboundSchema;
    /** @deprecated use `UpdateScheduleUpdateScheduleParameters$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleUpdateScheduleParameters$outboundSchema;
    /** @deprecated use `UpdateScheduleUpdateScheduleParameters$Outbound` instead. */
    export type Outbound = UpdateScheduleUpdateScheduleParameters$Outbound;
}

/** @internal */
export const UpdateScheduleRequest$inboundSchema: z.ZodType<
    UpdateScheduleRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => UpdateScheduleUpdateScheduleParameters$inboundSchema).optional(),
        "schedule-id": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            "schedule-id": "scheduleId",
        });
    });

/** @internal */
export type UpdateScheduleRequest$Outbound = {
    RequestBody?: UpdateScheduleUpdateScheduleParameters$Outbound | undefined;
    "schedule-id": string;
};

/** @internal */
export const UpdateScheduleRequest$outboundSchema: z.ZodType<
    UpdateScheduleRequest$Outbound,
    z.ZodTypeDef,
    UpdateScheduleRequest
> = z
    .object({
        requestBody: z.lazy(() => UpdateScheduleUpdateScheduleParameters$outboundSchema).optional(),
        scheduleId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            scheduleId: "schedule-id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleRequest$ {
    /** @deprecated use `UpdateScheduleRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleRequest$inboundSchema;
    /** @deprecated use `UpdateScheduleRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleRequest$outboundSchema;
    /** @deprecated use `UpdateScheduleRequest$Outbound` instead. */
    export type Outbound = UpdateScheduleRequest$Outbound;
}

/** @internal */
export const UpdateScheduleResponseBody$inboundSchema: z.ZodType<
    UpdateScheduleResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type UpdateScheduleResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const UpdateScheduleResponseBody$outboundSchema: z.ZodType<
    UpdateScheduleResponseBody$Outbound,
    z.ZodTypeDef,
    UpdateScheduleResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleResponseBody$ {
    /** @deprecated use `UpdateScheduleResponseBody$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleResponseBody$inboundSchema;
    /** @deprecated use `UpdateScheduleResponseBody$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleResponseBody$outboundSchema;
    /** @deprecated use `UpdateScheduleResponseBody$Outbound` instead. */
    export type Outbound = UpdateScheduleResponseBody$Outbound;
}

/** @internal */
export const UpdateScheduleUser$inboundSchema: z.ZodType<
    UpdateScheduleUser,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/** @internal */
export type UpdateScheduleUser$Outbound = {
    id: string;
    login: string;
    name: string;
};

/** @internal */
export const UpdateScheduleUser$outboundSchema: z.ZodType<
    UpdateScheduleUser$Outbound,
    z.ZodTypeDef,
    UpdateScheduleUser
> = z.object({
    id: z.string(),
    login: z.string(),
    name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleUser$ {
    /** @deprecated use `UpdateScheduleUser$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleUser$inboundSchema;
    /** @deprecated use `UpdateScheduleUser$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleUser$outboundSchema;
    /** @deprecated use `UpdateScheduleUser$Outbound` instead. */
    export type Outbound = UpdateScheduleUser$Outbound;
}

/** @internal */
export const UpdateScheduleScheduleParameters$inboundSchema: z.ZodType<
    UpdateScheduleScheduleParameters,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string(), z.boolean()]);

/** @internal */
export type UpdateScheduleScheduleParameters$Outbound = number | string | boolean;

/** @internal */
export const UpdateScheduleScheduleParameters$outboundSchema: z.ZodType<
    UpdateScheduleScheduleParameters$Outbound,
    z.ZodTypeDef,
    UpdateScheduleScheduleParameters
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleScheduleParameters$ {
    /** @deprecated use `UpdateScheduleScheduleParameters$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleScheduleParameters$inboundSchema;
    /** @deprecated use `UpdateScheduleScheduleParameters$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleScheduleParameters$outboundSchema;
    /** @deprecated use `UpdateScheduleScheduleParameters$Outbound` instead. */
    export type Outbound = UpdateScheduleScheduleParameters$Outbound;
}

/** @internal */
export const UpdateScheduleScheduleResponseDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleResponseDaysOfWeek
> = z.nativeEnum(UpdateScheduleScheduleResponseDaysOfWeek);

/** @internal */
export const UpdateScheduleScheduleResponseDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleResponseDaysOfWeek
> = UpdateScheduleScheduleResponseDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleScheduleResponseDaysOfWeek$ {
    /** @deprecated use `UpdateScheduleScheduleResponseDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleScheduleResponseDaysOfWeek$inboundSchema;
    /** @deprecated use `UpdateScheduleScheduleResponseDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleScheduleResponseDaysOfWeek$outboundSchema;
}

/** @internal */
export const UpdateScheduleScheduleResponseMonths$inboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleResponseMonths
> = z.nativeEnum(UpdateScheduleScheduleResponseMonths);

/** @internal */
export const UpdateScheduleScheduleResponseMonths$outboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleResponseMonths
> = UpdateScheduleScheduleResponseMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleScheduleResponseMonths$ {
    /** @deprecated use `UpdateScheduleScheduleResponseMonths$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleScheduleResponseMonths$inboundSchema;
    /** @deprecated use `UpdateScheduleScheduleResponseMonths$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleScheduleResponseMonths$outboundSchema;
}

/** @internal */
export const UpdateSchedule2$inboundSchema: z.ZodType<UpdateSchedule2, z.ZodTypeDef, unknown> = z
    .object({
        "days-of-month": z.array(z.number().int()),
        "days-of-week": z.array(UpdateScheduleScheduleResponseDaysOfWeek$inboundSchema).optional(),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(UpdateScheduleScheduleResponseMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type UpdateSchedule2$Outbound = {
    "days-of-month": Array<number>;
    "days-of-week"?: Array<string> | undefined;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const UpdateSchedule2$outboundSchema: z.ZodType<
    UpdateSchedule2$Outbound,
    z.ZodTypeDef,
    UpdateSchedule2
> = z
    .object({
        daysOfMonth: z.array(z.number().int()),
        daysOfWeek: z.array(UpdateScheduleScheduleResponseDaysOfWeek$outboundSchema).optional(),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(UpdateScheduleScheduleResponseMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchedule2$ {
    /** @deprecated use `UpdateSchedule2$inboundSchema` instead. */
    export const inboundSchema = UpdateSchedule2$inboundSchema;
    /** @deprecated use `UpdateSchedule2$outboundSchema` instead. */
    export const outboundSchema = UpdateSchedule2$outboundSchema;
    /** @deprecated use `UpdateSchedule2$Outbound` instead. */
    export type Outbound = UpdateSchedule2$Outbound;
}

/** @internal */
export const UpdateScheduleScheduleDaysOfWeek$inboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleDaysOfWeek
> = z.nativeEnum(UpdateScheduleScheduleDaysOfWeek);

/** @internal */
export const UpdateScheduleScheduleDaysOfWeek$outboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleDaysOfWeek
> = UpdateScheduleScheduleDaysOfWeek$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleScheduleDaysOfWeek$ {
    /** @deprecated use `UpdateScheduleScheduleDaysOfWeek$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleScheduleDaysOfWeek$inboundSchema;
    /** @deprecated use `UpdateScheduleScheduleDaysOfWeek$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleScheduleDaysOfWeek$outboundSchema;
}

/** @internal */
export const UpdateScheduleScheduleMonths$inboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleMonths
> = z.nativeEnum(UpdateScheduleScheduleMonths);

/** @internal */
export const UpdateScheduleScheduleMonths$outboundSchema: z.ZodNativeEnum<
    typeof UpdateScheduleScheduleMonths
> = UpdateScheduleScheduleMonths$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleScheduleMonths$ {
    /** @deprecated use `UpdateScheduleScheduleMonths$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleScheduleMonths$inboundSchema;
    /** @deprecated use `UpdateScheduleScheduleMonths$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleScheduleMonths$outboundSchema;
}

/** @internal */
export const UpdateSchedule1$inboundSchema: z.ZodType<UpdateSchedule1, z.ZodTypeDef, unknown> = z
    .object({
        "days-of-month": z.array(z.number().int()).optional(),
        "days-of-week": z.array(UpdateScheduleScheduleDaysOfWeek$inboundSchema),
        "hours-of-day": z.array(z.number().int()),
        months: z.array(UpdateScheduleScheduleMonths$inboundSchema).optional(),
        "per-hour": z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            "days-of-month": "daysOfMonth",
            "days-of-week": "daysOfWeek",
            "hours-of-day": "hoursOfDay",
            "per-hour": "perHour",
        });
    });

/** @internal */
export type UpdateSchedule1$Outbound = {
    "days-of-month"?: Array<number> | undefined;
    "days-of-week": Array<string>;
    "hours-of-day": Array<number>;
    months?: Array<string> | undefined;
    "per-hour": number;
};

/** @internal */
export const UpdateSchedule1$outboundSchema: z.ZodType<
    UpdateSchedule1$Outbound,
    z.ZodTypeDef,
    UpdateSchedule1
> = z
    .object({
        daysOfMonth: z.array(z.number().int()).optional(),
        daysOfWeek: z.array(UpdateScheduleScheduleDaysOfWeek$outboundSchema),
        hoursOfDay: z.array(z.number().int()),
        months: z.array(UpdateScheduleScheduleMonths$outboundSchema).optional(),
        perHour: z.number().int(),
    })
    .transform((v) => {
        return remap$(v, {
            daysOfMonth: "days-of-month",
            daysOfWeek: "days-of-week",
            hoursOfDay: "hours-of-day",
            perHour: "per-hour",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSchedule1$ {
    /** @deprecated use `UpdateSchedule1$inboundSchema` instead. */
    export const inboundSchema = UpdateSchedule1$inboundSchema;
    /** @deprecated use `UpdateSchedule1$outboundSchema` instead. */
    export const outboundSchema = UpdateSchedule1$outboundSchema;
    /** @deprecated use `UpdateSchedule1$Outbound` instead. */
    export type Outbound = UpdateSchedule1$Outbound;
}

/** @internal */
export const UpdateScheduleScheduleTimetable$inboundSchema: z.ZodType<
    UpdateScheduleScheduleTimetable,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => UpdateSchedule1$inboundSchema),
    z.lazy(() => UpdateSchedule2$inboundSchema),
]);

/** @internal */
export type UpdateScheduleScheduleTimetable$Outbound =
    | UpdateSchedule1$Outbound
    | UpdateSchedule2$Outbound;

/** @internal */
export const UpdateScheduleScheduleTimetable$outboundSchema: z.ZodType<
    UpdateScheduleScheduleTimetable$Outbound,
    z.ZodTypeDef,
    UpdateScheduleScheduleTimetable
> = z.union([
    z.lazy(() => UpdateSchedule1$outboundSchema),
    z.lazy(() => UpdateSchedule2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleScheduleTimetable$ {
    /** @deprecated use `UpdateScheduleScheduleTimetable$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleScheduleTimetable$inboundSchema;
    /** @deprecated use `UpdateScheduleScheduleTimetable$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleScheduleTimetable$outboundSchema;
    /** @deprecated use `UpdateScheduleScheduleTimetable$Outbound` instead. */
    export type Outbound = UpdateScheduleScheduleTimetable$Outbound;
}

/** @internal */
export const UpdateScheduleSchedule$inboundSchema: z.ZodType<
    UpdateScheduleSchedule,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        actor: z.lazy(() => UpdateScheduleUser$inboundSchema),
        "created-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        "project-slug": z.string(),
        timetable: z.union([
            z.lazy(() => UpdateSchedule1$inboundSchema),
            z.lazy(() => UpdateSchedule2$inboundSchema),
        ]),
        "updated-at": z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            "created-at": "createdAt",
            "project-slug": "projectSlug",
            "updated-at": "updatedAt",
        });
    });

/** @internal */
export type UpdateScheduleSchedule$Outbound = {
    actor: UpdateScheduleUser$Outbound;
    "created-at": string;
    description: string;
    id: string;
    name: string;
    parameters: { [k: string]: number | string | boolean };
    "project-slug": string;
    timetable: UpdateSchedule1$Outbound | UpdateSchedule2$Outbound;
    "updated-at": string;
};

/** @internal */
export const UpdateScheduleSchedule$outboundSchema: z.ZodType<
    UpdateScheduleSchedule$Outbound,
    z.ZodTypeDef,
    UpdateScheduleSchedule
> = z
    .object({
        actor: z.lazy(() => UpdateScheduleUser$outboundSchema),
        createdAt: z.date().transform((v) => v.toISOString()),
        description: z.string(),
        id: z.string(),
        name: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])),
        projectSlug: z.string(),
        timetable: z.union([
            z.lazy(() => UpdateSchedule1$outboundSchema),
            z.lazy(() => UpdateSchedule2$outboundSchema),
        ]),
        updatedAt: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created-at",
            projectSlug: "project-slug",
            updatedAt: "updated-at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleSchedule$ {
    /** @deprecated use `UpdateScheduleSchedule$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleSchedule$inboundSchema;
    /** @deprecated use `UpdateScheduleSchedule$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleSchedule$outboundSchema;
    /** @deprecated use `UpdateScheduleSchedule$Outbound` instead. */
    export type Outbound = UpdateScheduleSchedule$Outbound;
}

/** @internal */
export const UpdateScheduleResponse$inboundSchema: z.ZodType<
    UpdateScheduleResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => UpdateScheduleResponseBody$inboundSchema),
    z.lazy(() => UpdateScheduleSchedule$inboundSchema),
]);

/** @internal */
export type UpdateScheduleResponse$Outbound =
    | UpdateScheduleResponseBody$Outbound
    | UpdateScheduleSchedule$Outbound;

/** @internal */
export const UpdateScheduleResponse$outboundSchema: z.ZodType<
    UpdateScheduleResponse$Outbound,
    z.ZodTypeDef,
    UpdateScheduleResponse
> = z.union([
    z.lazy(() => UpdateScheduleResponseBody$outboundSchema),
    z.lazy(() => UpdateScheduleSchedule$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateScheduleResponse$ {
    /** @deprecated use `UpdateScheduleResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateScheduleResponse$inboundSchema;
    /** @deprecated use `UpdateScheduleResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateScheduleResponse$outboundSchema;
    /** @deprecated use `UpdateScheduleResponse$Outbound` instead. */
    export type Outbound = UpdateScheduleResponse$Outbound;
}
