/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
 */
export const OwnerType = {
    Account: "account",
    Organization: "organization",
} as const;
/**
 * The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
 */
export type OwnerType = ClosedEnum<typeof OwnerType>;

export type ListContextsRequest = {
    /**
     * The unique ID of the owner of the context. Specify either this or owner-slug.
     */
    ownerId?: string | undefined;
    /**
     * A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
     */
    ownerSlug?: string | undefined;
    /**
     * The type of the owner. Defaults to "organization". Accounts are only used as context owners in server.
     */
    ownerType?: OwnerType | undefined;
    /**
     * A token to retrieve the next page of results.
     */
    pageToken?: string | undefined;
};

/**
 * Error response.
 */
export type ListContextsContextResponseBody = {
    message?: string | undefined;
};

export type Context = {
    /**
     * The date and time the context was created.
     */
    createdAt: Date;
    /**
     * The unique ID of the context.
     */
    id: string;
    /**
     * The user defined name of the context.
     */
    name: string;
};

/**
 * A paginated list of contexts
 */
export type ListContextsResponseBody = {
    items: Array<Context>;
    /**
     * A token to pass as a `page-token` query parameter to return the next page of results.
     */
    nextPageToken: string;
};

export type ListContextsResponse = ListContextsContextResponseBody | ListContextsResponseBody;

/** @internal */
export const OwnerType$inboundSchema: z.ZodNativeEnum<typeof OwnerType> = z.nativeEnum(OwnerType);

/** @internal */
export const OwnerType$outboundSchema: z.ZodNativeEnum<typeof OwnerType> = OwnerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OwnerType$ {
    /** @deprecated use `OwnerType$inboundSchema` instead. */
    export const inboundSchema = OwnerType$inboundSchema;
    /** @deprecated use `OwnerType$outboundSchema` instead. */
    export const outboundSchema = OwnerType$outboundSchema;
}

/** @internal */
export const ListContextsRequest$inboundSchema: z.ZodType<
    ListContextsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "owner-id": z.string().optional(),
        "owner-slug": z.string().optional(),
        "owner-type": OwnerType$inboundSchema.optional(),
        "page-token": z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "owner-id": "ownerId",
            "owner-slug": "ownerSlug",
            "owner-type": "ownerType",
            "page-token": "pageToken",
        });
    });

/** @internal */
export type ListContextsRequest$Outbound = {
    "owner-id"?: string | undefined;
    "owner-slug"?: string | undefined;
    "owner-type"?: string | undefined;
    "page-token"?: string | undefined;
};

/** @internal */
export const ListContextsRequest$outboundSchema: z.ZodType<
    ListContextsRequest$Outbound,
    z.ZodTypeDef,
    ListContextsRequest
> = z
    .object({
        ownerId: z.string().optional(),
        ownerSlug: z.string().optional(),
        ownerType: OwnerType$outboundSchema.optional(),
        pageToken: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ownerId: "owner-id",
            ownerSlug: "owner-slug",
            ownerType: "owner-type",
            pageToken: "page-token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContextsRequest$ {
    /** @deprecated use `ListContextsRequest$inboundSchema` instead. */
    export const inboundSchema = ListContextsRequest$inboundSchema;
    /** @deprecated use `ListContextsRequest$outboundSchema` instead. */
    export const outboundSchema = ListContextsRequest$outboundSchema;
    /** @deprecated use `ListContextsRequest$Outbound` instead. */
    export type Outbound = ListContextsRequest$Outbound;
}

/** @internal */
export const ListContextsContextResponseBody$inboundSchema: z.ZodType<
    ListContextsContextResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ListContextsContextResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ListContextsContextResponseBody$outboundSchema: z.ZodType<
    ListContextsContextResponseBody$Outbound,
    z.ZodTypeDef,
    ListContextsContextResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContextsContextResponseBody$ {
    /** @deprecated use `ListContextsContextResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListContextsContextResponseBody$inboundSchema;
    /** @deprecated use `ListContextsContextResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListContextsContextResponseBody$outboundSchema;
    /** @deprecated use `ListContextsContextResponseBody$Outbound` instead. */
    export type Outbound = ListContextsContextResponseBody$Outbound;
}

/** @internal */
export const Context$inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        id: z.string(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
        });
    });

/** @internal */
export type Context$Outbound = {
    created_at: string;
    id: string;
    name: string;
};

/** @internal */
export const Context$outboundSchema: z.ZodType<Context$Outbound, z.ZodTypeDef, Context> = z
    .object({
        createdAt: z.date().transform((v) => v.toISOString()),
        id: z.string(),
        name: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Context$ {
    /** @deprecated use `Context$inboundSchema` instead. */
    export const inboundSchema = Context$inboundSchema;
    /** @deprecated use `Context$outboundSchema` instead. */
    export const outboundSchema = Context$outboundSchema;
    /** @deprecated use `Context$Outbound` instead. */
    export type Outbound = Context$Outbound;
}

/** @internal */
export const ListContextsResponseBody$inboundSchema: z.ZodType<
    ListContextsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Context$inboundSchema)),
        next_page_token: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ListContextsResponseBody$Outbound = {
    items: Array<Context$Outbound>;
    next_page_token: string;
};

/** @internal */
export const ListContextsResponseBody$outboundSchema: z.ZodType<
    ListContextsResponseBody$Outbound,
    z.ZodTypeDef,
    ListContextsResponseBody
> = z
    .object({
        items: z.array(z.lazy(() => Context$outboundSchema)),
        nextPageToken: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContextsResponseBody$ {
    /** @deprecated use `ListContextsResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListContextsResponseBody$inboundSchema;
    /** @deprecated use `ListContextsResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListContextsResponseBody$outboundSchema;
    /** @deprecated use `ListContextsResponseBody$Outbound` instead. */
    export type Outbound = ListContextsResponseBody$Outbound;
}

/** @internal */
export const ListContextsResponse$inboundSchema: z.ZodType<
    ListContextsResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ListContextsContextResponseBody$inboundSchema),
    z.lazy(() => ListContextsResponseBody$inboundSchema),
]);

/** @internal */
export type ListContextsResponse$Outbound =
    | ListContextsContextResponseBody$Outbound
    | ListContextsResponseBody$Outbound;

/** @internal */
export const ListContextsResponse$outboundSchema: z.ZodType<
    ListContextsResponse$Outbound,
    z.ZodTypeDef,
    ListContextsResponse
> = z.union([
    z.lazy(() => ListContextsContextResponseBody$outboundSchema),
    z.lazy(() => ListContextsResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListContextsResponse$ {
    /** @deprecated use `ListContextsResponse$inboundSchema` instead. */
    export const inboundSchema = ListContextsResponse$inboundSchema;
    /** @deprecated use `ListContextsResponse$outboundSchema` instead. */
    export const outboundSchema = ListContextsResponse$outboundSchema;
    /** @deprecated use `ListContextsResponse$Outbound` instead. */
    export type Outbound = ListContextsResponse$Outbound;
}
