/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class GetWorkflowByIdRequest extends SpeakeasyBase {
    /**
     * The unique ID of the workflow.
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
    id: string;
}

/**
 * Error response.
 */
export class GetWorkflowByIdDefaultApplicationJSON extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message?: string;
}

/**
 * The current status of the workflow.
 */
export enum GetWorkflowByIdWorkflowStatus {
    Success = "success",
    Running = "running",
    NotRun = "not_run",
    Failed = "failed",
    Error = "error",
    Failing = "failing",
    OnHold = "on_hold",
    Canceled = "canceled",
    Unauthorized = "unauthorized",
}

/**
 * Tag used for the workflow
 */
export enum GetWorkflowByIdWorkflowTag {
    Setup = "setup",
}

/**
 * A workflow
 */
export class GetWorkflowByIdWorkflow extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "canceled_by" })
    canceledBy?: string;

    /**
     * The date and time the workflow was created.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "errored_by" })
    erroredBy?: string;

    /**
     * The unique ID of the workflow.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * The name of the workflow.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * The ID of the pipeline this workflow belongs to.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pipeline_id" })
    pipelineId: string;

    /**
     * The number of the pipeline this workflow belongs to.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pipeline_number" })
    pipelineNumber: number;

    /**
     * The project-slug for the pipeline this workflow belongs to.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "project_slug" })
    projectSlug: string;

    @SpeakeasyMetadata()
    @Expose({ name: "started_by" })
    startedBy: string;

    /**
     * The current status of the workflow.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: GetWorkflowByIdWorkflowStatus;

    /**
     * The date and time the workflow stopped.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "stopped_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    stoppedAt: Date;

    /**
     * Tag used for the workflow
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tag" })
    tag?: GetWorkflowByIdWorkflowTag;
}

export class GetWorkflowByIdResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * A workflow object.
     */
    @SpeakeasyMetadata()
    workflow?: GetWorkflowByIdWorkflow;

    /**
     * Error response.
     */
    @SpeakeasyMetadata()
    getWorkflowByIdDefaultApplicationJSONObject?: GetWorkflowByIdDefaultApplicationJSON;
}
