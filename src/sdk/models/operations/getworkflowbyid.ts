/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export type GetWorkflowByIdRequest = {
    /**
     * The unique ID of the workflow.
     */
    id: string;
};

/**
 * Error response.
 */
export type GetWorkflowByIdResponseBody = {
    message?: string | undefined;
};

/**
 * The current status of the workflow.
 */
export const GetWorkflowByIdStatus = {
    Success: "success",
    Running: "running",
    NotRun: "not_run",
    Failed: "failed",
    Error: "error",
    Failing: "failing",
    OnHold: "on_hold",
    Canceled: "canceled",
    Unauthorized: "unauthorized",
} as const;
/**
 * The current status of the workflow.
 */
export type GetWorkflowByIdStatus = ClosedEnum<typeof GetWorkflowByIdStatus>;

/**
 * Tag used for the workflow
 */
export const Tag = {
    Setup: "setup",
} as const;
/**
 * Tag used for the workflow
 */
export type Tag = ClosedEnum<typeof Tag>;

/**
 * A workflow
 */
export type GetWorkflowByIdWorkflow = {
    canceledBy?: string | undefined;
    /**
     * The date and time the workflow was created.
     */
    createdAt: Date;
    erroredBy?: string | undefined;
    /**
     * The unique ID of the workflow.
     */
    id: string;
    /**
     * The name of the workflow.
     */
    name: string;
    /**
     * The ID of the pipeline this workflow belongs to.
     */
    pipelineId: string;
    /**
     * The number of the pipeline this workflow belongs to.
     */
    pipelineNumber: number;
    /**
     * The project-slug for the pipeline this workflow belongs to.
     */
    projectSlug: string;
    startedBy: string;
    /**
     * The current status of the workflow.
     */
    status: GetWorkflowByIdStatus;
    /**
     * The date and time the workflow stopped.
     */
    stoppedAt: Date;
    /**
     * Tag used for the workflow
     */
    tag?: Tag | undefined;
};

export type GetWorkflowByIdResponse = GetWorkflowByIdResponseBody | GetWorkflowByIdWorkflow;

/** @internal */
export const GetWorkflowByIdRequest$inboundSchema: z.ZodType<
    GetWorkflowByIdRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    id: z.string(),
});

/** @internal */
export type GetWorkflowByIdRequest$Outbound = {
    id: string;
};

/** @internal */
export const GetWorkflowByIdRequest$outboundSchema: z.ZodType<
    GetWorkflowByIdRequest$Outbound,
    z.ZodTypeDef,
    GetWorkflowByIdRequest
> = z.object({
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowByIdRequest$ {
    /** @deprecated use `GetWorkflowByIdRequest$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowByIdRequest$inboundSchema;
    /** @deprecated use `GetWorkflowByIdRequest$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowByIdRequest$outboundSchema;
    /** @deprecated use `GetWorkflowByIdRequest$Outbound` instead. */
    export type Outbound = GetWorkflowByIdRequest$Outbound;
}

/** @internal */
export const GetWorkflowByIdResponseBody$inboundSchema: z.ZodType<
    GetWorkflowByIdResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type GetWorkflowByIdResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const GetWorkflowByIdResponseBody$outboundSchema: z.ZodType<
    GetWorkflowByIdResponseBody$Outbound,
    z.ZodTypeDef,
    GetWorkflowByIdResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowByIdResponseBody$ {
    /** @deprecated use `GetWorkflowByIdResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowByIdResponseBody$inboundSchema;
    /** @deprecated use `GetWorkflowByIdResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowByIdResponseBody$outboundSchema;
    /** @deprecated use `GetWorkflowByIdResponseBody$Outbound` instead. */
    export type Outbound = GetWorkflowByIdResponseBody$Outbound;
}

/** @internal */
export const GetWorkflowByIdStatus$inboundSchema: z.ZodNativeEnum<typeof GetWorkflowByIdStatus> =
    z.nativeEnum(GetWorkflowByIdStatus);

/** @internal */
export const GetWorkflowByIdStatus$outboundSchema: z.ZodNativeEnum<typeof GetWorkflowByIdStatus> =
    GetWorkflowByIdStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowByIdStatus$ {
    /** @deprecated use `GetWorkflowByIdStatus$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowByIdStatus$inboundSchema;
    /** @deprecated use `GetWorkflowByIdStatus$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowByIdStatus$outboundSchema;
}

/** @internal */
export const Tag$inboundSchema: z.ZodNativeEnum<typeof Tag> = z.nativeEnum(Tag);

/** @internal */
export const Tag$outboundSchema: z.ZodNativeEnum<typeof Tag> = Tag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
    /** @deprecated use `Tag$inboundSchema` instead. */
    export const inboundSchema = Tag$inboundSchema;
    /** @deprecated use `Tag$outboundSchema` instead. */
    export const outboundSchema = Tag$outboundSchema;
}

/** @internal */
export const GetWorkflowByIdWorkflow$inboundSchema: z.ZodType<
    GetWorkflowByIdWorkflow,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        canceled_by: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        errored_by: z.string().optional(),
        id: z.string(),
        name: z.string(),
        pipeline_id: z.string(),
        pipeline_number: z.number().int(),
        project_slug: z.string(),
        started_by: z.string(),
        status: GetWorkflowByIdStatus$inboundSchema,
        stopped_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        tag: Tag$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            canceled_by: "canceledBy",
            created_at: "createdAt",
            errored_by: "erroredBy",
            pipeline_id: "pipelineId",
            pipeline_number: "pipelineNumber",
            project_slug: "projectSlug",
            started_by: "startedBy",
            stopped_at: "stoppedAt",
        });
    });

/** @internal */
export type GetWorkflowByIdWorkflow$Outbound = {
    canceled_by?: string | undefined;
    created_at: string;
    errored_by?: string | undefined;
    id: string;
    name: string;
    pipeline_id: string;
    pipeline_number: number;
    project_slug: string;
    started_by: string;
    status: string;
    stopped_at: string;
    tag?: string | undefined;
};

/** @internal */
export const GetWorkflowByIdWorkflow$outboundSchema: z.ZodType<
    GetWorkflowByIdWorkflow$Outbound,
    z.ZodTypeDef,
    GetWorkflowByIdWorkflow
> = z
    .object({
        canceledBy: z.string().optional(),
        createdAt: z.date().transform((v) => v.toISOString()),
        erroredBy: z.string().optional(),
        id: z.string(),
        name: z.string(),
        pipelineId: z.string(),
        pipelineNumber: z.number().int(),
        projectSlug: z.string(),
        startedBy: z.string(),
        status: GetWorkflowByIdStatus$outboundSchema,
        stoppedAt: z.date().transform((v) => v.toISOString()),
        tag: Tag$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            canceledBy: "canceled_by",
            createdAt: "created_at",
            erroredBy: "errored_by",
            pipelineId: "pipeline_id",
            pipelineNumber: "pipeline_number",
            projectSlug: "project_slug",
            startedBy: "started_by",
            stoppedAt: "stopped_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowByIdWorkflow$ {
    /** @deprecated use `GetWorkflowByIdWorkflow$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowByIdWorkflow$inboundSchema;
    /** @deprecated use `GetWorkflowByIdWorkflow$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowByIdWorkflow$outboundSchema;
    /** @deprecated use `GetWorkflowByIdWorkflow$Outbound` instead. */
    export type Outbound = GetWorkflowByIdWorkflow$Outbound;
}

/** @internal */
export const GetWorkflowByIdResponse$inboundSchema: z.ZodType<
    GetWorkflowByIdResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => GetWorkflowByIdResponseBody$inboundSchema),
    z.lazy(() => GetWorkflowByIdWorkflow$inboundSchema),
]);

/** @internal */
export type GetWorkflowByIdResponse$Outbound =
    | GetWorkflowByIdResponseBody$Outbound
    | GetWorkflowByIdWorkflow$Outbound;

/** @internal */
export const GetWorkflowByIdResponse$outboundSchema: z.ZodType<
    GetWorkflowByIdResponse$Outbound,
    z.ZodTypeDef,
    GetWorkflowByIdResponse
> = z.union([
    z.lazy(() => GetWorkflowByIdResponseBody$outboundSchema),
    z.lazy(() => GetWorkflowByIdWorkflow$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWorkflowByIdResponse$ {
    /** @deprecated use `GetWorkflowByIdResponse$inboundSchema` instead. */
    export const inboundSchema = GetWorkflowByIdResponse$inboundSchema;
    /** @deprecated use `GetWorkflowByIdResponse$outboundSchema` instead. */
    export const outboundSchema = GetWorkflowByIdResponse$outboundSchema;
    /** @deprecated use `GetWorkflowByIdResponse$Outbound` instead. */
    export type Outbound = GetWorkflowByIdResponse$Outbound;
}
