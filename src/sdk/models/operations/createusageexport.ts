/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type CreateUsageExportRequestBody = {
    /**
     * The end date & time (inclusive) of the range from which data will be pulled. Must be no more than 31 days after `start`.
     */
    end: Date;
    sharedOrgIds?: Array<string> | undefined;
    /**
     * The start date & time (inclusive) of the range from which data will be pulled. Must be no more than one year ago.
     */
    start: Date;
};

export type CreateUsageExportRequest = {
    requestBody: CreateUsageExportRequestBody;
    /**
     * An opaque identifier of an organization.
     */
    orgId: string;
};

/**
 * Unexpected request body provided.
 */
export type CreateUsageExportResponseBody = {
    message?: string | undefined;
};

export type CreateUsageExportResponse = CreateUsageExportResponseBody | shared.UsageExportJob;

/** @internal */
export const CreateUsageExportRequestBody$inboundSchema: z.ZodType<
    CreateUsageExportRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        end: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        shared_org_ids: z.array(z.string()).optional(),
        start: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    })
    .transform((v) => {
        return remap$(v, {
            shared_org_ids: "sharedOrgIds",
        });
    });

/** @internal */
export type CreateUsageExportRequestBody$Outbound = {
    end: string;
    shared_org_ids?: Array<string> | undefined;
    start: string;
};

/** @internal */
export const CreateUsageExportRequestBody$outboundSchema: z.ZodType<
    CreateUsageExportRequestBody$Outbound,
    z.ZodTypeDef,
    CreateUsageExportRequestBody
> = z
    .object({
        end: z.date().transform((v) => v.toISOString()),
        sharedOrgIds: z.array(z.string()).optional(),
        start: z.date().transform((v) => v.toISOString()),
    })
    .transform((v) => {
        return remap$(v, {
            sharedOrgIds: "shared_org_ids",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUsageExportRequestBody$ {
    /** @deprecated use `CreateUsageExportRequestBody$inboundSchema` instead. */
    export const inboundSchema = CreateUsageExportRequestBody$inboundSchema;
    /** @deprecated use `CreateUsageExportRequestBody$outboundSchema` instead. */
    export const outboundSchema = CreateUsageExportRequestBody$outboundSchema;
    /** @deprecated use `CreateUsageExportRequestBody$Outbound` instead. */
    export type Outbound = CreateUsageExportRequestBody$Outbound;
}

/** @internal */
export const CreateUsageExportRequest$inboundSchema: z.ZodType<
    CreateUsageExportRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RequestBody: z.lazy(() => CreateUsageExportRequestBody$inboundSchema),
        org_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
            org_id: "orgId",
        });
    });

/** @internal */
export type CreateUsageExportRequest$Outbound = {
    RequestBody: CreateUsageExportRequestBody$Outbound;
    org_id: string;
};

/** @internal */
export const CreateUsageExportRequest$outboundSchema: z.ZodType<
    CreateUsageExportRequest$Outbound,
    z.ZodTypeDef,
    CreateUsageExportRequest
> = z
    .object({
        requestBody: z.lazy(() => CreateUsageExportRequestBody$outboundSchema),
        orgId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
            orgId: "org_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUsageExportRequest$ {
    /** @deprecated use `CreateUsageExportRequest$inboundSchema` instead. */
    export const inboundSchema = CreateUsageExportRequest$inboundSchema;
    /** @deprecated use `CreateUsageExportRequest$outboundSchema` instead. */
    export const outboundSchema = CreateUsageExportRequest$outboundSchema;
    /** @deprecated use `CreateUsageExportRequest$Outbound` instead. */
    export type Outbound = CreateUsageExportRequest$Outbound;
}

/** @internal */
export const CreateUsageExportResponseBody$inboundSchema: z.ZodType<
    CreateUsageExportResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().default("Unexpected request body provided."),
});

/** @internal */
export type CreateUsageExportResponseBody$Outbound = {
    message: string;
};

/** @internal */
export const CreateUsageExportResponseBody$outboundSchema: z.ZodType<
    CreateUsageExportResponseBody$Outbound,
    z.ZodTypeDef,
    CreateUsageExportResponseBody
> = z.object({
    message: z.string().default("Unexpected request body provided."),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUsageExportResponseBody$ {
    /** @deprecated use `CreateUsageExportResponseBody$inboundSchema` instead. */
    export const inboundSchema = CreateUsageExportResponseBody$inboundSchema;
    /** @deprecated use `CreateUsageExportResponseBody$outboundSchema` instead. */
    export const outboundSchema = CreateUsageExportResponseBody$outboundSchema;
    /** @deprecated use `CreateUsageExportResponseBody$Outbound` instead. */
    export type Outbound = CreateUsageExportResponseBody$Outbound;
}

/** @internal */
export const CreateUsageExportResponse$inboundSchema: z.ZodType<
    CreateUsageExportResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => CreateUsageExportResponseBody$inboundSchema),
    shared.UsageExportJob$inboundSchema,
]);

/** @internal */
export type CreateUsageExportResponse$Outbound =
    | CreateUsageExportResponseBody$Outbound
    | shared.UsageExportJob$Outbound;

/** @internal */
export const CreateUsageExportResponse$outboundSchema: z.ZodType<
    CreateUsageExportResponse$Outbound,
    z.ZodTypeDef,
    CreateUsageExportResponse
> = z.union([
    z.lazy(() => CreateUsageExportResponseBody$outboundSchema),
    shared.UsageExportJob$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUsageExportResponse$ {
    /** @deprecated use `CreateUsageExportResponse$inboundSchema` instead. */
    export const inboundSchema = CreateUsageExportResponse$inboundSchema;
    /** @deprecated use `CreateUsageExportResponse$outboundSchema` instead. */
    export const outboundSchema = CreateUsageExportResponse$outboundSchema;
    /** @deprecated use `CreateUsageExportResponse$Outbound` instead. */
    export type Outbound = CreateUsageExportResponse$Outbound;
}
