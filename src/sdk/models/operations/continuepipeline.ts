/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ParametersT = number | string | boolean;

export type ContinuePipelineRequestBody = {
    /**
     * A configuration string for the pipeline.
     */
    configuration: string;
    /**
     * A pipeline continuation key.
     */
    continuationKey: string;
    /**
     * An object containing pipeline parameters and their values. Pipeline parameters have the following size limits: 100 max entries, 128 maximum key length, 512 maximum value length.
     */
    parameters?: { [k: string]: number | string | boolean } | undefined;
};

/**
 * Error response.
 */
export type ContinuePipelineResponseBody = {
    message?: string | undefined;
};

/**
 * message response
 */
export type ContinuePipelineMessageResponse = {
    /**
     * A human-readable message
     */
    message: string;
};

export type ContinuePipelineResponse =
    | ContinuePipelineMessageResponse
    | ContinuePipelineResponseBody;

/** @internal */
export const ParametersT$inboundSchema: z.ZodType<ParametersT, z.ZodTypeDef, unknown> = z.union([
    z.number().int(),
    z.string(),
    z.boolean(),
]);

/** @internal */
export type ParametersT$Outbound = number | string | boolean;

/** @internal */
export const ParametersT$outboundSchema: z.ZodType<
    ParametersT$Outbound,
    z.ZodTypeDef,
    ParametersT
> = z.union([z.number().int(), z.string(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParametersT$ {
    /** @deprecated use `ParametersT$inboundSchema` instead. */
    export const inboundSchema = ParametersT$inboundSchema;
    /** @deprecated use `ParametersT$outboundSchema` instead. */
    export const outboundSchema = ParametersT$outboundSchema;
    /** @deprecated use `ParametersT$Outbound` instead. */
    export type Outbound = ParametersT$Outbound;
}

/** @internal */
export const ContinuePipelineRequestBody$inboundSchema: z.ZodType<
    ContinuePipelineRequestBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        configuration: z.string(),
        "continuation-key": z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "continuation-key": "continuationKey",
        });
    });

/** @internal */
export type ContinuePipelineRequestBody$Outbound = {
    configuration: string;
    "continuation-key": string;
    parameters?: { [k: string]: number | string | boolean } | undefined;
};

/** @internal */
export const ContinuePipelineRequestBody$outboundSchema: z.ZodType<
    ContinuePipelineRequestBody$Outbound,
    z.ZodTypeDef,
    ContinuePipelineRequestBody
> = z
    .object({
        configuration: z.string(),
        continuationKey: z.string(),
        parameters: z.record(z.union([z.number().int(), z.string(), z.boolean()])).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            continuationKey: "continuation-key",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContinuePipelineRequestBody$ {
    /** @deprecated use `ContinuePipelineRequestBody$inboundSchema` instead. */
    export const inboundSchema = ContinuePipelineRequestBody$inboundSchema;
    /** @deprecated use `ContinuePipelineRequestBody$outboundSchema` instead. */
    export const outboundSchema = ContinuePipelineRequestBody$outboundSchema;
    /** @deprecated use `ContinuePipelineRequestBody$Outbound` instead. */
    export type Outbound = ContinuePipelineRequestBody$Outbound;
}

/** @internal */
export const ContinuePipelineResponseBody$inboundSchema: z.ZodType<
    ContinuePipelineResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type ContinuePipelineResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const ContinuePipelineResponseBody$outboundSchema: z.ZodType<
    ContinuePipelineResponseBody$Outbound,
    z.ZodTypeDef,
    ContinuePipelineResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContinuePipelineResponseBody$ {
    /** @deprecated use `ContinuePipelineResponseBody$inboundSchema` instead. */
    export const inboundSchema = ContinuePipelineResponseBody$inboundSchema;
    /** @deprecated use `ContinuePipelineResponseBody$outboundSchema` instead. */
    export const outboundSchema = ContinuePipelineResponseBody$outboundSchema;
    /** @deprecated use `ContinuePipelineResponseBody$Outbound` instead. */
    export type Outbound = ContinuePipelineResponseBody$Outbound;
}

/** @internal */
export const ContinuePipelineMessageResponse$inboundSchema: z.ZodType<
    ContinuePipelineMessageResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
});

/** @internal */
export type ContinuePipelineMessageResponse$Outbound = {
    message: string;
};

/** @internal */
export const ContinuePipelineMessageResponse$outboundSchema: z.ZodType<
    ContinuePipelineMessageResponse$Outbound,
    z.ZodTypeDef,
    ContinuePipelineMessageResponse
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContinuePipelineMessageResponse$ {
    /** @deprecated use `ContinuePipelineMessageResponse$inboundSchema` instead. */
    export const inboundSchema = ContinuePipelineMessageResponse$inboundSchema;
    /** @deprecated use `ContinuePipelineMessageResponse$outboundSchema` instead. */
    export const outboundSchema = ContinuePipelineMessageResponse$outboundSchema;
    /** @deprecated use `ContinuePipelineMessageResponse$Outbound` instead. */
    export type Outbound = ContinuePipelineMessageResponse$Outbound;
}

/** @internal */
export const ContinuePipelineResponse$inboundSchema: z.ZodType<
    ContinuePipelineResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => ContinuePipelineMessageResponse$inboundSchema),
    z.lazy(() => ContinuePipelineResponseBody$inboundSchema),
]);

/** @internal */
export type ContinuePipelineResponse$Outbound =
    | ContinuePipelineMessageResponse$Outbound
    | ContinuePipelineResponseBody$Outbound;

/** @internal */
export const ContinuePipelineResponse$outboundSchema: z.ZodType<
    ContinuePipelineResponse$Outbound,
    z.ZodTypeDef,
    ContinuePipelineResponse
> = z.union([
    z.lazy(() => ContinuePipelineMessageResponse$outboundSchema),
    z.lazy(() => ContinuePipelineResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContinuePipelineResponse$ {
    /** @deprecated use `ContinuePipelineResponse$inboundSchema` instead. */
    export const inboundSchema = ContinuePipelineResponse$inboundSchema;
    /** @deprecated use `ContinuePipelineResponse$outboundSchema` instead. */
    export const outboundSchema = ContinuePipelineResponse$outboundSchema;
    /** @deprecated use `ContinuePipelineResponse$Outbound` instead. */
    export type Outbound = ContinuePipelineResponse$Outbound;
}
