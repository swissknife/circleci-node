/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteEnvVarRequest = {
    /**
     * The name of the environment variable.
     */
    name: string;
    /**
     * Project slug in the form `vcs-slug/org-name/repo-name`. The `/` characters may be URL-escaped. For projects that use GitLab or GitHub App, use `circleci` as the `vcs-slug`, replace `org-name` with the organization ID (found in Organization Settings), and replace `repo-name` with the project ID (found in Project Settings).
     */
    projectSlug: string;
};

/**
 * Error response.
 */
export type DeleteEnvVarResponseBody = {
    message?: string | undefined;
};

/**
 * message response
 */
export type DeleteEnvVarMessageResponse = {
    /**
     * A human-readable message
     */
    message: string;
};

export type DeleteEnvVarResponse = DeleteEnvVarMessageResponse | DeleteEnvVarResponseBody;

/** @internal */
export const DeleteEnvVarRequest$inboundSchema: z.ZodType<
    DeleteEnvVarRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.string(),
        "project-slug": z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            "project-slug": "projectSlug",
        });
    });

/** @internal */
export type DeleteEnvVarRequest$Outbound = {
    name: string;
    "project-slug": string;
};

/** @internal */
export const DeleteEnvVarRequest$outboundSchema: z.ZodType<
    DeleteEnvVarRequest$Outbound,
    z.ZodTypeDef,
    DeleteEnvVarRequest
> = z
    .object({
        name: z.string(),
        projectSlug: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            projectSlug: "project-slug",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvVarRequest$ {
    /** @deprecated use `DeleteEnvVarRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvVarRequest$inboundSchema;
    /** @deprecated use `DeleteEnvVarRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvVarRequest$outboundSchema;
    /** @deprecated use `DeleteEnvVarRequest$Outbound` instead. */
    export type Outbound = DeleteEnvVarRequest$Outbound;
}

/** @internal */
export const DeleteEnvVarResponseBody$inboundSchema: z.ZodType<
    DeleteEnvVarResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string().optional(),
});

/** @internal */
export type DeleteEnvVarResponseBody$Outbound = {
    message?: string | undefined;
};

/** @internal */
export const DeleteEnvVarResponseBody$outboundSchema: z.ZodType<
    DeleteEnvVarResponseBody$Outbound,
    z.ZodTypeDef,
    DeleteEnvVarResponseBody
> = z.object({
    message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvVarResponseBody$ {
    /** @deprecated use `DeleteEnvVarResponseBody$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvVarResponseBody$inboundSchema;
    /** @deprecated use `DeleteEnvVarResponseBody$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvVarResponseBody$outboundSchema;
    /** @deprecated use `DeleteEnvVarResponseBody$Outbound` instead. */
    export type Outbound = DeleteEnvVarResponseBody$Outbound;
}

/** @internal */
export const DeleteEnvVarMessageResponse$inboundSchema: z.ZodType<
    DeleteEnvVarMessageResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    message: z.string(),
});

/** @internal */
export type DeleteEnvVarMessageResponse$Outbound = {
    message: string;
};

/** @internal */
export const DeleteEnvVarMessageResponse$outboundSchema: z.ZodType<
    DeleteEnvVarMessageResponse$Outbound,
    z.ZodTypeDef,
    DeleteEnvVarMessageResponse
> = z.object({
    message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvVarMessageResponse$ {
    /** @deprecated use `DeleteEnvVarMessageResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvVarMessageResponse$inboundSchema;
    /** @deprecated use `DeleteEnvVarMessageResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvVarMessageResponse$outboundSchema;
    /** @deprecated use `DeleteEnvVarMessageResponse$Outbound` instead. */
    export type Outbound = DeleteEnvVarMessageResponse$Outbound;
}

/** @internal */
export const DeleteEnvVarResponse$inboundSchema: z.ZodType<
    DeleteEnvVarResponse,
    z.ZodTypeDef,
    unknown
> = z.union([
    z.lazy(() => DeleteEnvVarMessageResponse$inboundSchema),
    z.lazy(() => DeleteEnvVarResponseBody$inboundSchema),
]);

/** @internal */
export type DeleteEnvVarResponse$Outbound =
    | DeleteEnvVarMessageResponse$Outbound
    | DeleteEnvVarResponseBody$Outbound;

/** @internal */
export const DeleteEnvVarResponse$outboundSchema: z.ZodType<
    DeleteEnvVarResponse$Outbound,
    z.ZodTypeDef,
    DeleteEnvVarResponse
> = z.union([
    z.lazy(() => DeleteEnvVarMessageResponse$outboundSchema),
    z.lazy(() => DeleteEnvVarResponseBody$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteEnvVarResponse$ {
    /** @deprecated use `DeleteEnvVarResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteEnvVarResponse$inboundSchema;
    /** @deprecated use `DeleteEnvVarResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteEnvVarResponse$outboundSchema;
    /** @deprecated use `DeleteEnvVarResponse$Outbound` instead. */
    export type Outbound = DeleteEnvVarResponse$Outbound;
}
