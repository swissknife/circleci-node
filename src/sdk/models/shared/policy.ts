/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type Policy = {
    content?: string | undefined;
    createdAt?: Date | undefined;
    createdBy?: string | undefined;
    name?: string | undefined;
};

/** @internal */
export const Policy$inboundSchema: z.ZodType<Policy, z.ZodTypeDef, unknown> = z
    .object({
        content: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        created_by: z.string().optional(),
        name: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            created_by: "createdBy",
        });
    });

/** @internal */
export type Policy$Outbound = {
    content?: string | undefined;
    created_at?: string | undefined;
    created_by?: string | undefined;
    name?: string | undefined;
};

/** @internal */
export const Policy$outboundSchema: z.ZodType<Policy$Outbound, z.ZodTypeDef, Policy> = z
    .object({
        content: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        createdBy: z.string().optional(),
        name: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            createdBy: "created_by",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Policy$ {
    /** @deprecated use `Policy$inboundSchema` instead. */
    export const inboundSchema = Policy$inboundSchema;
    /** @deprecated use `Policy$outboundSchema` instead. */
    export const outboundSchema = Policy$outboundSchema;
    /** @deprecated use `Policy$Outbound` instead. */
    export type Outbound = Policy$Outbound;
}
