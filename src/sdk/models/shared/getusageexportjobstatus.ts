/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const State = {
    Created: "created",
    Processing: "processing",
    Failed: "failed",
    Completed: "completed",
} as const;
export type State = ClosedEnum<typeof State>;

export type GetUsageExportJobStatus = {
    /**
     * A list of pre signed urls that the client can use to download the results of a Usage Export.
     */
    downloadUrls: Array<string>;
    errorReason?: string | undefined;
    state: State;
    usageExportJobId: string;
};

/** @internal */
export const State$inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(State);

/** @internal */
export const State$outboundSchema: z.ZodNativeEnum<typeof State> = State$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace State$ {
    /** @deprecated use `State$inboundSchema` instead. */
    export const inboundSchema = State$inboundSchema;
    /** @deprecated use `State$outboundSchema` instead. */
    export const outboundSchema = State$outboundSchema;
}

/** @internal */
export const GetUsageExportJobStatus$inboundSchema: z.ZodType<
    GetUsageExportJobStatus,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        download_urls: z.array(z.string()),
        error_reason: z.string().optional(),
        state: State$inboundSchema,
        usage_export_job_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            download_urls: "downloadUrls",
            error_reason: "errorReason",
            usage_export_job_id: "usageExportJobId",
        });
    });

/** @internal */
export type GetUsageExportJobStatus$Outbound = {
    download_urls: Array<string>;
    error_reason?: string | undefined;
    state: string;
    usage_export_job_id: string;
};

/** @internal */
export const GetUsageExportJobStatus$outboundSchema: z.ZodType<
    GetUsageExportJobStatus$Outbound,
    z.ZodTypeDef,
    GetUsageExportJobStatus
> = z
    .object({
        downloadUrls: z.array(z.string()),
        errorReason: z.string().optional(),
        state: State$outboundSchema,
        usageExportJobId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            downloadUrls: "download_urls",
            errorReason: "error_reason",
            usageExportJobId: "usage_export_job_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUsageExportJobStatus$ {
    /** @deprecated use `GetUsageExportJobStatus$inboundSchema` instead. */
    export const inboundSchema = GetUsageExportJobStatus$inboundSchema;
    /** @deprecated use `GetUsageExportJobStatus$outboundSchema` instead. */
    export const outboundSchema = GetUsageExportJobStatus$outboundSchema;
    /** @deprecated use `GetUsageExportJobStatus$Outbound` instead. */
    export type Outbound = GetUsageExportJobStatus$Outbound;
}
