/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

export const UsageExportJobState = {
    Created: "created",
    Processing: "processing",
    Failed: "failed",
    Completed: "completed",
} as const;
export type UsageExportJobState = ClosedEnum<typeof UsageExportJobState>;

export type UsageExportJob = {
    /**
     * A list of pre signed urls that the client can use to download the results of a Usage Export.
     */
    downloadUrls: Array<string>;
    end: Date;
    start: Date;
    state: UsageExportJobState;
    usageExportJobId: string;
};

/** @internal */
export const UsageExportJobState$inboundSchema: z.ZodNativeEnum<typeof UsageExportJobState> =
    z.nativeEnum(UsageExportJobState);

/** @internal */
export const UsageExportJobState$outboundSchema: z.ZodNativeEnum<typeof UsageExportJobState> =
    UsageExportJobState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExportJobState$ {
    /** @deprecated use `UsageExportJobState$inboundSchema` instead. */
    export const inboundSchema = UsageExportJobState$inboundSchema;
    /** @deprecated use `UsageExportJobState$outboundSchema` instead. */
    export const outboundSchema = UsageExportJobState$outboundSchema;
}

/** @internal */
export const UsageExportJob$inboundSchema: z.ZodType<UsageExportJob, z.ZodTypeDef, unknown> = z
    .object({
        download_urls: z.array(z.string()),
        end: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        start: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        state: UsageExportJobState$inboundSchema,
        usage_export_job_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            download_urls: "downloadUrls",
            usage_export_job_id: "usageExportJobId",
        });
    });

/** @internal */
export type UsageExportJob$Outbound = {
    download_urls: Array<string>;
    end: string;
    start: string;
    state: string;
    usage_export_job_id: string;
};

/** @internal */
export const UsageExportJob$outboundSchema: z.ZodType<
    UsageExportJob$Outbound,
    z.ZodTypeDef,
    UsageExportJob
> = z
    .object({
        downloadUrls: z.array(z.string()),
        end: z.date().transform((v) => v.toISOString()),
        start: z.date().transform((v) => v.toISOString()),
        state: UsageExportJobState$outboundSchema,
        usageExportJobId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            downloadUrls: "download_urls",
            usageExportJobId: "usage_export_job_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageExportJob$ {
    /** @deprecated use `UsageExportJob$inboundSchema` instead. */
    export const inboundSchema = UsageExportJob$inboundSchema;
    /** @deprecated use `UsageExportJob$outboundSchema` instead. */
    export const outboundSchema = UsageExportJob$outboundSchema;
    /** @deprecated use `UsageExportJob$Outbound` instead. */
    export type Outbound = UsageExportJob$Outbound;
}
