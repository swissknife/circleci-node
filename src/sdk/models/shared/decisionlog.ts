/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    Decision,
    Decision$inboundSchema,
    Decision$Outbound,
    Decision$outboundSchema,
} from "./decision.js";
import * as z from "zod";

export type Vcs = {
    branch?: string | undefined;
    originRepositoryUrl?: string | undefined;
    releaseTag?: string | undefined;
    targetRepositoryUrl?: string | undefined;
};

export type Metadata = {
    buildNumber?: number | undefined;
    projectId?: string | undefined;
    sshRerun?: boolean | undefined;
    vcs?: Vcs | undefined;
};

export type DecisionLog = {
    createdAt?: Date | undefined;
    decision?: Decision | undefined;
    id?: string | undefined;
    metadata?: Metadata | undefined;
    /**
     * policy-name-to-hash-map
     */
    policies?: { [k: string]: string } | undefined;
    timeTakenMs?: number | undefined;
};

/** @internal */
export const Vcs$inboundSchema: z.ZodType<Vcs, z.ZodTypeDef, unknown> = z
    .object({
        branch: z.string().optional(),
        origin_repository_url: z.string().optional(),
        release_tag: z.string().optional(),
        target_repository_url: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            origin_repository_url: "originRepositoryUrl",
            release_tag: "releaseTag",
            target_repository_url: "targetRepositoryUrl",
        });
    });

/** @internal */
export type Vcs$Outbound = {
    branch?: string | undefined;
    origin_repository_url?: string | undefined;
    release_tag?: string | undefined;
    target_repository_url?: string | undefined;
};

/** @internal */
export const Vcs$outboundSchema: z.ZodType<Vcs$Outbound, z.ZodTypeDef, Vcs> = z
    .object({
        branch: z.string().optional(),
        originRepositoryUrl: z.string().optional(),
        releaseTag: z.string().optional(),
        targetRepositoryUrl: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            originRepositoryUrl: "origin_repository_url",
            releaseTag: "release_tag",
            targetRepositoryUrl: "target_repository_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vcs$ {
    /** @deprecated use `Vcs$inboundSchema` instead. */
    export const inboundSchema = Vcs$inboundSchema;
    /** @deprecated use `Vcs$outboundSchema` instead. */
    export const outboundSchema = Vcs$outboundSchema;
    /** @deprecated use `Vcs$Outbound` instead. */
    export type Outbound = Vcs$Outbound;
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z
    .object({
        build_number: z.number().int().optional(),
        project_id: z.string().optional(),
        ssh_rerun: z.boolean().optional(),
        vcs: z.lazy(() => Vcs$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            build_number: "buildNumber",
            project_id: "projectId",
            ssh_rerun: "sshRerun",
        });
    });

/** @internal */
export type Metadata$Outbound = {
    build_number?: number | undefined;
    project_id?: string | undefined;
    ssh_rerun?: boolean | undefined;
    vcs?: Vcs$Outbound | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<Metadata$Outbound, z.ZodTypeDef, Metadata> = z
    .object({
        buildNumber: z.number().int().optional(),
        projectId: z.string().optional(),
        sshRerun: z.boolean().optional(),
        vcs: z.lazy(() => Vcs$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            buildNumber: "build_number",
            projectId: "project_id",
            sshRerun: "ssh_rerun",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
    /** @deprecated use `Metadata$inboundSchema` instead. */
    export const inboundSchema = Metadata$inboundSchema;
    /** @deprecated use `Metadata$outboundSchema` instead. */
    export const outboundSchema = Metadata$outboundSchema;
    /** @deprecated use `Metadata$Outbound` instead. */
    export type Outbound = Metadata$Outbound;
}

/** @internal */
export const DecisionLog$inboundSchema: z.ZodType<DecisionLog, z.ZodTypeDef, unknown> = z
    .object({
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        decision: Decision$inboundSchema.optional(),
        id: z.string().optional(),
        metadata: z.lazy(() => Metadata$inboundSchema).optional(),
        policies: z.record(z.string()).optional(),
        time_taken_ms: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            created_at: "createdAt",
            time_taken_ms: "timeTakenMs",
        });
    });

/** @internal */
export type DecisionLog$Outbound = {
    created_at?: string | undefined;
    decision?: Decision$Outbound | undefined;
    id?: string | undefined;
    metadata?: Metadata$Outbound | undefined;
    policies?: { [k: string]: string } | undefined;
    time_taken_ms?: number | undefined;
};

/** @internal */
export const DecisionLog$outboundSchema: z.ZodType<
    DecisionLog$Outbound,
    z.ZodTypeDef,
    DecisionLog
> = z
    .object({
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        decision: Decision$outboundSchema.optional(),
        id: z.string().optional(),
        metadata: z.lazy(() => Metadata$outboundSchema).optional(),
        policies: z.record(z.string()).optional(),
        timeTakenMs: z.number().int().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            createdAt: "created_at",
            timeTakenMs: "time_taken_ms",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DecisionLog$ {
    /** @deprecated use `DecisionLog$inboundSchema` instead. */
    export const inboundSchema = DecisionLog$inboundSchema;
    /** @deprecated use `DecisionLog$outboundSchema` instead. */
    export const outboundSchema = DecisionLog$outboundSchema;
    /** @deprecated use `DecisionLog$Outbound` instead. */
    export type Outbound = DecisionLog$Outbound;
}
