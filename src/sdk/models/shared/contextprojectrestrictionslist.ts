/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Type of the restriction
 */
export const ContextProjectRestrictionsListRestrictionType = {
    Project: "project",
    Expression: "expression",
} as const;
/**
 * Type of the restriction
 */
export type ContextProjectRestrictionsListRestrictionType = ClosedEnum<
    typeof ContextProjectRestrictionsListRestrictionType
>;

export type Items = {
    /**
     * UUID of the context
     */
    contextId?: string | undefined;
    /**
     * UUID of the restriction
     */
    id?: string | undefined;
    /**
     * Contains a human-readable reference for the restriction. For
     *
     * @remarks
     * "project" restrictions this is the name of the project.
     *
     * May be null.
     *
     */
    name?: string | undefined;
    /**
     * Deprecated - For "project" restrictions read the project ID from
     *
     * @remarks
     * "restriction_value" instead.
     *
     * UUID of the project used in a project restriction.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    projectId?: string | undefined;
    /**
     * Type of the restriction
     */
    restrictionType?: ContextProjectRestrictionsListRestrictionType | undefined;
    /**
     * Value used to evaluate the restriction
     */
    restrictionValue?: string | undefined;
};

export type ContextProjectRestrictionsList = {
    items?: Array<Items> | undefined;
    /**
     * Token that can be used to retrieve next page of results
     */
    nextPageToken?: string | null | undefined;
};

/** @internal */
export const ContextProjectRestrictionsListRestrictionType$inboundSchema: z.ZodNativeEnum<
    typeof ContextProjectRestrictionsListRestrictionType
> = z.nativeEnum(ContextProjectRestrictionsListRestrictionType);

/** @internal */
export const ContextProjectRestrictionsListRestrictionType$outboundSchema: z.ZodNativeEnum<
    typeof ContextProjectRestrictionsListRestrictionType
> = ContextProjectRestrictionsListRestrictionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextProjectRestrictionsListRestrictionType$ {
    /** @deprecated use `ContextProjectRestrictionsListRestrictionType$inboundSchema` instead. */
    export const inboundSchema = ContextProjectRestrictionsListRestrictionType$inboundSchema;
    /** @deprecated use `ContextProjectRestrictionsListRestrictionType$outboundSchema` instead. */
    export const outboundSchema = ContextProjectRestrictionsListRestrictionType$outboundSchema;
}

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
    .object({
        context_id: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        project_id: z.string().optional(),
        restriction_type: ContextProjectRestrictionsListRestrictionType$inboundSchema.optional(),
        restriction_value: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            context_id: "contextId",
            project_id: "projectId",
            restriction_type: "restrictionType",
            restriction_value: "restrictionValue",
        });
    });

/** @internal */
export type Items$Outbound = {
    context_id?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    project_id?: string | undefined;
    restriction_type?: string | undefined;
    restriction_value?: string | undefined;
};

/** @internal */
export const Items$outboundSchema: z.ZodType<Items$Outbound, z.ZodTypeDef, Items> = z
    .object({
        contextId: z.string().optional(),
        id: z.string().optional(),
        name: z.string().optional(),
        projectId: z.string().optional(),
        restrictionType: ContextProjectRestrictionsListRestrictionType$outboundSchema.optional(),
        restrictionValue: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contextId: "context_id",
            projectId: "project_id",
            restrictionType: "restriction_type",
            restrictionValue: "restriction_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
    /** @deprecated use `Items$inboundSchema` instead. */
    export const inboundSchema = Items$inboundSchema;
    /** @deprecated use `Items$outboundSchema` instead. */
    export const outboundSchema = Items$outboundSchema;
    /** @deprecated use `Items$Outbound` instead. */
    export type Outbound = Items$Outbound;
}

/** @internal */
export const ContextProjectRestrictionsList$inboundSchema: z.ZodType<
    ContextProjectRestrictionsList,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        items: z.array(z.lazy(() => Items$inboundSchema)).optional(),
        next_page_token: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            next_page_token: "nextPageToken",
        });
    });

/** @internal */
export type ContextProjectRestrictionsList$Outbound = {
    items?: Array<Items$Outbound> | undefined;
    next_page_token?: string | null | undefined;
};

/** @internal */
export const ContextProjectRestrictionsList$outboundSchema: z.ZodType<
    ContextProjectRestrictionsList$Outbound,
    z.ZodTypeDef,
    ContextProjectRestrictionsList
> = z
    .object({
        items: z.array(z.lazy(() => Items$outboundSchema)).optional(),
        nextPageToken: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            nextPageToken: "next_page_token",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContextProjectRestrictionsList$ {
    /** @deprecated use `ContextProjectRestrictionsList$inboundSchema` instead. */
    export const inboundSchema = ContextProjectRestrictionsList$inboundSchema;
    /** @deprecated use `ContextProjectRestrictionsList$outboundSchema` instead. */
    export const outboundSchema = ContextProjectRestrictionsList$outboundSchema;
    /** @deprecated use `ContextProjectRestrictionsList$Outbound` instead. */
    export type Outbound = ContextProjectRestrictionsList$Outbound;
}
