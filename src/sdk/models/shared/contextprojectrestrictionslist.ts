/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Type of the restriction
 */
export enum ContextProjectRestrictionsListRestrictionType {
    Project = "project",
    Expression = "expression",
}

export class Items extends SpeakeasyBase {
    /**
     * UUID of the context
     */
    @SpeakeasyMetadata()
    @Expose({ name: "context_id" })
    contextId?: string;

    /**
     * UUID of the restriction
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Contains a human-readable reference for the restriction. For
     *
     * @remarks
     * "project" restrictions this is the name of the project.
     *
     * May be null.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Deprecated - For "project" restrictions read the project ID from
     *
     * @remarks
     * "restriction_value" instead.
     *
     * UUID of the project used in a project restriction.
     *
     *
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "project_id" })
    projectId?: string;

    /**
     * Type of the restriction
     */
    @SpeakeasyMetadata()
    @Expose({ name: "restriction_type" })
    restrictionType?: ContextProjectRestrictionsListRestrictionType;

    /**
     * Value used to evaluate the restriction
     */
    @SpeakeasyMetadata()
    @Expose({ name: "restriction_value" })
    restrictionValue?: string;
}

export class ContextProjectRestrictionsList extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Items })
    @Expose({ name: "items" })
    @Type(() => Items)
    items?: Items[];

    /**
     * Token that can be used to retrieve next page of results
     */
    @SpeakeasyMetadata()
    @Expose({ name: "next_page_token" })
    nextPageToken?: string;
}
