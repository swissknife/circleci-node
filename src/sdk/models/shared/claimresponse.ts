/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type ClaimResponse = {
    audience?: Array<string> | undefined;
    audienceUpdatedAt?: Date | undefined;
    orgId: string;
    projectId?: string | undefined;
    ttl?: string | undefined;
    ttlUpdatedAt?: Date | undefined;
};

/** @internal */
export const ClaimResponse$inboundSchema: z.ZodType<ClaimResponse, z.ZodTypeDef, unknown> = z
    .object({
        audience: z.array(z.string()).optional(),
        audience_updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        org_id: z.string(),
        project_id: z.string().optional(),
        ttl: z.string().optional(),
        ttl_updated_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            audience_updated_at: "audienceUpdatedAt",
            org_id: "orgId",
            project_id: "projectId",
            ttl_updated_at: "ttlUpdatedAt",
        });
    });

/** @internal */
export type ClaimResponse$Outbound = {
    audience?: Array<string> | undefined;
    audience_updated_at?: string | undefined;
    org_id: string;
    project_id?: string | undefined;
    ttl?: string | undefined;
    ttl_updated_at?: string | undefined;
};

/** @internal */
export const ClaimResponse$outboundSchema: z.ZodType<
    ClaimResponse$Outbound,
    z.ZodTypeDef,
    ClaimResponse
> = z
    .object({
        audience: z.array(z.string()).optional(),
        audienceUpdatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        orgId: z.string(),
        projectId: z.string().optional(),
        ttl: z.string().optional(),
        ttlUpdatedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            audienceUpdatedAt: "audience_updated_at",
            orgId: "org_id",
            projectId: "project_id",
            ttlUpdatedAt: "ttl_updated_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClaimResponse$ {
    /** @deprecated use `ClaimResponse$inboundSchema` instead. */
    export const inboundSchema = ClaimResponse$inboundSchema;
    /** @deprecated use `ClaimResponse$outboundSchema` instead. */
    export const outboundSchema = ClaimResponse$outboundSchema;
    /** @deprecated use `ClaimResponse$Outbound` instead. */
    export type Outbound = ClaimResponse$Outbound;
}
