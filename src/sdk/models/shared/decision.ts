/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import {
    Violation,
    Violation$inboundSchema,
    Violation$Outbound,
    Violation$outboundSchema,
} from "./violation.js";
import * as z from "zod";

export type Decision = {
    enabledRules?: Array<string> | undefined;
    hardFailures?: Array<Violation> | undefined;
    reason?: string | undefined;
    softFailures?: Array<Violation> | undefined;
    status: string;
};

/** @internal */
export const Decision$inboundSchema: z.ZodType<Decision, z.ZodTypeDef, unknown> = z
    .object({
        enabled_rules: z.array(z.string()).optional(),
        hard_failures: z.array(Violation$inboundSchema).optional(),
        reason: z.string().optional(),
        soft_failures: z.array(Violation$inboundSchema).optional(),
        status: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            enabled_rules: "enabledRules",
            hard_failures: "hardFailures",
            soft_failures: "softFailures",
        });
    });

/** @internal */
export type Decision$Outbound = {
    enabled_rules?: Array<string> | undefined;
    hard_failures?: Array<Violation$Outbound> | undefined;
    reason?: string | undefined;
    soft_failures?: Array<Violation$Outbound> | undefined;
    status: string;
};

/** @internal */
export const Decision$outboundSchema: z.ZodType<Decision$Outbound, z.ZodTypeDef, Decision> = z
    .object({
        enabledRules: z.array(z.string()).optional(),
        hardFailures: z.array(Violation$outboundSchema).optional(),
        reason: z.string().optional(),
        softFailures: z.array(Violation$outboundSchema).optional(),
        status: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            enabledRules: "enabled_rules",
            hardFailures: "hard_failures",
            softFailures: "soft_failures",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Decision$ {
    /** @deprecated use `Decision$inboundSchema` instead. */
    export const inboundSchema = Decision$inboundSchema;
    /** @deprecated use `Decision$outboundSchema` instead. */
    export const outboundSchema = Decision$outboundSchema;
    /** @deprecated use `Decision$Outbound` instead. */
    export type Outbound = Decision$Outbound;
}
