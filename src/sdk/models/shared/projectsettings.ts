/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class Advanced extends SpeakeasyBase {
    /**
     * Except for the default branch, cancel running pipelines on a branch when a new pipeline starts on that branch.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "autocancel_builds" })
    autocancelBuilds?: boolean;

    /**
     * Run builds for pull requests from forks.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "build_fork_prs" })
    buildForkPrs?: boolean;

    /**
     * Once enabled, we will only build branches that have associated pull requests open.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "build_prs_only" })
    buildPrsOnly?: boolean;

    /**
     * When set to true, job re-runs with SSH debugging access will be disabled for the project.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "disable_ssh" })
    disableSsh?: boolean;

    /**
     * Run builds for forked pull requests with this project's configuration, environment variables, and secrets.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "forks_receive_secret_env_vars" })
    forksReceiveSecretEnvVars?: boolean;

    /**
     * Free and Open Source. Enabling this grants additional credits, and lets others see your builds, both through the web UI and the API.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "oss" })
    oss?: boolean;

    /**
     * This field is used in conjunction with the `build_prs_only`, it allows you to specify a list of branches that will always triger a build. The value passed will overwrite the existing value.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pr_only_branch_overrides" })
    prOnlyBranchOverrides?: string[];

    /**
     * Report the status of every pushed commit to GitHub's status API. Updates reported per job.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "set_github_status" })
    setGithubStatus?: boolean;

    /**
     * Enabling allows you to conditionally trigger configurations outside of the primary `.circleci` parent directory.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "setup_workflows" })
    setupWorkflows?: boolean;

    /**
     * Whether updating these settings requires a user to be an organization administrator. When disabled, updating settings can be done by any member.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "write_settings_requires_admin" })
    writeSettingsRequiresAdmin?: boolean;
}

export class ProjectSettings extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "advanced" })
    @Type(() => Advanced)
    advanced?: Advanced;
}
