/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * Type of the restriction
 */
export const RestrictionType = {
    Project: "project",
    Expression: "expression",
} as const;
/**
 * Type of the restriction
 */
export type RestrictionType = ClosedEnum<typeof RestrictionType>;

export type RestrictionCreated = {
    /**
     * UUID of the project restriction
     */
    id?: string | undefined;
    /**
     * Contains a human-readable reference for the restriction. For
     *
     * @remarks
     * "project" restrictions this is the name of the project.
     *
     * May be null.
     *
     */
    name?: string | undefined;
    /**
     * Deprecated - For "project" restrictions read the project ID from
     *
     * @remarks
     * "restriction_value" instead.
     *
     * UUID of the project used in a project restriction.
     *
     */
    projectId?: string | undefined;
    /**
     * Type of the restriction
     */
    restrictionType?: RestrictionType | undefined;
    /**
     * Value used to evaluate the restriction
     */
    restrictionValue?: string | undefined;
};

/** @internal */
export const RestrictionType$inboundSchema: z.ZodNativeEnum<typeof RestrictionType> =
    z.nativeEnum(RestrictionType);

/** @internal */
export const RestrictionType$outboundSchema: z.ZodNativeEnum<typeof RestrictionType> =
    RestrictionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestrictionType$ {
    /** @deprecated use `RestrictionType$inboundSchema` instead. */
    export const inboundSchema = RestrictionType$inboundSchema;
    /** @deprecated use `RestrictionType$outboundSchema` instead. */
    export const outboundSchema = RestrictionType$outboundSchema;
}

/** @internal */
export const RestrictionCreated$inboundSchema: z.ZodType<
    RestrictionCreated,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        project_id: z.string().optional(),
        restriction_type: RestrictionType$inboundSchema.optional(),
        restriction_value: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            project_id: "projectId",
            restriction_type: "restrictionType",
            restriction_value: "restrictionValue",
        });
    });

/** @internal */
export type RestrictionCreated$Outbound = {
    id?: string | undefined;
    name?: string | undefined;
    project_id?: string | undefined;
    restriction_type?: string | undefined;
    restriction_value?: string | undefined;
};

/** @internal */
export const RestrictionCreated$outboundSchema: z.ZodType<
    RestrictionCreated$Outbound,
    z.ZodTypeDef,
    RestrictionCreated
> = z
    .object({
        id: z.string().optional(),
        name: z.string().optional(),
        projectId: z.string().optional(),
        restrictionType: RestrictionType$outboundSchema.optional(),
        restrictionValue: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            projectId: "project_id",
            restrictionType: "restriction_type",
            restrictionValue: "restriction_value",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RestrictionCreated$ {
    /** @deprecated use `RestrictionCreated$inboundSchema` instead. */
    export const inboundSchema = RestrictionCreated$inboundSchema;
    /** @deprecated use `RestrictionCreated$outboundSchema` instead. */
    export const outboundSchema = RestrictionCreated$outboundSchema;
    /** @deprecated use `RestrictionCreated$Outbound` instead. */
    export type Outbound = RestrictionCreated$Outbound;
}
