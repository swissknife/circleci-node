/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Violation = {
    reason: string;
    rule: string;
};

/** @internal */
export const Violation$inboundSchema: z.ZodType<Violation, z.ZodTypeDef, unknown> = z.object({
    reason: z.string(),
    rule: z.string(),
});

/** @internal */
export type Violation$Outbound = {
    reason: string;
    rule: string;
};

/** @internal */
export const Violation$outboundSchema: z.ZodType<Violation$Outbound, z.ZodTypeDef, Violation> =
    z.object({
        reason: z.string(),
        rule: z.string(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Violation$ {
    /** @deprecated use `Violation$inboundSchema` instead. */
    export const inboundSchema = Violation$inboundSchema;
    /** @deprecated use `Violation$outboundSchema` instead. */
    export const outboundSchema = Violation$outboundSchema;
    /** @deprecated use `Violation$Outbound` instead. */
    export type Outbound = Violation$Outbound;
}
